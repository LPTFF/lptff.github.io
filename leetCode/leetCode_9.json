[
    {
        "problemsName": " 401.二进制手表",
        "hardRate": "EASY",
        "passRate": "62.58%",
        "problemsUrl": "https://leetcode.cn/problems/binary-watch/",
        "solutionsUrl": "https://leetcode.cn/problems/binary-watch/solution",
        "problemsDesc": "<p>二进制手表顶部有 4 个 LED 代表<strong> 小时（0-11）</strong>，底部的 6 个 LED 代表<strong> 分钟（0-59）</strong>。每个 LED 代表一个 0 或 1，最低位在右侧。</p>\n\n<ul>\n\t<li>例如，下面的二进制手表读取 <code>\"3:25\"</code> 。</li>\n</ul>\n\n<p><img src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/03/29/binary_clock_samui_moon.jpg\" style=\"height: 300px; width\" /></p>\n\n<p><small><em>（图源：<a href=\"https://commons.m.wikimedia.org/wiki/File:Binary_clock_samui_moon.jpg\">WikiMedia - Binary clock samui moon.jpg</a> ，许可协议：<a href=\"https://creativecommons.org/licenses/by-sa/3.0/deed.en\">Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)</a> ）</em></small></p>\n\n<p>给你一个整数 <code>turnedOn</code> ，表示当前亮着的 LED 的数量，返回二进制手表可以表示的所有可能时间。你可以 <strong>按任意顺序</strong> 返回答案。</p>\n\n<p>小时不会以零开头：</p>\n\n<ul>\n\t<li>例如，<code>\"01:00\"</code> 是无效的时间，正确的写法应该是 <code>\"1:00\"</code> 。</li>\n</ul>\n\n<p>分钟必须由两位数组成，可能会以零开头：</p>\n\n<ul>\n\t<li>例如，<code>\"10:2\"</code> 是无效的时间，正确的写法应该是 <code>\"10:02\"</code> 。</li>\n</ul>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>turnedOn = 1\n<strong>输出：</strong>[\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>turnedOn = 9\n<strong>输出：</strong>[]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 <= turnedOn <= 10</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 402.移掉 K 位数字",
        "hardRate": "MEDIUM",
        "passRate": "31.72%",
        "problemsUrl": "https://leetcode.cn/problems/remove-k-digits/",
        "solutionsUrl": "https://leetcode.cn/problems/remove-k-digits/solution",
        "problemsDesc": "<p>给你一个以字符串表示的非负整数 <code>num</code> 和一个整数 <code>k</code> ，移除这个数中的 <code>k</code><em> </em>位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。</p>\n \n\n<p><strong>示例 1 ：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"1432219\", k = 3\n<strong>输出：</strong>\"1219\"\n<strong>解释：</strong>移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"10200\", k = 1\n<strong>输出：</strong>\"200\"\n<strong>解释：</strong>移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。\n</pre>\n\n<p><strong>示例 3 ：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = \"10\", k = 2\n<strong>输出：</strong>\"0\"\n<strong>解释：</strong>从原数字移除所有的数字，剩余为空就是 0 。\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= k <= num.length <= 10<sup>5</sup></code></li>\n\t<li><code>num</code> 仅由若干位数字（0 - 9）组成</li>\n\t<li>除了 <strong>0</strong> 本身之外，<code>num</code> 不含任何前导零</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 403.青蛙过河",
        "hardRate": "HARD",
        "passRate": "46.05%",
        "problemsUrl": "https://leetcode.cn/problems/frog-jump/",
        "solutionsUrl": "https://leetcode.cn/problems/frog-jump/solution",
        "problemsDesc": "<p>一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</p>\n\n<p>给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示），&nbsp;请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。开始时，&nbsp;青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃 <code>1</code> 个单位（即只能从单元格 1 跳至单元格 2 ）。</p>\n\n<p>如果青蛙上一步跳跃了&nbsp;<code>k</code><em>&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<code>k - 1</code>、<code>k</code><em>&nbsp;</em>或&nbsp;<code>k + 1</code> 个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [0,1,3,5,6,8,12,17]\n<strong>输出：</strong>true\n<strong>解释：</strong>青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [0,1,2,3,4,8,9,11]\n<strong>输出：</strong>false\n<strong>解释：</strong>这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;按严格升序排列</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 404.左叶子之和",
        "hardRate": "EASY",
        "passRate": "62.43%",
        "problemsUrl": "https://leetcode.cn/problems/sum-of-left-leaves/",
        "solutionsUrl": "https://leetcode.cn/problems/sum-of-left-leaves/solution",
        "problemsDesc": "<p>给定二叉树的根节点&nbsp;<code>root</code>&nbsp;，返回所有左叶子之和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> root = [3,9,20,null,null,15,7] \n<strong>输出:</strong> 24 \n<strong>解释:</strong> 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> root = [1]\n<strong>输出:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>节点数在&nbsp;<code>[1, 1000]</code>&nbsp;范围内</li>\n\t<li><code>-1000 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 405.数字转换为十六进制数",
        "hardRate": "EASY",
        "passRate": "54.72%",
        "problemsUrl": "https://leetcode.cn/problems/convert-a-number-to-hexadecimal/",
        "solutionsUrl": "https://leetcode.cn/problems/convert-a-number-to-hexadecimal/solution",
        "problemsDesc": "<p>给定一个整数，编写一个算法将这个数转换为十六进制数。对于负整数，我们通常使用&nbsp;<a href=\"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81/6854613?fr=aladdin\">补码运算</a>&nbsp;方法。</p>\n\n<p><strong>注意:</strong></p>\n\n<ol>\n\t<li>十六进制中所有字母(<code>a-f</code>)都必须是小写。</li>\n\t<li>十六进制字符串中不能包含多余的前导零。如果要转化的数为0，那么以单个字符<code>&#39;0&#39;</code>来表示；对于其他情况，十六进制字符串中的第一个字符将不会是0字符。&nbsp;</li>\n\t<li>给定的数确保在32位有符号整数范围内。</li>\n\t<li><strong>不能使用任何由库提供的将数字直接转换或格式化为十六进制的方法。</strong></li>\n</ol>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n输入:\n26\n\n输出:\n&quot;1a&quot;\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n输入:\n-1\n\n输出:\n&quot;ffffffff&quot;\n</pre>\n",
        "isPlus": false
    },
    {
        "problemsName": " 406.根据身高重建队列",
        "hardRate": "MEDIUM",
        "passRate": "76.32%",
        "problemsUrl": "https://leetcode.cn/problems/queue-reconstruction-by-height/",
        "solutionsUrl": "https://leetcode.cn/problems/queue-reconstruction-by-height/solution",
        "problemsDesc": "<p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [h<sub>i</sub>, k<sub>i</sub>]</code> 表示第 <code>i</code> 个人的身高为 <code>h<sub>i</sub></code> ，前面 <strong>正好</strong> 有 <code>k<sub>i</sub></code><sub> </sub>个身高大于或等于 <code>h<sub>i</sub></code> 的人。</p>\n\n<p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [h<sub>j</sub>, k<sub>j</sub>]</code> 是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p>\n\n<p> </p>\n\n<ul>\n</ul>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n<strong>输出：</strong>[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n<strong>解释：</strong>\n编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n<strong>输出：</strong>[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= people.length <= 2000</code></li>\n\t<li><code>0 <= h<sub>i</sub> <= 10<sup>6</sup></code></li>\n\t<li><code>0 <= k<sub>i</sub> < people.length</code></li>\n\t<li>题目数据确保队列可以被重建</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 407.接雨水 II",
        "hardRate": "HARD",
        "passRate": "57.61%",
        "problemsUrl": "https://leetcode.cn/problems/trapping-rain-water-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/trapping-rain-water-ii/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>m x n</code>&nbsp;的矩阵，其中的值均为非负整数，代表二维高度图每个单元的高度，请计算图中形状最多能接多少体积的雨水。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n<strong>输出:</strong> 4\n<strong>解释:</strong> 下雨后，雨水将会被上图蓝色的方块中。总的接雨水量为1+2+1=4。\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n<strong>输出:</strong> 10\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>m == heightMap.length</code></li>\n\t<li><code>n == heightMap[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heightMap[i][j] &lt;= 2 * 10<sup>4</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 408.有效单词缩写",
        "hardRate": "EASY",
        "passRate": "35.38%",
        "problemsUrl": "https://leetcode.cn/problems/valid-word-abbreviation/",
        "solutionsUrl": "https://leetcode.cn/problems/valid-word-abbreviation/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 409.最长回文串",
        "hardRate": "EASY",
        "passRate": "55.77%",
        "problemsUrl": "https://leetcode.cn/problems/longest-palindrome/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-palindrome/solution",
        "problemsDesc": "<p>给定一个包含大写字母和小写字母的字符串<meta charset=\"UTF-8\" />&nbsp;<code>s</code>&nbsp;，返回&nbsp;<em>通过这些字母构造成的 <strong>最长的回文串</strong></em>&nbsp;。</p>\n\n<p>在构造过程中，请注意 <strong>区分大小写</strong> 。比如&nbsp;<code>\"Aa\"</code>&nbsp;不能当做一个回文字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1: </strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"abccccdd\"\n<strong>输出:</strong>7\n<strong>解释:</strong>\n我们可以构造的最长的回文串是\"dccaccd\", 它的长度是 7。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"a\"\n<strong>输出:</strong>1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入:</strong>s = \"aaaaaccc\"\n<strong>输出:</strong>7</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code>&nbsp;只由小写 <strong>和/或</strong> 大写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 410.分割数组的最大值",
        "hardRate": "HARD",
        "passRate": "59.14%",
        "problemsUrl": "https://leetcode.cn/problems/split-array-largest-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/split-array-largest-sum/solution",
        "problemsDesc": "<p>给定一个非负整数数组 <code>nums</code> 和一个整数&nbsp;<code>m</code> ，你需要将这个数组分成&nbsp;<code>m</code><em>&nbsp;</em>个非空的连续子数组。</p>\n\n<p>设计一个算法使得这&nbsp;<code>m</code><em>&nbsp;</em>个子数组各自和的最大值最小。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [7,2,5,10,8], m = 2\n<strong>输出：</strong>18\n<strong>解释：</strong>\n一共有四种方法将 nums 分割为 2 个子数组。 \n其中最好的方式是将其分为 [7,2,5] 和 [10,8] 。\n因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4,5], m = 2\n<strong>输出：</strong>9\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,4,4], m = 3\n<strong>输出：</strong>4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= m &lt;= min(50, nums.length)</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 411.最短独占单词缩写",
        "hardRate": "HARD",
        "passRate": "49.63%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-unique-word-abbreviation/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-unique-word-abbreviation/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 412.Fizz Buzz",
        "hardRate": "EASY",
        "passRate": "68.93%",
        "problemsUrl": "https://leetcode.cn/problems/fizz-buzz/",
        "solutionsUrl": "https://leetcode.cn/problems/fizz-buzz/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> ，找出从 <code>1</code> 到 <code>n</code> 各个整数的 Fizz Buzz 表示，并用字符串数组 <code>answer</code>（<strong>下标从 1 开始</strong>）返回结果，其中：</p>\n\n<ul>\n\t<li><code>answer[i] == \"FizzBuzz\"</code> 如果 <code>i</code> 同时是 <code>3</code> 和 <code>5</code> 的倍数。</li>\n\t<li><code>answer[i] == \"Fizz\"</code> 如果 <code>i</code> 是 <code>3</code> 的倍数。</li>\n\t<li><code>answer[i] == \"Buzz\"</code> 如果 <code>i</code> 是 <code>5</code> 的倍数。</li>\n\t<li><code>answer[i] == i</code> （以字符串形式）如果上述条件全不满足。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3\n<strong>输出：</strong>[\"1\",\"2\",\"Fizz\"]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 5\n<strong>输出：</strong>[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 15\n<strong>输出：</strong>[\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 413.等差数列划分",
        "hardRate": "MEDIUM",
        "passRate": "69.52%",
        "problemsUrl": "https://leetcode.cn/problems/arithmetic-slices/",
        "solutionsUrl": "https://leetcode.cn/problems/arithmetic-slices/solution",
        "problemsDesc": "<p>如果一个数列 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该数列为等差数列。</p>\n\n<ul>\n\t<li>例如，<code>[1,3,5,7,9]</code>、<code>[7,7,7,7]</code> 和 <code>[3,-1,-5,-9]</code> 都是等差数列。</li>\n</ul>\n\n<div class=\"original__bRMd\">\n<div>\n<p>给你一个整数数组 <code>nums</code> ，返回数组 <code>nums</code> 中所有为等差数组的 <strong>子数组</strong> 个数。</p>\n\n<p><strong>子数组</strong> 是数组中的一个连续序列。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>3\n<strong>解释：</strong>nums 中有三个子等差数组：[1, 2, 3]、[2, 3, 4] 和 [1,2,3,4] 自身。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1]\n<strong>输出：</strong>0\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 5000</code></li>\n\t<li><code>-1000 <= nums[i] <= 1000</code></li>\n</ul>\n</div>\n</div>\n",
        "isPlus": false
    },
    {
        "problemsName": " 414.第三大的数",
        "hardRate": "EASY",
        "passRate": "39.66%",
        "problemsUrl": "https://leetcode.cn/problems/third-maximum-number/",
        "solutionsUrl": "https://leetcode.cn/problems/third-maximum-number/solution",
        "problemsDesc": "<p>给你一个非空数组，返回此数组中 <strong>第三大的数</strong> 。如果不存在，则返回数组中最大的数。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>[3, 2, 1]\n<strong>输出：</strong>1\n<strong>解释：</strong>第三大的数是 1 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>[1, 2]\n<strong>输出：</strong>2\n<strong>解释：</strong>第三大的数不存在, 所以返回最大的数 2 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>[2, 2, 3, 1]\n<strong>输出：</strong>1\n<strong>解释：</strong>注意，要求返回第三大的数，是指在所有不同数字中排第三大的数。\n此例中存在两个值为 2 的数，它们都排第二。在所有不同数字中排第三大的数为 1 。</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10<sup>4</sup></code></li>\n\t<li><code>-2<sup>31</sup> <= nums[i] <= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n<p> </p>\n\n<p><strong>进阶：</strong>你能设计一个时间复杂度 <code>O(n)</code> 的解决方案吗？</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 415.字符串相加",
        "hardRate": "EASY",
        "passRate": "54.81%",
        "problemsUrl": "https://leetcode.cn/problems/add-strings/",
        "solutionsUrl": "https://leetcode.cn/problems/add-strings/solution",
        "problemsDesc": "<p>给定两个字符串形式的非负整数&nbsp;<code>num1</code> 和<code>num2</code>&nbsp;，计算它们的和并同样以字符串形式返回。</p>\n\n<p>你不能使用任何內建的用于处理大整数的库（比如 <code>BigInteger</code>），&nbsp;也不能直接将输入的字符串转换为整数形式。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"11\", num2 = \"123\"\n<strong>输出：</strong>\"134\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"456\", num2 = \"77\"\n<strong>输出：</strong>\"533\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num1 = \"0\", num2 = \"0\"\n<strong>输出：</strong>\"0\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1.length, num2.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都只包含数字&nbsp;<code>0-9</code></li>\n\t<li><code>num1</code> 和<code>num2</code> 都不包含任何前导零</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 416.分割等和子集",
        "hardRate": "MEDIUM",
        "passRate": "52.18%",
        "problemsUrl": "https://leetcode.cn/problems/partition-equal-subset-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/partition-equal-subset-sum/solution",
        "problemsDesc": "<p>给你一个 <strong>只包含正整数 </strong>的 <strong>非空 </strong>数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,5,11,5]\n<strong>输出：</strong>true\n<strong>解释：</strong>数组可以分割成 [1, 5, 5] 和 [11] 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,5]\n<strong>输出：</strong>false\n<strong>解释：</strong>数组不能分割成两个元素和相等的子集。\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 200</code></li>\n\t<li><code>1 <= nums[i] <= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 417.太平洋大西洋水流问题",
        "hardRate": "MEDIUM",
        "passRate": "56.19%",
        "problemsUrl": "https://leetcode.cn/problems/pacific-atlantic-water-flow/",
        "solutionsUrl": "https://leetcode.cn/problems/pacific-atlantic-water-flow/solution",
        "problemsDesc": "<p>有一个 <code>m × n</code> 的矩形岛屿，与 <strong>太平洋</strong> 和 <strong>大西洋</strong> 相邻。&nbsp;<strong>“太平洋”&nbsp;</strong>处于大陆的左边界和上边界，而 <strong>“大西洋”</strong> 处于大陆的右边界和下边界。</p>\n\n<p>这个岛被分割成一个由若干方形单元格组成的网格。给定一个 <code>m x n</code> 的整数矩阵&nbsp;<code>heights</code>&nbsp;，&nbsp;<code>heights[r][c]</code>&nbsp;表示坐标 <code>(r, c)</code> 上单元格 <strong>高于海平面的高度</strong> 。</p>\n\n<p>岛上雨水较多，如果相邻单元格的高度 <strong>小于或等于</strong> 当前单元格的高度，雨水可以直接向北、南、东、西流向相邻单元格。水可以从海洋附近的任何单元格流入海洋。</p>\n\n<p>返回网格坐标 <code>result</code>&nbsp;的 <strong>2D 列表</strong> ，其中&nbsp;<code>result[i] = [r<sub>i</sub>, c<sub>i</sub>]</code>&nbsp;表示雨水从单元格 <code>(ri, ci)</code> 流动 <strong>既可流向太平洋也可流向大西洋</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/06/08/waterflow-grid.jpg\" /></p>\n\n<pre>\n<strong>输入:</strong> heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n<strong>输出:</strong> [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入:</strong> heights = [[2,1],[1,2]]\n<strong>输出:</strong> [[0,0],[0,1],[1,0],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == heights.length</code></li>\n\t<li><code>n == heights[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>0 &lt;= heights[r][c] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 418.屏幕可显示句子的数量",
        "hardRate": "MEDIUM",
        "passRate": "39.01%",
        "problemsUrl": "https://leetcode.cn/problems/sentence-screen-fitting/",
        "solutionsUrl": "https://leetcode.cn/problems/sentence-screen-fitting/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 419.甲板上的战舰",
        "hardRate": "MEDIUM",
        "passRate": "78.08%",
        "problemsUrl": "https://leetcode.cn/problems/battleships-in-a-board/",
        "solutionsUrl": "https://leetcode.cn/problems/battleships-in-a-board/solution",
        "problemsDesc": "<p>给你一个大小为 <code>m x n</code> 的矩阵 <code>board</code> 表示甲板，其中，每个单元格可以是一艘战舰 <code>'X'</code> 或者是一个空位 <code>'.'</code> ，返回在甲板 <code>board</code> 上放置的 <strong>战舰</strong> 的数量。</p>\n\n<p><strong>战舰</strong> 只能水平或者垂直放置在 <code>board</code> 上。换句话说，战舰只能按 <code>1 x k</code>（<code>1</code> 行，<code>k</code> 列）或 <code>k x 1</code>（<code>k</code> 行，<code>1</code> 列）的形状建造，其中 <code>k</code> 可以是任意大小。两艘战舰之间至少有一个水平或垂直的空位分隔 （即没有相邻的战舰）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/10/battelship-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>输入：</strong>board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>board = [[\".\"]]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> 是 <code>'.'</code> 或 <code>'X'</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你可以实现一次扫描算法，并只使用<strong> </strong><code>O(1)</code><strong> </strong>额外空间，并且不修改 <code>board</code> 的值来解决这个问题吗？</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 420.强密码检验器",
        "hardRate": "HARD",
        "passRate": "39.11%",
        "problemsUrl": "https://leetcode.cn/problems/strong-password-checker/",
        "solutionsUrl": "https://leetcode.cn/problems/strong-password-checker/solution",
        "problemsDesc": "<p>满足以下条件的密码被认为是强密码：</p>\n\n<ul>\n\t<li>由至少 <code>6</code> 个，至多 <code>20</code> 个字符组成。</li>\n\t<li>包含至少 <strong>一个小写 </strong>字母，至少&nbsp;<strong>一个大写</strong> 字母，和至少&nbsp;<strong>一个数字</strong> 。</li>\n\t<li>不包含连续三个重复字符 (比如 <code>\"B<em><strong>aaa</strong></em>bb0\"</code> 是弱密码, 但是&nbsp;<code>\"B<em><strong>aa</strong></em>b<em><strong>a</strong></em>0\"</code> 是强密码)。</li>\n</ul>\n\n<p>给你一个字符串 <code>password</code> ，返回&nbsp;<em>将 <code>password</code> 修改到满足强密码条件需要的最少修改步数。如果 <code>password</code> 已经是强密码，则返回 <code>0</code> 。</em></p>\n\n<p>在一步修改操作中，你可以：</p>\n\n<ul>\n\t<li>插入一个字符到 <code>password</code> ，</li>\n\t<li>从 <code>password</code> 中删除一个字符，或</li>\n\t<li>用另一个字符来替换 <code>password</code> 中的某个字符。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>password = \"a\"\n<strong>输出：</strong>5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>password = \"aA1\"\n<strong>输出：</strong>3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>password = \"1337C0d3\"\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= password.length &lt;= 50</code></li>\n\t<li><code>password</code> 由字母、数字、点 <code>'.'</code> 或者感叹号 <code>'!'</code> 组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 421.数组中两个数的最大异或值",
        "hardRate": "MEDIUM",
        "passRate": "61.09%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-xor-of-two-numbers-in-an-array/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，返回<em> </em><code>nums[i] XOR nums[j]</code> 的最大运算结果，其中 <code>0 ≤ i ≤ j &lt; n</code> 。</p>\n\n<p>&nbsp;</p>\n\n<div class=\"original__bRMd\">\n<div>\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,10,5,25,2,8]\n<strong>输出：</strong>28\n<strong>解释：</strong>最大运算结果是 5 XOR 25 = 28.</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n<strong>输出：</strong>127\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n</div>\n</div>\n",
        "isPlus": false
    },
    {
        "problemsName": " 422.有效的单词方块",
        "hardRate": "EASY",
        "passRate": "43.41%",
        "problemsUrl": "https://leetcode.cn/problems/valid-word-square/",
        "solutionsUrl": "https://leetcode.cn/problems/valid-word-square/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 423.从英文中重建数字",
        "hardRate": "MEDIUM",
        "passRate": "60.80%",
        "problemsUrl": "https://leetcode.cn/problems/reconstruct-original-digits-from-english/",
        "solutionsUrl": "https://leetcode.cn/problems/reconstruct-original-digits-from-english/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> ，其中包含字母顺序打乱的用英文单词表示的若干数字（<code>0-9</code>）。按 <strong>升序</strong> 返回原始的数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"owoztneoer\"\n<strong>输出：</strong>\"012\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"fviefuro\"\n<strong>输出：</strong>\"45\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s[i]</code> 为 <code>[\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]</code> 这些字符之一</li>\n\t<li><code>s</code> 保证是一个符合题目要求的字符串</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 424.替换后的最长重复字符",
        "hardRate": "MEDIUM",
        "passRate": "54.63%",
        "problemsUrl": "https://leetcode.cn/problems/longest-repeating-character-replacement/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-repeating-character-replacement/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> 和一个整数 <code>k</code> 。你可以选择字符串中的任一字符，并将其更改为任何其他大写英文字符。该操作最多可执行 <code>k</code> 次。</p>\n\n<p>在执行上述操作后，返回包含相同字母的最长子字符串的长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ABAB\", k = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>用两个'A'替换为两个'B',反之亦然。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"AABABBA\", k = 1\n<strong>输出：</strong>4\n<strong>解释：</strong>\n将中间的一个'A'替换为'B',字符串变为 \"AABBBBA\"。\n子串 \"BBBB\" 有最长重复字母, 答案为 4。\n可能存在其他的方法来得到同样的结果。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由大写英文字母组成</li>\n\t<li><code>0 &lt;= k &lt;= s.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 425.单词方块",
        "hardRate": "HARD",
        "passRate": "62.85%",
        "problemsUrl": "https://leetcode.cn/problems/word-squares/",
        "solutionsUrl": "https://leetcode.cn/problems/word-squares/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 426.将二叉搜索树转化为排序的双向链表",
        "hardRate": "MEDIUM",
        "passRate": "68.14%",
        "problemsUrl": "https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/",
        "solutionsUrl": "https://leetcode.cn/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 427.建立四叉树",
        "hardRate": "MEDIUM",
        "passRate": "71.22%",
        "problemsUrl": "https://leetcode.cn/problems/construct-quad-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/construct-quad-tree/solution",
        "problemsDesc": "<p>给你一个 <code>n * n</code> 矩阵 <code>grid</code> ，矩阵由若干 <code>0</code> 和 <code>1</code> 组成。请你用四叉树表示该矩阵 <code>grid</code> 。</p>\n\n<p>你需要返回能表示矩阵的 四叉树 的根结点。</p>\n\n<p>注意，当 <code>isLeaf</code> 为 <strong>False </strong>时，你可以把 <strong>True</strong> 或者 <strong>False</strong> 赋值给节点，两种值都会被判题机制 <strong>接受</strong> 。</p>\n\n<p>四叉树数据结构中，每个内部节点只有四个子节点。此外，每个节点都有两个属性：</p>\n\n<ul>\n\t<li><code>val</code>：储存叶子结点所代表的区域的值。1 对应 <strong>True</strong>，0 对应 <strong>False</strong>；</li>\n\t<li><code>isLeaf</code>: 当这个节点是一个叶子结点时为 <strong>True</strong>，如果它有 4 个子节点则为 <strong>False</strong> 。</li>\n</ul>\n\n<pre>class Node {\n    public boolean val;\n&nbsp; &nbsp; public boolean isLeaf;\n&nbsp; &nbsp; public Node topLeft;\n&nbsp; &nbsp; public Node topRight;\n&nbsp; &nbsp; public Node bottomLeft;\n&nbsp; &nbsp; public Node bottomRight;\n}</pre>\n\n<p>我们可以按以下步骤为二维区域构建四叉树：</p>\n\n<ol>\n\t<li>如果当前网格的值相同（即，全为 <code>0</code> 或者全为 <code>1</code>），将 <code>isLeaf</code> 设为 True ，将 <code>val</code> 设为网格相应的值，并将四个子节点都设为 Null 然后停止。</li>\n\t<li>如果当前网格的值不同，将 <code>isLeaf</code> 设为 False， 将 <code>val</code> 设为任意值，然后如下图所示，将当前网格划分为四个子网格。</li>\n\t<li>使用适当的子网格递归每个子节点。</li>\n</ol>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/new_top.png\" style=\"height: 181px; width: 777px;\"></p>\n\n<p>如果你想了解更多关于四叉树的内容，可以参考 <a href=\"https://en.wikipedia.org/wiki/Quadtree\">wiki</a> 。</p>\n\n<p><strong>四叉树格式：</strong></p>\n\n<p>输出为使用层序遍历后四叉树的序列化形式，其中 <code>null</code> 表示路径终止符，其下面不存在节点。</p>\n\n<p>它与二叉树的序列化非常相似。唯一的区别是节点以列表形式表示 <code>[isLeaf, val]</code> 。</p>\n\n<p>如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 True ，则表示它在列表&nbsp;<code>[isLeaf, val]</code> 中的值为 <strong>1</strong> ；如果 <code>isLeaf</code> 或者 <code>val</code> 的值为 False ，则表示值为 <strong>0 </strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/11/grid1.png\" style=\"height: 99px; width: 777px;\"></p>\n\n<pre><strong>输入：</strong>grid = [[0,1],[1,0]]\n<strong>输出：</strong>[[0,1],[1,0],[1,1],[1,1],[1,0]]\n<strong>解释：</strong>此示例的解释如下：\n请注意，在下面四叉树的图示中，0 表示 false，1 表示 True 。\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e1tree.png\" style=\"height: 186px; width: 777px;\">\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2mat.png\" style=\"height: 343px; width: 777px;\"></p>\n\n<pre><strong>输入：</strong>grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n<strong>输出：</strong>[[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n<strong>解释：</strong>网格中的所有值都不相同。我们将网格划分为四个子网格。\ntopLeft，bottomLeft 和 bottomRight 均具有相同的值。\ntopRight 具有不同的值，因此我们将其再分为 4 个子网格，这样每个子网格都具有相同的值。\n解释如下图所示：\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/02/12/e2tree.png\" style=\"height: 328px; width: 777px;\">\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[1,1],[1,1]]\n<strong>输出：</strong>[[1,1]]\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[0]]\n<strong>输出：</strong>[[1,0]]\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\n<strong>输出：</strong>[[0,1],[1,1],[1,0],[1,0],[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ol>\n\t<li><code>n == grid.length == grid[i].length</code></li>\n\t<li><code>n == 2^x</code> 其中 <code>0 &lt;= x &lt;= 6</code></li>\n</ol>\n",
        "isPlus": false
    },
    {
        "problemsName": " 428.序列化和反序列化 N 叉树",
        "hardRate": "HARD",
        "passRate": "68.86%",
        "problemsUrl": "https://leetcode.cn/problems/serialize-and-deserialize-n-ary-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/serialize-and-deserialize-n-ary-tree/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 429.N 叉树的层序遍历",
        "hardRate": "MEDIUM",
        "passRate": "72.91%",
        "problemsUrl": "https://leetcode.cn/problems/n-ary-tree-level-order-traversal/",
        "solutionsUrl": "https://leetcode.cn/problems/n-ary-tree-level-order-traversal/solution",
        "problemsDesc": "<p>给定一个 N 叉树，返回其节点值的<em>层序遍历</em>。（即从左到右，逐层遍历）。</p>\n\n<p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png\" style=\"width: 100%; max-width: 300px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [1,null,3,2,4,null,5,6]\n<strong>输出：</strong>[[1],[3,2,4],[5,6]]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png\" style=\"width: 296px; height: 241px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n<strong>输出：</strong>[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树的高度不会超过 <code>1000</code></li>\n\t<li>树的节点总数在 <code>[0, 10^4]</code> 之间</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 430.扁平化多级双向链表",
        "hardRate": "MEDIUM",
        "passRate": "59.53%",
        "problemsUrl": "https://leetcode.cn/problems/flatten-a-multilevel-doubly-linked-list/",
        "solutionsUrl": "https://leetcode.cn/problems/flatten-a-multilevel-doubly-linked-list/solution",
        "problemsDesc": "<p>你会得到一个双链表，其中包含的节点有一个下一个指针、一个前一个指针和一个额外的 <strong>子指针</strong> 。这个子指针可能指向一个单独的双向链表，也包含这些特殊的节点。这些子列表可以有一个或多个自己的子列表，以此类推，以生成如下面的示例所示的 <strong>多层数据结构</strong> 。</p>\n\n<p>给定链表的头节点&nbsp;<font color=\"#c7254e\"><font face=\"Menlo, Monaco, Consolas, Courier New, monospace\"><span style=\"font-size:12.6px\"><span style=\"background-color:#f9f2f4\">head</span></span></font></font>&nbsp;，将链表 <strong>扁平化</strong> ，以便所有节点都出现在单层双链表中。让 <code>curr</code> 是一个带有子列表的节点。子列表中的节点应该出现在<strong>扁平化列表</strong>中的&nbsp;<code>curr</code> <strong>之后</strong> 和&nbsp;<code>curr.next</code>&nbsp;<strong>之前</strong> 。</p>\n\n<p>返回 <em>扁平列表的 <code>head</code>&nbsp;。列表中的节点必须将其 <strong>所有</strong> 子指针设置为&nbsp;<code>null</code>&nbsp;。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten11.jpg\" style=\"height:339px; width:700px\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n<strong>输出：</strong>[1,2,3,7,8,11,12,9,10,4,5,6]\n<strong>解释：</strong>输入的多级列表如上图所示。\n扁平化后的链表如下图：\n<img src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten12.jpg\" style=\"height:69px; width:1000px\" />\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/11/09/flatten2.1jpg\" style=\"height:200px; width:200px\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,2,null,3]\n<strong>输出：</strong>[1,3,2]\n<strong>解释：</strong>输入的多级列表如上图所示。\n扁平化后的链表如下图：\n<img src=\"https://assets.leetcode.com/uploads/2021/11/24/list.jpg\" style=\"height:87px; width:300px\" />\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>head = []\n<strong>输出：</strong>[]\n<strong>说明：</strong>输入中可能存在空列表。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>节点数目不超过 <code>1000</code></li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>如何表示测试用例中的多级链表？</strong></p>\n\n<p>以 <strong>示例 1</strong> 为例：</p>\n\n<pre>\n 1---2---3---4---5---6--NULL\n         |\n         7---8---9---10--NULL\n             |\n             11--12--NULL</pre>\n\n<p>序列化其中的每一级之后：</p>\n\n<pre>\n[1,2,3,4,5,6,null]\n[7,8,9,10,null]\n[11,12,null]\n</pre>\n\n<p>为了将每一级都序列化到一起，我们需要每一级中添加值为 null 的元素，以表示没有节点连接到上一级的上级节点。</p>\n\n<pre>\n[1,2,3,4,5,6,null]\n[null,null,7,8,9,10,null]\n[null,11,12,null]\n</pre>\n\n<p>合并所有序列化结果，并去除末尾的 null 。</p>\n\n<pre>\n[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n</pre>\n\n<ul>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 431.将 N 叉树编码为二叉树",
        "hardRate": "HARD",
        "passRate": "75.18%",
        "problemsUrl": "https://leetcode.cn/problems/encode-n-ary-tree-to-binary-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/encode-n-ary-tree-to-binary-tree/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 432.全 O(1) 的数据结构",
        "hardRate": "HARD",
        "passRate": "46.86%",
        "problemsUrl": "https://leetcode.cn/problems/all-oone-data-structure/",
        "solutionsUrl": "https://leetcode.cn/problems/all-oone-data-structure/solution",
        "problemsDesc": "<p>请你设计一个用于存储字符串计数的数据结构，并能够返回计数最小和最大的字符串。</p>\n\n<p>实现 <code>AllOne</code> 类：</p>\n\n<ul>\n\t<li><code>AllOne()</code> 初始化数据结构的对象。</li>\n\t<li><code>inc(String key)</code> 字符串 <code>key</code> 的计数增加 <code>1</code> 。如果数据结构中尚不存在 <code>key</code> ，那么插入计数为 <code>1</code> 的 <code>key</code> 。</li>\n\t<li><code>dec(String key)</code> 字符串 <code>key</code> 的计数减少 <code>1</code> 。如果 <code>key</code> 的计数在减少后为 <code>0</code> ，那么需要将这个 <code>key</code> 从数据结构中删除。测试用例保证：在减少计数前，<code>key</code> 存在于数据结构中。</li>\n\t<li><code>getMaxKey()</code> 返回任意一个计数最大的字符串。如果没有元素存在，返回一个空字符串 <code>\"\"</code> 。</li>\n\t<li><code>getMinKey()</code> 返回任意一个计数最小的字符串。如果没有元素存在，返回一个空字符串 <code>\"\"</code> 。</li>\n</ul>\n\n<p><strong>注意：</strong>每个函数都应当满足 <code>O(1)</code> 平均时间复杂度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n[[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n<strong>输出</strong>\n[null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n\n<strong>解释</strong>\nAllOne allOne = new AllOne();\nallOne.inc(\"hello\");\nallOne.inc(\"hello\");\nallOne.getMaxKey(); // 返回 \"hello\"\nallOne.getMinKey(); // 返回 \"hello\"\nallOne.inc(\"leet\");\nallOne.getMaxKey(); // 返回 \"hello\"\nallOne.getMinKey(); // 返回 \"leet\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= key.length &lt;= 10</code></li>\n\t<li><code>key</code> 由小写英文字母组成</li>\n\t<li>测试用例保证：在每次调用 <code>dec</code> 时，数据结构中总存在 <code>key</code></li>\n\t<li>最多调用 <code>inc</code>、<code>dec</code>、<code>getMaxKey</code> 和 <code>getMinKey</code> 方法 <code>5 * 10<sup>4</sup></code> 次</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 433.最小基因变化",
        "hardRate": "MEDIUM",
        "passRate": "54.80%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-genetic-mutation/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-genetic-mutation/solution",
        "problemsDesc": "<p>基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是 <code>'A'</code>、<code>'C'</code>、<code>'G'</code> 和 <code>'T'</code> 之一。</p>\n\n<p>假设我们需要调查从基因序列&nbsp;<code>start</code> 变为 <code>end</code> 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。</p>\n\n<ul>\n\t<li>例如，<code>\"AACCGGTT\" --&gt; \"AACCGGTA\"</code> 就是一次基因变化。</li>\n</ul>\n\n<p>另有一个基因库 <code>bank</code> 记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。（变化后的基因必须位于基因库 <code>bank</code> 中）</p>\n\n<p>给你两个基因序列 <code>start</code> 和 <code>end</code> ，以及一个基因库 <code>bank</code> ，请你找出并返回能够使&nbsp;<code>start</code> 变化为 <code>end</code> 所需的最少变化次数。如果无法完成此基因变化，返回 <code>-1</code> 。</p>\n\n<p>注意：起始基因序列&nbsp;<code>start</code> 默认是有效的，但是它并不一定会出现在基因库中。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\n<strong>输出：</strong>1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]\n<strong>输出：</strong>3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>start.length == 8</code></li>\n\t<li><code>end.length == 8</code></li>\n\t<li><code>0 &lt;= bank.length &lt;= 10</code></li>\n\t<li><code>bank[i].length == 8</code></li>\n\t<li><code>start</code>、<code>end</code> 和 <code>bank[i]</code> 仅由字符 <code>['A', 'C', 'G', 'T']</code> 组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 434.字符串中的单词数",
        "hardRate": "EASY",
        "passRate": "38.61%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-segments-in-a-string/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-segments-in-a-string/solution",
        "problemsDesc": "<p>统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。</p>\n\n<p>请注意，你可以假定字符串里不包括任何不可打印的字符。</p>\n\n<p><strong>示例:</strong></p>\n\n<pre><strong>输入:</strong> &quot;Hello, my name is John&quot;\n<strong>输出:</strong> 5\n<strong>解释: </strong>这里的单词是指连续的不是空格的字符，所以 &quot;Hello,&quot; 算作 1 个单词。\n</pre>\n",
        "isPlus": false
    },
    {
        "problemsName": " 435.无重叠区间",
        "hardRate": "MEDIUM",
        "passRate": "51.16%",
        "problemsUrl": "https://leetcode.cn/problems/non-overlapping-intervals/",
        "solutionsUrl": "https://leetcode.cn/problems/non-overlapping-intervals/solution",
        "problemsDesc": "<p>给定一个区间的集合&nbsp;<code>intervals</code>&nbsp;，其中 <code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;。返回 <em>需要移除区间的最小数量，使剩余区间互不重叠&nbsp;</em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]\n<strong>输出:</strong> 1\n<strong>解释:</strong> 移除 [1,3] 后，剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> intervals = [ [1,2], [1,2], [1,2] ]\n<strong>输出:</strong> 2\n<strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> intervals = [ [1,2], [2,3] ]\n<strong>输出:</strong> 0\n<strong>解释:</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-5 * 10<sup>4</sup>&nbsp;&lt;= start<sub>i</sub>&nbsp;&lt; end<sub>i</sub>&nbsp;&lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 436.寻找右区间",
        "hardRate": "MEDIUM",
        "passRate": "56.80%",
        "problemsUrl": "https://leetcode.cn/problems/find-right-interval/",
        "solutionsUrl": "https://leetcode.cn/problems/find-right-interval/solution",
        "problemsDesc": "<p>给你一个区间数组 <code>intervals</code> ，其中&nbsp;<code>intervals[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> ，且每个&nbsp;<code>start<sub>i</sub></code> 都 <strong>不同</strong> 。</p>\n\n<p>区间 <code>i</code> 的 <strong>右侧区间</strong> 可以记作区间 <code>j</code> ，并满足 <code>start<sub>j</sub></code><code>&nbsp;&gt;= end<sub>i</sub></code> ，且 <code>start<sub>j</sub></code> <strong>最小化 </strong>。注意 <code>i</code> 可能等于 <code>j</code> 。</p>\n\n<p>返回一个由每个区间 <code>i</code> 的 <strong>右侧区间</strong> 在&nbsp;<code>intervals</code> 中对应下标组成的数组。如果某个区间 <code>i</code> 不存在对应的 <strong>右侧区间</strong> ，则下标 <code>i</code> 处的值设为 <code>-1</code> 。</p>\n&nbsp;\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>intervals = [[1,2]]\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>集合中只有一个区间，所以输出-1。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>intervals = [[3,4],[2,3],[1,2]]\n<strong>输出：</strong>[-1,0,1]\n<strong>解释：</strong>对于 [3,4] ，没有满足条件的“右侧”区间。\n对于 [2,3] ，区间[3,4]具有最小的“右”起点;\n对于 [1,2] ，区间[2,3]具有最小的“右”起点。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>intervals = [[1,4],[2,3],[3,4]]\n<strong>输出：</strong>[-1,2,-1]\n<strong>解释：</strong>对于区间 [1,4] 和 [3,4] ，没有满足条件的“右侧”区间。\n对于 [2,3] ，区间 [3,4] 有最小的“右”起点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;intervals.length &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>-10<sup>6</sup> &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n\t<li>每个间隔的起点都 <strong>不相同</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 437.路径总和 III",
        "hardRate": "MEDIUM",
        "passRate": "50.04%",
        "problemsUrl": "https://leetcode.cn/problems/path-sum-iii/",
        "solutionsUrl": "https://leetcode.cn/problems/path-sum-iii/solution",
        "problemsDesc": "<p>给定一个二叉树的根节点 <code>root</code> ，和一个整数 <code>targetSum</code> ，求该二叉树里节点值之和等于 <code>targetSum</code> 的 <strong>路径</strong> 的数目。</p>\n\n<p><strong>路径</strong> 不需要从根节点开始，也不需要在叶子节点结束，但是路径方向必须是向下的（只能从父节点到子节点）。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg\" style=\"width: 452px; \" /></p>\n\n<pre>\n<strong>输入：</strong>root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n<strong>输出：</strong>3\n<strong>解释：</strong>和等于 8 的路径有 3 条，如图所示。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n<strong>输出：</strong>3\n</pre>\n\n<p> </p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>二叉树的节点个数的范围是 <code>[0,1000]</code></li>\n\t<li><meta charset=\"UTF-8\" /><code>-10<sup>9</sup> <= Node.val <= 10<sup>9</sup></code> </li>\n\t<li><code>-1000 <= targetSum <= 1000</code> </li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 438.找到字符串中所有字母异位词",
        "hardRate": "MEDIUM",
        "passRate": "54.66%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-anagrams-in-a-string/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-anagrams-in-a-string/solution",
        "problemsDesc": "<p>给定两个字符串&nbsp;<code>s</code>&nbsp;和 <code>p</code>，找到&nbsp;<code>s</code><strong>&nbsp;</strong>中所有&nbsp;<code>p</code><strong>&nbsp;</strong>的&nbsp;<strong>异位词&nbsp;</strong>的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p>\n\n<p><strong>异位词 </strong>指由相同字母重排列形成的字符串（包括相同的字符串）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入: </strong>s = \"cbaebabacd\", p = \"abc\"\n<strong>输出: </strong>[0,6]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n</pre>\n\n<p><strong>&nbsp;示例 2:</strong></p>\n\n<pre>\n<strong>输入: </strong>s = \"abab\", p = \"ab\"\n<strong>输出: </strong>[0,1,2]\n<strong>解释:</strong>\n起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length, p.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>s</code>&nbsp;和&nbsp;<code>p</code>&nbsp;仅包含小写字母</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 439.三元表达式解析器",
        "hardRate": "MEDIUM",
        "passRate": "61.01%",
        "problemsUrl": "https://leetcode.cn/problems/ternary-expression-parser/",
        "solutionsUrl": "https://leetcode.cn/problems/ternary-expression-parser/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 440.字典序的第K小数字",
        "hardRate": "HARD",
        "passRate": "42.57%",
        "problemsUrl": "https://leetcode.cn/problems/k-th-smallest-in-lexicographical-order/",
        "solutionsUrl": "https://leetcode.cn/problems/k-th-smallest-in-lexicographical-order/solution",
        "problemsDesc": "<p>给定整数&nbsp;<code>n</code>&nbsp;和&nbsp;<code>k</code>，返回&nbsp;&nbsp;<code>[1, n]</code>&nbsp;中字典序第&nbsp;<code>k</code>&nbsp;小的数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>n = 13, k = 2\n<strong>输出: </strong>10\n<strong>解释: </strong>字典序的排列是 [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]，所以第二小的数字是 10。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> n = 1, k = 1\n<strong>输出:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 441.排列硬币",
        "hardRate": "EASY",
        "passRate": "45.23%",
        "problemsUrl": "https://leetcode.cn/problems/arranging-coins/",
        "solutionsUrl": "https://leetcode.cn/problems/arranging-coins/solution",
        "problemsDesc": "<p>你总共有&nbsp;<code>n</code><em>&nbsp;</em>枚硬币，并计划将它们按阶梯状排列。对于一个由 <code>k</code> 行组成的阶梯，其第 <code>i</code><em> </em>行必须正好有 <code>i</code><em> </em>枚硬币。阶梯的最后一行 <strong>可能</strong> 是不完整的。</p>\n\n<p>给你一个数字&nbsp;<code>n</code><em> </em>，计算并返回可形成 <strong>完整阶梯行</strong> 的总行数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>输入：</strong>n = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>因为第三行不完整，所以返回 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>输入：</strong>n = 8\n<strong>输出：</strong>3\n<strong>解释：</strong>因为第四行不完整，所以返回 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 442.数组中重复的数据",
        "hardRate": "MEDIUM",
        "passRate": "75.09%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-duplicates-in-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-duplicates-in-an-array/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> ，其中 <code>nums</code> 的所有整数都在范围 <code>[1, n]</code> 内，且每个整数出现 <strong>一次</strong> 或 <strong>两次</strong> 。请你找出所有出现 <strong>两次</strong> 的整数，并以数组形式返回。</p>\n\n<p>你必须设计并实现一个时间复杂度为 <code>O(n)</code> 且仅使用常量额外空间的算法解决此问题。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,3,2,7,8,2,3,1]\n<strong>输出：</strong>[2,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1,2]\n<strong>输出：</strong>[1]\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1]\n<strong>输出：</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= n</code></li>\n\t<li><code>nums</code> 中的每个元素出现 <strong>一次</strong> 或 <strong>两次</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 443.压缩字符串",
        "hardRate": "MEDIUM",
        "passRate": "47.85%",
        "problemsUrl": "https://leetcode.cn/problems/string-compression/",
        "solutionsUrl": "https://leetcode.cn/problems/string-compression/solution",
        "problemsDesc": "<p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p>\n\n<p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组 <strong>连续重复字符</strong> ：</p>\n\n<ul>\n\t<li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code> 中。</li>\n\t<li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li>\n</ul>\n\n<p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong> ，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为 <code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code> 数组中会被拆分为多个字符。</p>\n\n<p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p>\n\n<p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n<strong>输出：</strong>返回 6 ，输入数组的前 6 个字符应该是：[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n<strong>解释：</strong>\"aa\" 被 \"a2\" 替代。\"bb\" 被 \"b2\" 替代。\"ccc\" 被 \"c3\" 替代。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>chars = [\"a\"]\n<strong>输出：</strong>返回 1 ，输入数组的前 1 个字符应该是：[\"a\"]\n<strong>解释：</strong>唯一的组是“a”，它保持未压缩，因为它是一个字符。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n<strong>输出：</strong>返回 4 ，输入数组的前 4 个字符应该是：[\"a\",\"b\",\"1\",\"2\"]。\n<strong>解释：</strong>由于字符 \"a\" 不重复，所以不会被压缩。\"bbbbbbbbbbbb\" 被 “b12” 替代。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= chars.length &lt;= 2000</code></li>\n\t<li><code>chars[i]</code> 可以是小写英文字母、大写英文字母、数字或符号</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 444.序列重建",
        "hardRate": "MEDIUM",
        "passRate": "31.48%",
        "problemsUrl": "https://leetcode.cn/problems/sequence-reconstruction/",
        "solutionsUrl": "https://leetcode.cn/problems/sequence-reconstruction/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 445.两数相加 II",
        "hardRate": "MEDIUM",
        "passRate": "61.06%",
        "problemsUrl": "https://leetcode.cn/problems/add-two-numbers-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/add-two-numbers-ii/solution",
        "problemsDesc": "<p>给你两个 <strong>非空 </strong>链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p>\n\n<p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例1：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode-cn.com/1626420025-fZfzMX-image.png\" style=\"width: 302px; \" /></p>\n\n<pre>\n<strong>输入：</strong>l1 = [7,2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[7,8,0,7]\n</pre>\n\n<p><strong>示例2：</strong></p>\n\n<pre>\n<strong>输入：</strong>l1 = [2,4,3], l2 = [5,6,4]\n<strong>输出：</strong>[8,0,7]\n</pre>\n\n<p><strong>示例3：</strong></p>\n\n<pre>\n<strong>输入：</strong>l1 = [0], l2 = [0]\n<strong>输出：</strong>[0]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>链表的长度范围为<code> [1, 100]</code></li>\n\t<li><code>0 &lt;= node.val &lt;= 9</code></li>\n\t<li>输入数据保证链表代表的数字无前导 0</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>如果输入链表不能翻转该如何解决？</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 446.等差数列划分 II - 子序列",
        "hardRate": "HARD",
        "passRate": "54.69%",
        "problemsUrl": "https://leetcode.cn/problems/arithmetic-slices-ii-subsequence/",
        "solutionsUrl": "https://leetcode.cn/problems/arithmetic-slices-ii-subsequence/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中所有 <strong>等差子序列</strong> 的数目。</p>\n\n<p>如果一个序列中 <strong>至少有三个元素</strong> ，并且任意两个相邻元素之差相同，则称该序列为等差序列。</p>\n\n<ul>\n\t<li>例如，<code>[1, 3, 5, 7, 9]</code>、<code>[7, 7, 7, 7]</code> 和 <code>[3, -1, -5, -9]</code> 都是等差序列。</li>\n\t<li>再例如，<code>[1, 1, 2, 5, 7]</code> 不是等差序列。</li>\n</ul>\n\n<p>数组中的子序列是从数组中删除一些元素（也可能不删除）得到的一个序列。</p>\n\n<ul>\n\t<li>例如，<code>[2,5,10]</code> 是 <code>[1,2,1,<em><strong>2</strong></em>,4,1,<strong><em>5</em></strong>,<em><strong>10</strong></em>]</code> 的一个子序列。</li>\n</ul>\n\n<p>题目数据保证答案是一个 <strong>32-bit</strong> 整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,4,6,8,10]\n<strong>输出：</strong>7\n<strong>解释：</strong>所有的等差子序列为：\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [7,7,7,7,7]\n<strong>输出：</strong>16\n<strong>解释：</strong>数组中的任意子序列都是等差子序列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1&nbsp; &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= nums[i] &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 447.回旋镖的数量",
        "hardRate": "MEDIUM",
        "passRate": "66.74%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-boomerangs/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-boomerangs/solution",
        "problemsDesc": "<p>给定平面上<em>&nbsp;</em><code>n</code><em> </em>对 <strong>互不相同</strong> 的点&nbsp;<code>points</code> ，其中 <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 。<strong>回旋镖</strong> 是由点&nbsp;<code>(i, j, k)</code> 表示的元组 ，其中&nbsp;<code>i</code>&nbsp;和&nbsp;<code>j</code>&nbsp;之间的距离和&nbsp;<code>i</code>&nbsp;和&nbsp;<code>k</code>&nbsp;之间的欧式距离相等（<strong>需要考虑元组的顺序</strong>）。</p>\n\n<p>返回平面上所有回旋镖的数量。</p>\n&nbsp;\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>points = [[0,0],[1,0],[2,0]]\n<strong>输出：</strong>2\n<strong>解释：</strong>两个回旋镖为 <strong>[[1,0],[0,0],[2,0]]</strong> 和 <strong>[[1,0],[2,0],[0,0]]</strong>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>points = [[1,1],[2,2],[3,3]]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>points = [[1,1]]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n ==&nbsp;points.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 500</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>\n\t<li>所有点都 <strong>互不相同</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 448.找到所有数组中消失的数字",
        "hardRate": "EASY",
        "passRate": "65.89%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-numbers-disappeared-in-an-array/solution",
        "problemsDesc": "<p>给你一个含 <code>n</code> 个整数的数组 <code>nums</code> ，其中 <code>nums[i]</code> 在区间 <code>[1, n]</code> 内。请你找出所有在 <code>[1, n]</code> 范围内但没有出现在 <code>nums</code> 中的数字，并以数组的形式返回结果。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,3,2,7,8,2,3,1]\n<strong>输出：</strong>[5,6]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1]\n<strong>输出：</strong>[2]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 <= n <= 10<sup>5</sup></code></li>\n\t<li><code>1 <= nums[i] <= n</code></li>\n</ul>\n\n<p><strong>进阶：</strong>你能在不使用额外空间且时间复杂度为<em> </em><code>O(n)</code><em> </em>的情况下解决这个问题吗? 你可以假定返回的数组不算在额外空间内。</p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 449.序列化和反序列化二叉搜索树",
        "hardRate": "MEDIUM",
        "passRate": "60.50%",
        "problemsUrl": "https://leetcode.cn/problems/serialize-and-deserialize-bst/",
        "solutionsUrl": "https://leetcode.cn/problems/serialize-and-deserialize-bst/solution",
        "problemsDesc": "<p>序列化是将数据结构或对象转换为一系列位的过程，以便它可以存储在文件或内存缓冲区中，或通过网络连接链路传输，以便稍后在同一个或另一个计算机环境中重建。</p>\n\n<p>设计一个算法来序列化和反序列化<strong> 二叉搜索树</strong> 。 对序列化/反序列化算法的工作方式没有限制。 您只需确保二叉搜索树可以序列化为字符串，并且可以将该字符串反序列化为最初的二叉搜索树。</p>\n\n<p><strong>编码的字符串应尽可能紧凑。</strong></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [2,1,3]\n<strong>输出：</strong>[2,1,3]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = []\n<strong>输出：</strong>[]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点数范围是 <code>[0, 10<sup>4</sup>]</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>4</sup></code></li>\n\t<li>题目数据 <strong>保证</strong> 输入的树是一棵二叉搜索树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 450.删除二叉搜索树中的节点",
        "hardRate": "MEDIUM",
        "passRate": "52.35%",
        "problemsUrl": "https://leetcode.cn/problems/delete-node-in-a-bst/",
        "solutionsUrl": "https://leetcode.cn/problems/delete-node-in-a-bst/solution",
        "problemsDesc": "<p>给定一个二叉搜索树的根节点 <strong>root </strong>和一个值 <strong>key</strong>，删除二叉搜索树中的&nbsp;<strong>key&nbsp;</strong>对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p>\n\n<p>一般来说，删除节点可分为两个步骤：</p>\n\n<ol>\n\t<li>首先找到需要删除的节点；</li>\n\t<li>如果找到了，删除它。</li>\n</ol>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg\" style=\"width: 800px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [5,3,6,2,4,null,7], key = 3\n<strong>输出：</strong>[5,4,6,2,null,null,7]\n<strong>解释：</strong>给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n另一个正确答案是 [5,2,6,null,4,null,7]。\n\n<img src=\"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg\" style=\"width: 350px;\" />\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> root = [5,3,6,2,4,null,7], key = 0\n<strong>输出:</strong> [5,3,6,2,4,null,7]\n<strong>解释:</strong> 二叉树不包含值为 0 的节点\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> root = [], key = 0\n<strong>输出:</strong> []</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li>节点数的范围&nbsp;<code>[0, 10<sup>4</sup>]</code>.</li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>节点值唯一</li>\n\t<li><code>root</code>&nbsp;是合法的二叉搜索树</li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= key &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong> 要求算法时间复杂度为&nbsp;O(h)，h 为树的高度。</p>\n",
        "isPlus": false
    }
]