[
    {
        "problemsName": " 1951.查询具有最多共同关注者的所有两两结对组",
        "hardRate": "MEDIUM",
        "passRate": "65.27%",
        "problemsUrl": "https://leetcode.cn/problems/all-the-pairs-with-the-maximum-number-of-common-followers/",
        "solutionsUrl": "https://leetcode.cn/problems/all-the-pairs-with-the-maximum-number-of-common-followers/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1952.三除数",
        "hardRate": "EASY",
        "passRate": "54.81%",
        "problemsUrl": "https://leetcode.cn/problems/three-divisors/",
        "solutionsUrl": "https://leetcode.cn/problems/three-divisors/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> 。如果 <code>n</code> <strong>恰好有三个正除数</strong> ，返回 <code>true</code><em> </em>；否则，返回<em> </em><code>false</code> 。</p>\n\n<p>如果存在整数 <code>k</code> ，满足 <code>n = k * m</code> ，那么整数 <code>m</code> 就是 <code>n</code> 的一个 <strong>除数</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 2\n<strong>输出：</strong>false\n<strong>解释：</strong>2 只有两个除数：1 和 2 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 4\n<strong>输出：</strong>true\n<strong>解释：</strong>4 有三个除数：1、2 和 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1953.你可以工作的最大周数",
        "hardRate": "MEDIUM",
        "passRate": "37.22%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-weeks-for-which-you-can-work/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-weeks-for-which-you-can-work/solution",
        "problemsDesc": "<p>给你&nbsp;<code>n</code> 个项目，编号从 <code>0</code> 到 <code>n - 1</code> 。同时给你一个整数数组 <code>milestones</code> ，其中每个 <code>milestones[i]</code> 表示第 <code>i</code> 个项目中的阶段任务数量。</p>\n\n<p>你可以按下面两个规则参与项目中的工作：</p>\n\n<ul>\n\t<li>每周，你将会完成 <strong>某一个</strong> 项目中的 <strong>恰好一个</strong>&nbsp;阶段任务。你每周都 <strong>必须</strong> 工作。</li>\n\t<li>在 <strong>连续的</strong> 两周中，你 <strong>不能</strong> 参与并完成同一个项目中的两个阶段任务。</li>\n</ul>\n\n<p>一旦所有项目中的全部阶段任务都完成，或者仅剩余一个阶段任务都会导致你违反上面的规则，那么你将&nbsp;<strong>停止工作</strong> 。注意，由于这些条件的限制，你可能无法完成所有阶段任务。</p>\n\n<p>返回在不违反上面规则的情况下你&nbsp;<strong>最多</strong>&nbsp;能工作多少周。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>milestones = [1,2,3]\n<strong>输出：</strong>6\n<strong>解释：</strong>一种可能的情形是：\n​​​​- 第 1 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 2 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 3 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 4 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 5 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 6 周，你参与并完成项目 2 中的一个阶段任务。\n总周数是 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>milestones = [5,2,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>一种可能的情形是：\n- 第 1 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 2 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 3 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 4 周，你参与并完成项目 1 中的一个阶段任务。\n- 第 5 周，你参与并完成项目 0 中的一个阶段任务。\n- 第 6 周，你参与并完成项目 2 中的一个阶段任务。\n- 第 7 周，你参与并完成项目 0 中的一个阶段任务。\n总周数是 7 。\n注意，你不能在第 8 周参与完成项目 0 中的最后一个阶段任务，因为这会违反规则。\n因此，项目 0 中会有一个阶段任务维持未完成状态。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == milestones.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= milestones[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1954.收集足够苹果的最小花园周长",
        "hardRate": "MEDIUM",
        "passRate": "49.77%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-garden-perimeter-to-collect-enough-apples/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-garden-perimeter-to-collect-enough-apples/solution",
        "problemsDesc": "<p>给你一个用无限二维网格表示的花园，<strong>每一个</strong>&nbsp;整数坐标处都有一棵苹果树。整数坐标&nbsp;<code>(i, j)</code>&nbsp;处的苹果树有 <code>|i| + |j|</code>&nbsp;个苹果。</p>\n\n<p>你将会买下正中心坐标是 <code>(0, 0)</code>&nbsp;的一块 <strong>正方形土地</strong>&nbsp;，且每条边都与两条坐标轴之一平行。</p>\n\n<p>给你一个整数&nbsp;<code>neededApples</code>&nbsp;，请你返回土地的&nbsp;<strong>最小周长</strong>&nbsp;，使得&nbsp;<strong>至少</strong>&nbsp;有<strong>&nbsp;</strong><code>neededApples</code>&nbsp;个苹果在土地&nbsp;<strong>里面或者边缘上</strong>。</p>\n\n<p><code>|x|</code>&nbsp;的值定义为：</p>\n\n<ul>\n\t<li>如果&nbsp;<code>x &gt;= 0</code>&nbsp;，那么值为&nbsp;<code>x</code></li>\n\t<li>如果&nbsp;<code>x &lt;&nbsp;0</code>&nbsp;，那么值为&nbsp;<code>-x</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://pic.leetcode-cn.com/1627790803-qcBKFw-image.png\" style=\"width: 442px; height: 449px;\" />\n<pre>\n<b>输入：</b>neededApples = 1\n<b>输出：</b>8\n<b>解释：</b>边长长度为 1 的正方形不包含任何苹果。\n但是边长为 2 的正方形包含 12 个苹果（如上图所示）。\n周长为 2 * 4 = 8 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>neededApples = 13\n<b>输出：</b>16\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>neededApples = 1000000000\n<b>输出：</b>5040\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= neededApples &lt;= 10<sup>15</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1955.统计特殊子序列的数目",
        "hardRate": "HARD",
        "passRate": "52.55%",
        "problemsUrl": "https://leetcode.cn/problems/count-number-of-special-subsequences/",
        "solutionsUrl": "https://leetcode.cn/problems/count-number-of-special-subsequences/solution",
        "problemsDesc": "<p><strong>特殊序列</strong> 是由&nbsp;<strong>正整数</strong>&nbsp;个 <code>0</code>&nbsp;，紧接着&nbsp;<strong>正整数</strong>&nbsp;个 <code>1</code>&nbsp;，最后 <strong>正整数</strong>&nbsp;个 <code>2</code>&nbsp;组成的序列。</p>\n\n<ul>\n\t<li>比方说，<code>[0,1,2]</code> 和&nbsp;<code>[0,0,1,1,1,2]</code>&nbsp;是特殊序列。</li>\n\t<li>相反，<code>[2,1,0]</code>&nbsp;，<code>[1]</code>&nbsp;和&nbsp;<code>[0,1,2,0]</code>&nbsp;就不是特殊序列。</li>\n</ul>\n\n<p>给你一个数组&nbsp;<code>nums</code>&nbsp;（<strong>仅</strong>&nbsp;包含整数&nbsp;<code>0</code>，<code>1</code>&nbsp;和&nbsp;<code>2</code>），请你返回 <b>不同特殊子序列的数目</b>&nbsp;。由于答案可能很大，请你将它对&nbsp;<code>10<sup>9</sup> + 7</code> <strong>取余</strong> 后返回。</p>\n\n<p>一个数组的 <strong>子序列</strong>&nbsp;是从原数组中删除零个或者若干个元素后，剩下元素不改变顺序得到的序列。如果两个子序列的 <strong>下标集合</strong>&nbsp;不同，那么这两个子序列是 <strong>不同的</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [0,1,2,2]\n<b>输出：</b>3\n<b>解释：</b>特殊子序列为 [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,2]，[<strong>0</strong>,<strong>1</strong>,2,<strong>2</strong>] 和 [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,<strong>2</strong>] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,2,0,0]\n<b>输出：</b>0\n<b>解释：</b>数组 [2,2,0,0] 中没有特殊子序列。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [0,1,2,0,1,2]\n<b>输出：</b>7\n<b>解释：</b>特殊子序列包括：\n- [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,0,1,2]\n- [<strong>0</strong>,<strong>1</strong>,2,0,1,<strong>2</strong>]\n- [<strong>0</strong>,<strong>1</strong>,<strong>2</strong>,0,1,<strong>2</strong>]\n- [<strong>0</strong>,<strong>1</strong>,2,0,<strong>1</strong>,<strong>2</strong>]\n- [<strong>0</strong>,1,2,<strong>0</strong>,<strong>1</strong>,<strong>2</strong>]\n- [<strong>0</strong>,1,2,0,<strong>1</strong>,<strong>2</strong>]\n- [0,1,2,<strong>0</strong>,<strong>1</strong>,<strong>2</strong>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 2</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1956.感染 K 种病毒所需的最短时间",
        "hardRate": "HARD",
        "passRate": "36.41%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-time-for-k-virus-variants-to-spread/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-time-for-k-virus-variants-to-spread/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1957.删除字符使字符串变好",
        "hardRate": "EASY",
        "passRate": "60.09%",
        "problemsUrl": "https://leetcode.cn/problems/delete-characters-to-make-fancy-string/",
        "solutionsUrl": "https://leetcode.cn/problems/delete-characters-to-make-fancy-string/solution",
        "problemsDesc": "<p>一个字符串如果没有 <strong>三个连续</strong>&nbsp;相同字符，那么它就是一个 <strong>好字符串</strong>&nbsp;。</p>\n\n<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你从 <code>s</code>&nbsp;删除&nbsp;<strong>最少</strong>&nbsp;的字符，使它变成一个 <strong>好字符串</strong> 。</p>\n\n<p>请你返回删除后的字符串。题目数据保证答案总是 <strong>唯一的 </strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"le<strong>e</strong>etcode\"\n<b>输出：</b>\"leetcode\"\n<strong>解释：</strong>\n从第一组 'e' 里面删除一个 'e' ，得到 \"leetcode\" 。\n没有连续三个相同字符，所以返回 \"leetcode\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"<strong>a</strong>aab<strong>aa</strong>aa\"\n<b>输出：</b>\"aabaa\"\n<strong>解释：</strong>\n从第一组 'a' 里面删除一个 'a' ，得到 \"aabaaaa\" 。\n从第二组 'a' 里面删除两个 'a' ，得到 \"aabaa\" 。\n没有连续三个相同字符，所以返回 \"aabaa\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"aab\"\n<b>输出：</b>\"aab\"\n<b>解释：</b>没有连续三个相同字符，所以返回 \"aab\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1958.检查操作是否合法",
        "hardRate": "MEDIUM",
        "passRate": "44.80%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-move-is-legal/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-move-is-legal/solution",
        "problemsDesc": "<p>给你一个下标从&nbsp;<strong>0</strong>&nbsp;开始的&nbsp;<code>8 x 8</code> 网格&nbsp;<code>board</code>&nbsp;，其中&nbsp;<code>board[r][c]</code>&nbsp;表示游戏棋盘上的格子&nbsp;<code>(r, c)</code>&nbsp;。棋盘上空格用&nbsp;<code>'.'</code>&nbsp;表示，白色格子用&nbsp;<code>'W'</code>&nbsp;表示，黑色格子用&nbsp;<code>'B'</code>&nbsp;表示。</p>\n\n<p>游戏中每次操作步骤为：选择一个空格子，将它变成你正在执行的颜色（要么白色，要么黑色）。但是，<strong>合法 </strong>操作必须满足：涂色后这个格子是 <strong>好线段的一个端点</strong>&nbsp;（好线段可以是水平的，竖直的或者是对角线）。</p>\n\n<p><strong>好线段</strong>&nbsp;指的是一个包含 <strong>三个或者更多格子（包含端点格子）</strong>的线段，线段两个端点格子为 <strong>同一种颜色</strong>&nbsp;，且中间剩余格子的颜色都为 <strong>另一种颜色</strong>&nbsp;（线段上不能有任何空格子）。你可以在下图找到好线段的例子：</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/22/goodlines5.png\" style=\"width: 500px; height: 312px;\" />\n<p>给你两个整数&nbsp;<code>rMove</code> 和&nbsp;<code>cMove</code>&nbsp;以及一个字符&nbsp;<code>color</code>&nbsp;，表示你正在执行操作的颜色（白或者黑），如果将格子&nbsp;<code>(rMove, cMove)</code>&nbsp;变成颜色&nbsp;<code>color</code>&nbsp;后，是一个&nbsp;<strong>合法</strong>&nbsp;操作，那么返回&nbsp;<code>true</code>&nbsp;，如果不是合法操作返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid11.png\" style=\"width: 350px; height: 350px;\" /></p>\n\n<pre>\n<b>输入：</b>board = [[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"],[\"W\",\"B\",\"B\",\".\",\"W\",\"W\",\"W\",\"B\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\".\",\".\",\".\",\".\"]], rMove = 4, cMove = 3, color = \"B\"\n<b>输出：</b>true\n<b>解释：</b>'.'，'W' 和 'B' 分别用颜色蓝色，白色和黑色表示。格子 (rMove, cMove) 用 'X' 标记。\n以选中格子为端点的两个好线段在上图中用红色矩形标注出来了。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/10/grid2.png\" style=\"width: 350px; height: 351px;\" /></p>\n\n<pre>\n<b>输入：</b>board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"B\",\".\",\".\",\"W\",\".\",\".\",\".\"],[\".\",\".\",\"W\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"W\",\"B\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\"B\",\"W\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\"W\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\"B\"]], rMove = 4, cMove = 4, color = \"W\"\n<b>输出：</b>false\n<b>解释：</b>虽然选中格子涂色后，棋盘上产生了好线段，但选中格子是作为中间格子，没有产生以选中格子为端点的好线段。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>board.length == board[r].length == 8</code></li>\n\t<li><code>0 &lt;= rMove, cMove &lt; 8</code></li>\n\t<li><code>board[rMove][cMove] == '.'</code></li>\n\t<li><code>color</code>&nbsp;要么是&nbsp;<code>'B'</code> 要么是&nbsp;<code>'W'</code>&nbsp;。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1959.K 次调整数组大小浪费的最小总空间",
        "hardRate": "MEDIUM",
        "passRate": "45.97%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-total-space-wasted-with-k-resizing-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-total-space-wasted-with-k-resizing-operations/solution",
        "problemsDesc": "<p>你正在设计一个动态数组。给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，其中&nbsp;<code>nums[i]</code>&nbsp;是&nbsp;<code>i</code>&nbsp;时刻数组中的元素数目。除此以外，你还有一个整数 <code>k</code>&nbsp;，表示你可以 <strong>调整</strong>&nbsp;数组大小的 <strong>最多</strong>&nbsp;次数（每次都可以调整成 <strong>任意</strong>&nbsp;大小）。</p>\n\n<p><code>t</code>&nbsp;时刻数组的大小&nbsp;<code>size<sub>t</sub></code>&nbsp;必须大于等于&nbsp;<code>nums[t]</code>&nbsp;，因为数组需要有足够的空间容纳所有元素。<code>t</code>&nbsp;时刻 <strong>浪费的空间</strong>&nbsp;为&nbsp;<code>size<sub>t</sub> - nums[t]</code>&nbsp;，<strong>总</strong>&nbsp;浪费空间为满足&nbsp;<code>0 &lt;= t &lt; nums.length</code>&nbsp;的每一个时刻&nbsp;<code>t</code>&nbsp;浪费的空间&nbsp;<strong>之和</strong>&nbsp;。</p>\n\n<p>在调整数组大小不超过 <code>k</code>&nbsp;次的前提下，请你返回 <strong>最小总浪费空间</strong>&nbsp;。</p>\n\n<p><strong>注意：</strong>数组最开始时可以为&nbsp;<strong>任意大小</strong>&nbsp;，且&nbsp;<strong>不计入</strong>&nbsp;调整大小的操作次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [10,20], k = 0\n<b>输出：</b>10\n<b>解释：</b>size = [20,20].\n我们可以让数组初始大小为 20 。\n总浪费空间为 (20 - 10) + (20 - 20) = 10 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [10,20,30], k = 1\n<b>输出：</b>10\n<b>解释：</b>size = [20,20,30].\n我们可以让数组初始大小为 20 ，然后时刻 2 调整大小为 30 。\n总浪费空间为 (20 - 10) + (20 - 20) + (30 - 30) = 10 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [10,20,15,30,20], k = 2\n<b>输出：</b>15\n<b>解释：</b>size = [10,20,20,30,30].\n我们可以让数组初始大小为 10 ，时刻 1 调整大小为 20 ，时刻 3 调整大小为 30 。\n总浪费空间为 (10 - 10) + (20 - 20) + (20 - 15) + (30 - 30) + (30 - 20) = 15 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>0 &lt;= k &lt;= nums.length - 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1960.两个回文子字符串长度的最大乘积",
        "hardRate": "HARD",
        "passRate": "32.36%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-substrings/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-substrings/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>s</code>&nbsp;，你需要找到两个 <strong>不重叠</strong><strong>的回文&nbsp;</strong>子字符串，它们的长度都必须为 <strong>奇数</strong>&nbsp;，使得它们长度的乘积最大。</p>\n\n<p>更正式地，你想要选择四个整数&nbsp;<code>i</code>&nbsp;，<code>j</code>&nbsp;，<code>k</code>&nbsp;，<code>l</code>&nbsp;，使得&nbsp;<code>0 &lt;= i &lt;= j &lt; k &lt;= l &lt; s.length</code>&nbsp;，且子字符串&nbsp;<code>s[i...j]</code> 和&nbsp;<code>s[k...l]</code>&nbsp;都是回文串且长度为奇数。<code>s[i...j]</code>&nbsp;表示下标从 <code>i</code>&nbsp;到 <code>j</code>&nbsp;且 <strong>包含</strong>&nbsp;两端下标的子字符串。</p>\n\n<p>请你返回两个不重叠回文子字符串长度的 <strong>最大</strong>&nbsp;乘积。</p>\n\n<p><strong>回文字符串</strong>&nbsp;指的是一个从前往后读和从后往前读一模一样的字符串。<strong>子字符串</strong>&nbsp;指的是一个字符串中一段连续字符。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"ababbb\"\n<b>输出：</b>9\n<b>解释：</b>子字符串 \"aba\" 和 \"bbb\" 为奇数长度的回文串。乘积为 3 * 3 = 9 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>s = \"zaaaxbbby\"\n<b>输出：</b>9\n<b>解释：</b>子字符串 \"aaa\" 和 \"bbb\" 为奇数长度的回文串。乘积为 3 * 3 = 9 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1961.检查字符串是否为数组前缀",
        "hardRate": "EASY",
        "passRate": "52.75%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-string-is-a-prefix-of-array/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-string-is-a-prefix-of-array/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> 和一个字符串数组 <code>words</code> ，请你判断 <code>s</code> 是否为 <code>words</code> 的 <strong>前缀字符串</strong> 。</p>\n\n<p>字符串 <code>s</code> 要成为 <code>words</code> 的 <strong>前缀字符串</strong> ，需要满足：<code>s</code> 可以由 <code>words</code> 中的前 <code>k</code>（<code>k</code> 为 <strong>正数</strong> ）个字符串按顺序相连得到，且 <code>k</code> 不超过 <code>words.length</code> 。</p>\n\n<p>如果 <code>s</code> 是 <code>words</code> 的 <strong>前缀字符串</strong> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"iloveleetcode\", words = [\"i\",\"love\",\"leetcode\",\"apples\"]\n<strong>输出：</strong>true\n<strong>解释：</strong>\ns 可以由 \"i\"、\"love\" 和 \"leetcode\" 相连得到。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"iloveleetcode\", words = [\"apples\",\"i\",\"love\",\"leetcode\"]\n<strong>输出：</strong>false\n<strong>解释：</strong>\n数组的前缀相连无法得到 s 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> 和 <code>s</code> 仅由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1962.移除石子使总数最小",
        "hardRate": "MEDIUM",
        "passRate": "46.67%",
        "problemsUrl": "https://leetcode.cn/problems/remove-stones-to-minimize-the-total/",
        "solutionsUrl": "https://leetcode.cn/problems/remove-stones-to-minimize-the-total/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>piles</code> ，数组 <strong>下标从 0 开始</strong> ，其中 <code>piles[i]</code> 表示第 <code>i</code> 堆石子中的石子数量。另给你一个整数 <code>k</code> ，请你执行下述操作 <strong>恰好</strong> <code>k</code> 次：</p>\n\n<ul>\n\t<li>选出任一石子堆 <code>piles[i]</code> ，并从中 <strong>移除</strong> <code>floor(piles[i] / 2)</code> 颗石子。</li>\n</ul>\n\n<p><strong>注意：</strong>你可以对 <strong>同一堆</strong> 石子多次执行此操作。</p>\n\n<p>返回执行 <code>k</code> 次操作后，剩下石子的 <strong>最小</strong> 总数。</p>\n\n<p><code>floor(x)</code> 为 <strong>小于</strong> 或 <strong>等于</strong> <code>x</code> 的 <strong>最大</strong> 整数。（即，对 <code>x</code> 向下取整）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>piles = [5,4,9], k = 2\n<strong>输出：</strong>12\n<strong>解释：</strong>可能的执行情景如下：\n- 对第 2 堆石子执行移除操作，石子分布情况变成 [5,4,<strong><em>5</em></strong>] 。\n- 对第 0 堆石子执行移除操作，石子分布情况变成 [<strong><em>3</em></strong>,4,5] 。\n剩下石子的总数为 12 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>piles = [4,3,6,7], k = 3\n<strong>输出：</strong>12\n<strong>解释：</strong>可能的执行情景如下：\n- 对第 2 堆石子执行移除操作，石子分布情况变成 [4,3,<strong><em>3</em></strong>,7] 。\n- 对第 3 堆石子执行移除操作，石子分布情况变成 [4,3,3,<strong><em>4</em></strong>] 。\n- 对第 0 堆石子执行移除操作，石子分布情况变成 [<strong><em>2</em></strong>,3,3,4] 。\n剩下石子的总数为 12 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= piles.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= piles[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1963.使字符串平衡的最小交换次数",
        "hardRate": "MEDIUM",
        "passRate": "64.59%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-swaps-to-make-the-string-balanced/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-swaps-to-make-the-string-balanced/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> ，<strong>下标从 0 开始</strong> ，且长度为偶数 <code>n</code> 。字符串 <strong>恰好</strong> 由 <code>n / 2</code> 个开括号 <code>'['</code> 和 <code>n / 2</code> 个闭括号 <code>']'</code> 组成。</p>\n\n<p>只有能满足下述所有条件的字符串才能称为 <strong>平衡字符串</strong> ：</p>\n\n<ul>\n\t<li>字符串是一个空字符串，或者</li>\n\t<li>字符串可以记作 <code>AB</code> ，其中 <code>A</code> 和 <code>B</code> 都是 <strong>平衡字符串</strong> ，或者</li>\n\t<li>字符串可以写成 <code>[C]</code> ，其中 <code>C</code> 是一个 <strong>平衡字符串</strong> 。</li>\n</ul>\n\n<p>你可以交换 <strong>任意</strong> 两个下标所对应的括号 <strong>任意</strong> 次数。</p>\n\n<p>返回使<em> </em><code>s</code> 变成 <strong>平衡字符串</strong> 所需要的 <strong>最小</strong> 交换次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"][][\"\n<strong>输出：</strong>1\n<strong>解释：</strong>交换下标 0 和下标 3 对应的括号，可以使字符串变成平衡字符串。\n最终字符串变成 \"[[]]\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"]]][[[\"\n<strong>输出：</strong>2\n<strong>解释：</strong>执行下述操作可以使字符串变成平衡字符串：\n- 交换下标 0 和下标 4 对应的括号，s = \"[]][][\" 。\n- 交换下标 1 和下标 5 对应的括号，s = \"[[][]]\" 。\n最终字符串变成 \"[[][]]\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"[]\"\n<strong>输出：</strong>0\n<strong>解释：</strong>这个字符串已经是平衡字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>6</sup></code></li>\n\t<li><code>n</code> 为偶数</li>\n\t<li><code>s[i]</code> 为<code>'['</code> 或 <code>']'</code></li>\n\t<li>开括号 <code>'['</code> 的数目为 <code>n / 2</code> ，闭括号 <code>']'</code> 的数目也是 <code>n / 2</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1964.找出到每个位置为止最长的有效障碍赛跑路线",
        "hardRate": "HARD",
        "passRate": "43.68%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-longest-valid-obstacle-course-at-each-position/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-longest-valid-obstacle-course-at-each-position/solution",
        "problemsDesc": "<p>你打算构建一些障碍赛跑路线。给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>obstacles</code> ，数组长度为 <code>n</code> ，其中 <code>obstacles[i]</code> 表示第 <code>i</code> 个障碍的高度。</p>\n\n<p>对于每个介于 <code>0</code> 和 <code>n - 1</code> 之间（包含 <code>0</code> 和 <code>n - 1</code>）的下标&nbsp; <code>i</code> ，在满足下述条件的前提下，请你找出&nbsp;<code>obstacles</code> 能构成的最长障碍路线的长度：</p>\n\n<ul>\n\t<li>你可以选择下标介于 <code>0</code> 到 <code>i</code> 之间（包含 <code>0</code> 和 <code>i</code>）的任意个障碍。</li>\n\t<li>在这条路线中，必须包含第 <code>i</code> 个障碍。</li>\n\t<li>你必须按障碍在&nbsp;<code>obstacles</code>&nbsp;中的<strong> </strong><strong>出现顺序</strong> 布置这些障碍。</li>\n\t<li>除第一个障碍外，路线中每个障碍的高度都必须和前一个障碍 <strong>相同</strong> 或者 <strong>更高</strong> 。</li>\n</ul>\n\n<p>返回长度为 <code>n</code> 的答案数组 <code>ans</code> ，其中 <code>ans[i]</code> 是上面所述的下标 <code>i</code> 对应的最长障碍赛跑路线的长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>obstacles = [1,2,3,2]\n<strong>输出：</strong>[1,2,3,3]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>1</strong></em>], [1] 长度为 1\n- i = 1: [<em><strong>1</strong></em>,<em><strong>2</strong></em>], [1,2] 长度为 2\n- i = 2: [<em><strong>1</strong></em>,<em><strong>2</strong></em>,<em><strong>3</strong></em>], [1,2,3] 长度为 3\n- i = 3: [<em><strong>1</strong></em>,<em><strong>2</strong></em>,3,<em><strong>2</strong></em>], [1,2,2] 长度为 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>obstacles = [2,2,1]\n<strong>输出：</strong>[1,2,1]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>2</strong></em>], [2] 长度为 1\n- i = 1: [<em><strong>2</strong></em>,<em><strong>2</strong></em>], [2,2] 长度为 2\n- i = 2: [2,2,<em><strong>1</strong></em>], [1] 长度为 1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>obstacles = [3,1,5,6,4,2]\n<strong>输出：</strong>[1,1,2,3,2,2]\n<strong>解释：</strong>每个位置的最长有效障碍路线是：\n- i = 0: [<em><strong>3</strong></em>], [3] 长度为 1\n- i = 1: [3,<em><strong>1</strong></em>], [1] 长度为 1\n- i = 2: [<em><strong>3</strong></em>,1,<em><strong>5</strong></em>], [3,5] 长度为 2, [1,5] 也是有效的障碍赛跑路线\n- i = 3: [<em><strong>3</strong></em>,1,<em><strong>5</strong></em>,<em><strong>6</strong></em>], [3,5,6] 长度为 3, [1,5,6] 也是有效的障碍赛跑路线\n- i = 4: [<em><strong>3</strong></em>,1,5,6,<em><strong>4</strong></em>], [3,4] 长度为 2, [1,4] 也是有效的障碍赛跑路线\n- i = 5: [3,<em><strong>1</strong></em>,5,6,4,<em><strong>2</strong></em>], [1,2] 长度为 2\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == obstacles.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= obstacles[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1965.丢失信息的雇员",
        "hardRate": "EASY",
        "passRate": "71.06%",
        "problemsUrl": "https://leetcode.cn/problems/employees-with-missing-information/",
        "solutionsUrl": "https://leetcode.cn/problems/employees-with-missing-information/solution",
        "problemsDesc": "<p>表: <code>Employees</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| name        | varchar |\n+-------------+---------+\nemployee_id 是这个表的主键。\n每一行表示雇员的id 和他的姓名。\n</pre>\n\n<p>表: <code>Salaries</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| employee_id | int     |\n| salary      | int     |\n+-------------+---------+\nemployee_id is 这个表的主键。\n每一行表示雇员的id 和他的薪水。\n</pre>\n\n<p>&nbsp;</p>\n\n<p>写出一个查询语句，找到所有 <strong>丢失信息</strong> 的雇员id。当满足下面一个条件时，就被认为是雇员的信息丢失：</p>\n\n<ul>\n\t<li>雇员的 <strong>姓名</strong> 丢失了，或者</li>\n\t<li>雇员的 <strong>薪水信息</strong> 丢失了，或者</li>\n</ul>\n\n<p>返回这些雇员的id &nbsp;<code>employee_id</code>&nbsp;，&nbsp;<strong>从小到大排序&nbsp;</strong>。</p>\n\n<p>查询结果格式如下面的例子所示。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>\nEmployees table:\n+-------------+----------+\n| employee_id | name     |\n+-------------+----------+\n| 2           | Crew     |\n| 4           | Haven    |\n| 5           | Kristian |\n+-------------+----------+\nSalaries table:\n+-------------+--------+\n| employee_id | salary |\n+-------------+--------+\n| 5           | 76071  |\n| 1           | 22517  |\n| 4           | 63539  |\n+-------------+--------+\n<strong>输出：</strong>\n+-------------+\n| employee_id |\n+-------------+\n| 1           |\n| 2           |\n+-------------+\n<strong>解释：</strong>\n雇员1，2，4，5 都工作在这个公司。\n1号雇员的姓名丢失了。\n2号雇员的薪水信息丢失了。</pre>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1966.未排序数组中的可被二分搜索的数",
        "hardRate": "MEDIUM",
        "passRate": "63.61%",
        "problemsUrl": "https://leetcode.cn/problems/binary-searchable-numbers-in-an-unsorted-array/",
        "solutionsUrl": "https://leetcode.cn/problems/binary-searchable-numbers-in-an-unsorted-array/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1967.作为子字符串出现在单词中的字符串数目",
        "hardRate": "EASY",
        "passRate": "79.33%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-strings-that-appear-as-substrings-in-word/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-strings-that-appear-as-substrings-in-word/solution",
        "problemsDesc": "<p>给你一个字符串数组 <code>patterns</code> 和一个字符串 <code>word</code> ，统计 <code>patterns</code> 中有多少个字符串是 <code>word</code> 的子字符串。返回字符串数目。</p>\n\n<p><strong>子字符串</strong> 是字符串中的一个连续字符序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>patterns = [\"a\",\"abc\",\"bc\",\"d\"], word = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>\n- \"a\" 是 \"<em><strong>a</strong></em>bc\" 的子字符串。\n- \"abc\" 是 \"<em><strong>abc</strong></em>\" 的子字符串。\n- \"bc\" 是 \"a<em><strong>bc</strong></em>\" 的子字符串。\n- \"d\" 不是 \"abc\" 的子字符串。\npatterns 中有 3 个字符串作为子字符串出现在 word 中。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>patterns = [\"a\",\"b\",\"c\"], word = \"aaaaabbbbb\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\n- \"a\" 是 \"a<em><strong>a</strong></em>aaabbbbb\" 的子字符串。\n- \"b\" 是 \"aaaaabbbb<em><strong>b</strong></em>\" 的子字符串。\n- \"c\" 不是 \"aaaaabbbbb\" 的字符串。\npatterns 中有 2 个字符串作为子字符串出现在 word 中。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>patterns = [\"a\",\"a\",\"a\"], word = \"ab\"\n<strong>输出：</strong>3\n<strong>解释：</strong>patterns 中的每个字符串都作为子字符串出现在 word \"<em><strong>a</strong></em>b\" 中。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= patterns.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= patterns[i].length &lt;= 100</code></li>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>patterns[i]</code> 和 <code>word</code> 由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1968.构造元素不等于两相邻元素平均值的数组",
        "hardRate": "MEDIUM",
        "passRate": "39.28%",
        "problemsUrl": "https://leetcode.cn/problems/array-with-elements-not-equal-to-average-of-neighbors/",
        "solutionsUrl": "https://leetcode.cn/problems/array-with-elements-not-equal-to-average-of-neighbors/solution",
        "problemsDesc": "<p>给你一个 <strong>下标从 0 开始</strong> 的数组 <code>nums</code> ，数组由若干 <strong>互不相同的</strong> 整数组成。你打算重新排列数组中的元素以满足：重排后，数组中的每个元素都 <strong>不等于</strong> 其两侧相邻元素的 <strong>平均值</strong> 。</p>\n\n<p>更公式化的说法是，重新排列的数组应当满足这一属性：对于范围&nbsp;<code>1 &lt;= i &lt; nums.length - 1</code> 中的每个 <code>i</code> ，<code>(nums[i-1] + nums[i+1]) / 2</code> <strong>不等于</strong> <code>nums[i]</code> 均成立 。</p>\n\n<p>返回满足题意的任一重排结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,3,4,5]\n<strong>输出：</strong>[1,2,4,5,3]\n<strong>解释：</strong>\ni=1, nums[i] = 2, 两相邻元素平均值为 (1+4) / 2 = 2.5\ni=2, nums[i] = 4, 两相邻元素平均值为 (2+5) / 2 = 3.5\ni=3, nums[i] = 5, 两相邻元素平均值为 (4+3) / 2 = 3.5\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [6,2,0,9,7]\n<strong>输出：</strong>[9,7,6,2,0]\n<strong>解释：</strong>\ni=1, nums[i] = 7, 两相邻元素平均值为 (9+6) / 2 = 7.5\ni=2, nums[i] = 6, 两相邻元素平均值为 (7+2) / 2 = 4.5\ni=3, nums[i] = 2, 两相邻元素平均值为 (6+0) / 2 = 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1969.数组元素的最小非零乘积",
        "hardRate": "MEDIUM",
        "passRate": "29.87%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-non-zero-product-of-the-array-elements/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-non-zero-product-of-the-array-elements/solution",
        "problemsDesc": "<p>给你一个正整数&nbsp;<code>p</code>&nbsp;。你有一个下标从 <strong>1</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，这个数组包含范围&nbsp;<code>[1, 2<sup>p</sup> - 1]</code>&nbsp;内所有整数的二进制形式（两端都 <strong>包含</strong>）。你可以进行以下操作 <strong>任意</strong>&nbsp;次：</p>\n\n<ul>\n\t<li>从 <code>nums</code>&nbsp;中选择两个元素&nbsp;<code>x</code>&nbsp;和&nbsp;<code>y</code>&nbsp; 。</li>\n\t<li>选择 <code>x</code>&nbsp;中的一位与 <code>y</code>&nbsp;对应位置的位交换。对应位置指的是两个整数 <strong>相同位置</strong>&nbsp;的二进制位。</li>\n</ul>\n\n<p>比方说，如果&nbsp;<code>x = 11<em><strong>0</strong></em>1</code>&nbsp;且&nbsp;<code>y = 00<em><strong>1</strong></em>1</code>&nbsp;，交换右边数起第 <code>2</code>&nbsp;位后，我们得到&nbsp;<code>x = 11<em><strong>1</strong></em>1</code> 和&nbsp;<code>y = 00<em><strong>0</strong></em>1</code>&nbsp;。</p>\n\n<p>请你算出进行以上操作 <strong>任意次</strong>&nbsp;以后，<code>nums</code>&nbsp;能得到的 <strong>最小非零</strong>&nbsp;乘积。将乘积对<em>&nbsp;</em><code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong> 后返回。</p>\n\n<p><strong>注意：</strong>答案应为取余 <strong>之前</strong>&nbsp;的最小值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>p = 1\n<b>输出：</b>1\n<b>解释：</b>nums = [1] 。\n只有一个元素，所以乘积为该元素。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>p = 2\n<b>输出：</b>6\n<b>解释：</b>nums = [01, 10, 11] 。\n所有交换要么使乘积变为 0 ，要么乘积与初始乘积相同。\n所以，数组乘积 1 * 2 * 3 = 6 已经是最小值。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>p = 3\n<b>输出：</b>1512\n<b>解释：</b>nums = [001, 010, 011, 100, 101, 110, 111]\n- 第一次操作中，我们交换第二个和第五个元素最左边的数位。\n    - 结果数组为 [001, <em><strong>1</strong></em>10, 011, 100, <em><strong>0</strong></em>01, 110, 111] 。\n- 第二次操作中，我们交换第三个和第四个元素中间的数位。\n    - 结果数组为 [001, 110, 0<em><strong>0</strong></em>1, 1<em><strong>1</strong></em>0, 001, 110, 111] 。\n数组乘积 1 * 6 * 1 * 6 * 1 * 6 * 7 = 1512 是最小乘积。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= p &lt;= 60</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1970.你能穿过矩阵的最后一天",
        "hardRate": "HARD",
        "passRate": "50.76%",
        "problemsUrl": "https://leetcode.cn/problems/last-day-where-you-can-still-cross/",
        "solutionsUrl": "https://leetcode.cn/problems/last-day-where-you-can-still-cross/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>1</strong>&nbsp;开始的二进制矩阵，其中&nbsp;<code>0</code>&nbsp;表示陆地，<code>1</code>&nbsp;表示水域。同时给你&nbsp;<code>row</code> 和&nbsp;<code>col</code>&nbsp;分别表示矩阵中行和列的数目。</p>\n\n<p>一开始在第&nbsp;<code>0</code>&nbsp;天，<strong>整个</strong>&nbsp;矩阵都是&nbsp;<strong>陆地</strong>&nbsp;。但每一天都会有一块新陆地被&nbsp;<strong>水</strong>&nbsp;淹没变成水域。给你一个下标从&nbsp;<strong>1</strong>&nbsp;开始的二维数组&nbsp;<code>cells</code>&nbsp;，其中&nbsp;<code>cells[i] = [r<sub>i</sub>, c<sub>i</sub>]</code>&nbsp;表示在第&nbsp;<code>i</code>&nbsp;天，第&nbsp;<code>r<sub>i</sub></code>&nbsp;行&nbsp;<code>c<sub>i</sub></code>&nbsp;列（下标都是从 <strong>1</strong>&nbsp;开始）的陆地会变成 <strong>水域</strong>&nbsp;（也就是 <code>0</code>&nbsp;变成 <code>1</code>&nbsp;）。</p>\n\n<p>你想知道从矩阵最 <strong>上面</strong>&nbsp;一行走到最 <strong>下面</strong>&nbsp;一行，且只经过陆地格子的 <strong>最后一天</strong>&nbsp;是哪一天。你可以从最上面一行的&nbsp;<strong>任意</strong>&nbsp;格子出发，到达最下面一行的&nbsp;<strong>任意</strong>&nbsp;格子。你只能沿着&nbsp;<strong>四个</strong>&nbsp;基本方向移动（也就是上下左右）。</p>\n\n<p>请返回只经过陆地格子能从最 <strong>上面</strong>&nbsp;一行走到最 <strong>下面</strong>&nbsp;一行的 <strong>最后一天</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/1.png\" style=\"width: 624px; height: 162px;\">\n<pre><b>输入：</b>row = 2, col = 2, cells = [[1,1],[2,1],[1,2],[2,2]]\n<b>输出：</b>2\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 2 天。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/2.png\" style=\"width: 504px; height: 178px;\">\n<pre><b>输入：</b>row = 2, col = 2, cells = [[1,1],[1,2],[2,1],[2,2]]\n<b>输出：</b>1\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 1 天。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/3.png\" style=\"width: 666px; height: 167px;\">\n<pre><b>输入：</b>row = 3, col = 3, cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]\n<b>输出：</b>3\n<b>解释：</b>上图描述了矩阵从第 0 天开始是如何变化的。\n可以从最上面一行到最下面一行的最后一天是第 3 天。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= row, col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>4 &lt;= row * col &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>cells.length == row * col</code></li>\n\t<li><code>1 &lt;= r<sub>i</sub> &lt;= row</code></li>\n\t<li><code>1 &lt;= c<sub>i</sub> &lt;= col</code></li>\n\t<li><code>cells</code>&nbsp;中的所有格子坐标都是 <strong>唯一</strong>&nbsp;的。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1971.寻找图中是否存在路径",
        "hardRate": "EASY",
        "passRate": "54.06%",
        "problemsUrl": "https://leetcode.cn/problems/find-if-path-exists-in-graph/",
        "solutionsUrl": "https://leetcode.cn/problems/find-if-path-exists-in-graph/solution",
        "problemsDesc": "<p>有一个具有 <code>n</code> 个顶点的 <strong>双向</strong> 图，其中每个顶点标记从 <code>0</code> 到 <code>n - 1</code>（包含 <code>0</code> 和 <code>n - 1</code>）。图中的边用一个二维整数数组 <code>edges</code> 表示，其中 <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示顶点 <code>ui</code> 和顶点 <code>vi</code> 之间的双向边。 每个顶点对由 <strong>最多一条</strong> 边连接，并且没有顶点存在与自身相连的边。</p>\n\n<p>请你确定是否存在从顶点 <code>source</code> 开始，到顶点 <code>destination</code> 结束的 <strong>有效路径</strong> 。</p>\n\n<p>给你数组 <code>edges</code> 和整数 <code>n</code>、<code>source</code> 和 <code>destination</code>，如果从 <code>source</code> 到 <code>destination</code> 存在 <strong>有效路径</strong> ，则返回 <code>true</code>，否则返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex1.png\" style=\"width: 141px; height: 121px;\" />\n<pre>\n<strong>输入：</strong>n = 3, edges = [[0,1],[1,2],[2,0]], source = 0, destination = 2\n<strong>输出：</strong>true\n<strong>解释：</strong>存在由顶点 0 到顶点 2 的路径:\n- 0 → 1 → 2 \n- 0 → 2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/14/validpath-ex2.png\" style=\"width: 281px; height: 141px;\" />\n<pre>\n<strong>输入：</strong>n = 6, edges = [[0,1],[0,2],[3,5],[5,4],[4,3]], source = 0, destination = 5\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在由顶点 0 到顶点 5 的路径.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li><code>0 &lt;= source, destination &lt;= n - 1</code></li>\n\t<li>不存在重复边</li>\n\t<li>不存在指向顶点自身的边</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1972.同一天的第一个电话和最后一个电话",
        "hardRate": "HARD",
        "passRate": "42.55%",
        "problemsUrl": "https://leetcode.cn/problems/first-and-last-call-on-the-same-day/",
        "solutionsUrl": "https://leetcode.cn/problems/first-and-last-call-on-the-same-day/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1973.值等于子节点值之和的节点数量",
        "hardRate": "MEDIUM",
        "passRate": "60.21%",
        "problemsUrl": "https://leetcode.cn/problems/count-nodes-equal-to-sum-of-descendants/",
        "solutionsUrl": "https://leetcode.cn/problems/count-nodes-equal-to-sum-of-descendants/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1974.使用特殊打字机键入单词的最少时间",
        "hardRate": "EASY",
        "passRate": "71.33%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-time-to-type-word-using-special-typewriter/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-time-to-type-word-using-special-typewriter/solution",
        "problemsDesc": "<p>有一个特殊打字机，它由一个 <strong>圆盘</strong> 和一个 <strong>指针</strong>&nbsp;组成， 圆盘上标有小写英文字母&nbsp;<code>'a'</code> 到&nbsp;<code>'z'</code>。<strong>只有</strong>&nbsp;当指针指向某个字母时，它才能被键入。指针 <strong>初始时</strong>&nbsp;指向字符 <code>'a'</code>&nbsp;。</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/31/chart.jpg\" style=\"width: 530px; height: 410px;\" />\n<p>每一秒钟，你可以执行以下操作之一：</p>\n\n<ul>\n\t<li>将指针 <strong>顺时针</strong>&nbsp;或者 <b>逆时针</b>&nbsp;移动一个字符。</li>\n\t<li>键入指针 <strong>当前</strong>&nbsp;指向的字符。</li>\n</ul>\n\n<p>给你一个字符串&nbsp;<code>word</code>&nbsp;，请你返回键入&nbsp;<code>word</code>&nbsp;所表示单词的 <b>最少</b>&nbsp;秒数&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>word = \"abc\"\n<b>输出：</b>5\n<strong>解释：\n</strong>单词按如下操作键入：\n- 花 1 秒键入字符 'a' in 1 ，因为指针初始指向 'a' ，故不需移动指针。\n- 花 1 秒将指针顺时针移到 'b' 。\n- 花 1 秒键入字符 'b' 。\n- 花 1 秒将指针顺时针移到 'c' 。\n- 花 1 秒键入字符 'c' 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>word = \"bza\"\n<b>输出：</b>7\n<strong>解释：\n</strong>单词按如下操作键入：\n- 花 1 秒将指针顺时针移到 'b' 。\n- 花 1 秒键入字符 'b' 。\n- 花 2 秒将指针逆时针移到 'z' 。\n- 花 1 秒键入字符 'z' 。\n- 花 1 秒将指针顺时针移到 'a' 。\n- 花 1 秒键入字符 'a' 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>word = \"zjpc\"\n<b>输出：</b>34\n<strong>解释：</strong>\n单词按如下操作键入：\n- 花 1 秒将指针逆时针移到 'z' 。\n- 花 1 秒键入字符 'z' 。\n- 花 10 秒将指针顺时针移到 'j' 。\n- 花 1 秒键入字符 'j' 。\n- 花 6 秒将指针顺时针移到 'p' 。\n- 花 1 秒键入字符 'p' 。\n- 花 13 秒将指针逆时针移到 'c' 。\n- 花 1 秒键入字符 'c' 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1975.最大方阵和",
        "hardRate": "MEDIUM",
        "passRate": "41.64%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-matrix-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-matrix-sum/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>n x n</code>&nbsp;的整数方阵&nbsp;<code>matrix</code>&nbsp;。你可以执行以下操作&nbsp;<strong>任意次</strong>&nbsp;：</p>\n\n<ul>\n\t<li>选择&nbsp;<code>matrix</code>&nbsp;中&nbsp;<strong>相邻</strong>&nbsp;两个元素，并将它们都 <strong>乘以</strong>&nbsp;<code>-1</code>&nbsp;。</li>\n</ul>\n\n<p>如果两个元素有 <strong>公共边</strong>&nbsp;，那么它们就是 <strong>相邻</strong>&nbsp;的。</p>\n\n<p>你的目的是 <strong>最大化</strong>&nbsp;方阵元素的和。请你在执行以上操作之后，返回方阵的&nbsp;<strong>最大</strong>&nbsp;和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex1.png\" style=\"width: 401px; height: 81px;\">\n<pre><b>输入：</b>matrix = [[1,-1],[-1,1]]\n<b>输出：</b>4\n<b>解释：</b>我们可以执行以下操作使和等于 4 ：\n- 将第一行的 2 个元素乘以 -1 。\n- 将第一列的 2 个元素乘以 -1 。\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/16/pc79-q2ex2.png\" style=\"width: 321px; height: 121px;\">\n<pre><b>输入：</b>matrix = [[1,2,3],[-1,-2,-3],[1,2,3]]\n<b>输出：</b>16\n<b>解释：</b>我们可以执行以下操作使和等于 16 ：\n- 将第二行的最后 2 个元素乘以 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == matrix.length == matrix[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 250</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= matrix[i][j] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1976.到达目的地的方案数",
        "hardRate": "MEDIUM",
        "passRate": "36.53%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-ways-to-arrive-at-destination/solution",
        "problemsDesc": "<p>你在一个城市里，城市由 <code>n</code>&nbsp;个路口组成，路口编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，某些路口之间有 <strong>双向</strong>&nbsp;道路。输入保证你可以从任意路口出发到达其他任意路口，且任意两个路口之间最多有一条路。</p>\n\n<p>给你一个整数&nbsp;<code>n</code>&nbsp;和二维整数数组&nbsp;<code>roads</code>&nbsp;，其中&nbsp;<code>roads[i] = [u<sub>i</sub>, v<sub>i</sub>, time<sub>i</sub>]</code>&nbsp;表示在路口&nbsp;<code>u<sub>i</sub></code>&nbsp;和&nbsp;<code>v<sub>i</sub></code>&nbsp;之间有一条需要花费&nbsp;<code>time<sub>i</sub></code>&nbsp;时间才能通过的道路。你想知道花费 <strong>最少时间</strong>&nbsp;从路口&nbsp;<code>0</code>&nbsp;出发到达路口&nbsp;<code>n - 1</code>&nbsp;的方案数。</p>\n\n<p>请返回花费 <strong>最少时间</strong>&nbsp;到达目的地的 <strong>路径数目</strong>&nbsp;。由于答案可能很大，将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/17/graph2.png\" style=\"width: 235px; height: 381px;\">\n<pre><b>输入：</b>n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]\n<b>输出：</b>4\n<b>解释：</b>从路口 0 出发到路口 6 花费的最少时间是 7 分钟。\n四条花费 7 分钟的路径分别为：\n- 0 ➝ 6\n- 0 ➝ 4 ➝ 6\n- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6\n- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>n = 2, roads = [[1,0,10]]\n<b>输出：</b>1\n<b>解释：</b>只有一条从路口 0 到路口 1 的路，花费 10 分钟。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 200</code></li>\n\t<li><code>n - 1 &lt;= roads.length &lt;= n * (n - 1) / 2</code></li>\n\t<li><code>roads[i].length == 3</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>u<sub>i </sub>!= v<sub>i</sub></code></li>\n\t<li>任意两个路口之间至多有一条路。</li>\n\t<li>从任意路口出发，你能够到达其他任意路口。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1977.划分数字的方案数",
        "hardRate": "HARD",
        "passRate": "30.15%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-ways-to-separate-numbers/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-ways-to-separate-numbers/solution",
        "problemsDesc": "<p>你写下了若干 <strong>正整数</strong>&nbsp;，并将它们连接成了一个字符串&nbsp;<code>num</code>&nbsp;。但是你忘记给这些数字之间加逗号了。你只记得这一列数字是 <strong>非递减</strong>&nbsp;的且&nbsp;<strong>没有</strong> 任何数字有前导 0 。</p>\n\n<p>请你返回有多少种可能的 <strong>正整数数组</strong>&nbsp;可以得到字符串&nbsp;<code>num</code>&nbsp;。由于答案可能很大，将结果对 <code>10<sup>9</sup> + 7</code>&nbsp;<b>取余</b>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>num = \"327\"\n<b>输出：</b>2\n<b>解释：</b>以下为可能的方案：\n3, 27\n327\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>num = \"094\"\n<b>输出：</b>0\n<b>解释：</b>不能有数字有前导 0 ，且所有数字均为正数。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>num = \"0\"\n<b>输出：</b>0\n<strong>解释：</strong>不能有数字有前导 0 ，且所有数字均为正数。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><b>输入：</b>num = \"9999999999999\"\n<b>输出：</b>101\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 3500</code></li>\n\t<li><code>num</code>&nbsp;只含有数字&nbsp;<code>'0'</code> 到&nbsp;<code>'9'</code>&nbsp;。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1978.上级经理已离职的公司员工",
        "hardRate": "EASY",
        "passRate": "49.97%",
        "problemsUrl": "https://leetcode.cn/problems/employees-whose-manager-left-the-company/",
        "solutionsUrl": "https://leetcode.cn/problems/employees-whose-manager-left-the-company/solution",
        "problemsDesc": "<p>表: <code>Employees</code></p>\n\n<pre>\n+-------------+----------+\n| Column Name | Type     |\n+-------------+----------+\n| employee_id | int      |\n| name        | varchar  |\n| manager_id  | int      |\n| salary      | int      |\n+-------------+----------+\nemployee_id 是这个表的主键。\n这个表包含了员工，他们的薪水和上级经理的id。\n有一些员工没有上级经理（其manager_id 是空值）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p>写一个查询语句，查询出，这些员工的id，他们的薪水严格少于<code>$30000</code>&nbsp;并且他们的上级经理已离职。当一个经理离开公司时，他们的信息需要从员工表中删除掉，但是表中的员工的<code>manager_id</code> &nbsp;这一列还是设置的离职经理的id&nbsp;。</p>\n\n<p>返回的结果按照<code>employee_id&nbsp;</code>从小到大排序。</p>\n\n<p>查询结果如下所示：</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入：</strong>\nEmployees table:\n+-------------+-----------+------------+--------+\n| employee_id | name      | manager_id | salary |\n+-------------+-----------+------------+--------+\n| 3           | Mila      | 9          | 60301  |\n| 12          | Antonella | null       | 31000  |\n| 13          | Emery     | null       | 67084  |\n| 1           | Kalel     | 11         | 21241  |\n| 9           | Mikaela   | null       | 50937  |\n| 11          | Joziah    | 6          | 28485  |\n+-------------+-----------+------------+--------+\n<strong>输出：</strong>\n+-------------+\n| employee_id |\n+-------------+\n| 11          |\n+-------------+\n\n<strong>解释：</strong>\n薪水少于30000美元的员工有1号(Kalel) and 11号 (Joziah)。\nKalel的上级经理是11号员工，他还在公司上班(他是Joziah)。\nJoziah的上级经理是6号员工，他已经离职，因为员工表里面已经没有6号员工的信息了，它被删除了。\n</pre>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1979.找出数组的最大公约数",
        "hardRate": "EASY",
        "passRate": "77.08%",
        "problemsUrl": "https://leetcode.cn/problems/find-greatest-common-divisor-of-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-greatest-common-divisor-of-array/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，返回数组中最大数和最小数的 <strong>最大公约数</strong> 。</p>\n\n<p>两个数的&nbsp;<strong>最大公约数</strong> 是能够被两个数整除的最大正整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,5,6,9,10]\n<strong>输出：</strong>2\n<strong>解释：</strong>\nnums 中最小的数是 2\nnums 中最大的数是 10\n2 和 10 的最大公约数是 2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [7,5,6,8,3]\n<strong>输出：</strong>1\n<strong>解释：</strong>\nnums 中最小的数是 3\nnums 中最大的数是 8\n3 和 8 的最大公约数是 1\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>\nnums 中最小的数是 3\nnums 中最大的数是 3\n3 和 3 的最大公约数是 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1980.找出不同的二进制字符串",
        "hardRate": "MEDIUM",
        "passRate": "59.79%",
        "problemsUrl": "https://leetcode.cn/problems/find-unique-binary-string/",
        "solutionsUrl": "https://leetcode.cn/problems/find-unique-binary-string/solution",
        "problemsDesc": "<p>给你一个字符串数组 <code>nums</code> ，该数组由 <code>n</code> 个 <strong>互不相同</strong> 的二进制字符串组成，且每个字符串长度都是 <code>n</code> 。请你找出并返回一个长度为&nbsp;<code>n</code>&nbsp;且&nbsp;<strong>没有出现</strong> 在 <code>nums</code> 中的二进制字符串<em>。</em>如果存在多种答案，只需返回 <strong>任意一个</strong> 即可。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"01\",\"10\"]\n<strong>输出：</strong>\"11\"\n<strong>解释：</strong>\"11\" 没有出现在 nums 中。\"00\" 也是正确答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"00\",\"01\"]\n<strong>输出：</strong>\"11\"\n<strong>解释：</strong>\"11\" 没有出现在 nums 中。\"10\" 也是正确答案。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"111\",\"011\",\"001\"]\n<strong>输出：</strong>\"101\"\n<strong>解释：</strong>\"101\" 没有出现在 nums 中。\"000\"、\"010\"、\"100\"、\"110\" 也是正确答案。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 16</code></li>\n\t<li><code>nums[i].length == n</code></li>\n\t<li><code>nums[i] </code>为 <code>'0'</code> 或 <code>'1'</code></li>\n\t<li><code>nums</code> 中的所有字符串 <strong>互不相同</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1981.最小化目标值与所选元素的差",
        "hardRate": "MEDIUM",
        "passRate": "33.21%",
        "problemsUrl": "https://leetcode.cn/problems/minimize-the-difference-between-target-and-chosen-elements/",
        "solutionsUrl": "https://leetcode.cn/problems/minimize-the-difference-between-target-and-chosen-elements/solution",
        "problemsDesc": "<p>给你一个大小为 <code>m x n</code> 的整数矩阵 <code>mat</code> 和一个整数 <code>target</code> 。</p>\n\n<p>从矩阵的 <strong>每一行</strong> 中选择一个整数，你的目标是&nbsp;<strong>最小化</strong>&nbsp;所有选中元素之&nbsp;<strong>和</strong>&nbsp;与目标值 <code>target</code> 的 <strong>绝对差</strong> 。</p>\n\n<p>返回 <strong>最小的绝对差</strong> 。</p>\n\n<p><code>a</code> 和 <code>b</code> 两数字的 <strong>绝对差</strong> 是 <code>a - b</code> 的绝对值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1.png\" style=\"width: 181px; height: 181px;\" /></p>\n\n<pre>\n<strong>输入：</strong>mat = [[1,2,3],[4,5,6],[7,8,9]], target = 13\n<strong>输出：</strong>0\n<strong>解释：</strong>一种可能的最优选择方案是：\n- 第一行选出 1\n- 第二行选出 5\n- 第三行选出 7\n所选元素的和是 13 ，等于目标值，所以绝对差是 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1-1.png\" style=\"width: 61px; height: 181px;\" /></p>\n\n<pre>\n<strong>输入：</strong>mat = [[1],[2],[3]], target = 100\n<strong>输出：</strong>94\n<strong>解释：</strong>唯一一种选择方案是：\n- 第一行选出 1\n- 第二行选出 2\n- 第三行选出 3\n所选元素的和是 6 ，绝对差是 94 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/03/matrix1-3.png\" style=\"width: 301px; height: 61px;\" /></p>\n\n<pre>\n<strong>输入：</strong>mat = [[1,2,9,8,7]], target = 6\n<strong>输出：</strong>1\n<strong>解释：</strong>最优的选择方案是选出第一行的 7 。\n绝对差是 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == mat.length</code></li>\n\t<li><code>n == mat[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 70</code></li>\n\t<li><code>1 &lt;= mat[i][j] &lt;= 70</code></li>\n\t<li><code>1 &lt;= target &lt;= 800</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1982.从子集的和还原数组",
        "hardRate": "HARD",
        "passRate": "48.35%",
        "problemsUrl": "https://leetcode.cn/problems/find-array-given-subset-sums/",
        "solutionsUrl": "https://leetcode.cn/problems/find-array-given-subset-sums/solution",
        "problemsDesc": "<p>存在一个未知数组需要你进行还原，给你一个整数 <code>n</code> 表示该数组的长度。另给你一个数组 <code>sums</code> ，由未知数组中全部 <code>2<sup>n</sup></code> 个 <strong>子集的和</strong> 组成（子集中的元素没有特定的顺序）。</p>\n\n<p>返回一个长度为 <code>n</code> 的数组<em> </em><code>ans</code><em> </em>表示还原得到的未知数组。如果存在 <strong>多种</strong> 答案，只需返回其中 <strong>任意一个</strong> 。</p>\n\n<p>如果可以由数组 <code>arr</code> 删除部分元素（也可能不删除或全删除）得到数组 <code>sub</code> ，那么数组 <code>sub</code> 就是数组 <code>arr</code> 的一个<strong> 子集</strong> 。<code>sub</code> 的元素之和就是 <code>arr</code> 的一个 <strong>子集的和</strong> 。一个空数组的元素之和为 <code>0</code> 。</p>\n\n<p><strong>注意：</strong>生成的测试用例将保证至少存在一个正确答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3, sums = [-3,-2,-1,0,0,1,2,3]\n<strong>输出：</strong>[1,2,-3]\n<strong>解释：</strong>[1,2,-3] 能够满足给出的子集的和：\n- []：和是 0\n- [1]：和是 1\n- [2]：和是 2\n- [1,2]：和是 3\n- [-3]：和是 -3\n- [1,-3]：和是 -2\n- [2,-3]：和是 -1\n- [1,2,-3]：和是 0\n注意，[1,2,-3] 的任何排列和 [-1,-2,3] 的任何排列都会被视作正确答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2, sums = [0,0,0,0]\n<strong>输出：</strong>[0,0]\n<strong>解释：</strong>唯一的正确答案是 [0,0] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 4, sums = [0,0,5,5,4,-1,4,9,9,-1,4,3,4,8,3,8]\n<strong>输出：</strong>[0,-1,4,5]\n<strong>解释：</strong>[0,-1,4,5] 能够满足给出的子集的和。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>sums.length == 2<sup>n</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= sums[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1983.范围和相等的最宽索引对",
        "hardRate": "MEDIUM",
        "passRate": "48.02%",
        "problemsUrl": "https://leetcode.cn/problems/widest-pair-of-indices-with-equal-range-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/widest-pair-of-indices-with-equal-range-sum/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1984.学生分数的最小差值",
        "hardRate": "EASY",
        "passRate": "61.79%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-difference-between-highest-and-lowest-of-k-scores/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-difference-between-highest-and-lowest-of-k-scores/solution",
        "problemsDesc": "<p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 名学生的分数。另给你一个整数 <code>k</code> 。</p>\n\n<p>从数组中选出任意 <code>k</code> 名学生的分数，使这 <code>k</code> 个分数间 <strong>最高分</strong> 和 <strong>最低分</strong> 的 <strong>差值</strong> 达到<strong> 最小化</strong> 。</p>\n\n<p>返回可能的 <strong>最小差值</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [90], k = 1\n<strong>输出：</strong>0\n<strong>解释：</strong>选出 1 名学生的分数，仅有 1 种方法：\n- [<em><strong>90</strong></em>] 最高分和最低分之间的差值是 90 - 90 = 0\n可能的最小差值是 0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [9,4,1,7], k = 2\n<strong>输出：</strong>2\n<strong>解释：</strong>选出 2 名学生的分数，有 6 种方法：\n- [<em><strong>9</strong></em>,<em><strong>4</strong></em>,1,7] 最高分和最低分之间的差值是 9 - 4 = 5\n- [<em><strong>9</strong></em>,4,<em><strong>1</strong></em>,7] 最高分和最低分之间的差值是 9 - 1 = 8\n- [<em><strong>9</strong></em>,4,1,<em><strong>7</strong></em>] 最高分和最低分之间的差值是 9 - 7 = 2\n- [9,<em><strong>4</strong></em>,<em><strong>1</strong></em>,7] 最高分和最低分之间的差值是 4 - 1 = 3\n- [9,<em><strong>4</strong></em>,1,<em><strong>7</strong></em>] 最高分和最低分之间的差值是 7 - 4 = 3\n- [9,4,<em><strong>1</strong></em>,<em><strong>7</strong></em>] 最高分和最低分之间的差值是 7 - 1 = 6\n可能的最小差值是 2</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1985.找出数组中的第 K 大整数",
        "hardRate": "MEDIUM",
        "passRate": "42.12%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-kth-largest-integer-in-the-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-kth-largest-integer-in-the-array/solution",
        "problemsDesc": "<p>给你一个字符串数组 <code>nums</code> 和一个整数 <code>k</code> 。<code>nums</code> 中的每个字符串都表示一个不含前导零的整数。</p>\n\n<p>返回 <code>nums</code> 中表示第 <code>k</code> 大整数的字符串。</p>\n\n<p><strong>注意：</strong>重复的数字在统计时会视为不同元素考虑。例如，如果 <code>nums</code> 是 <code>[\"1\",\"2\",\"2\"]</code>，那么 <code>\"2\"</code> 是最大的整数，<code>\"2\"</code> 是第二大的整数，<code>\"1\"</code> 是第三大的整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"3\",\"6\",\"7\",\"10\"], k = 4\n<strong>输出：</strong>\"3\"\n<strong>解释：</strong>\nnums 中的数字按非递减顺序排列为 [\"3\",\"6\",\"7\",\"10\"]\n其中第 4 大整数是 \"3\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"2\",\"21\",\"12\",\"1\"], k = 3\n<strong>输出：</strong>\"2\"\n<strong>解释：</strong>\nnums 中的数字按非递减顺序排列为 [\"1\",\"2\",\"12\",\"21\"]\n其中第 3 大整数是 \"2\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [\"0\",\"0\"], k = 2\n<strong>输出：</strong>\"0\"\n<strong>解释：</strong>\nnums 中的数字按非递减顺序排列为 [\"0\",\"0\"]\n其中第 2 大整数是 \"0\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 100</code></li>\n\t<li><code>nums[i]</code> 仅由数字组成</li>\n\t<li><code>nums[i]</code> 不含任何前导零</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1986.完成任务的最少工作时间段",
        "hardRate": "MEDIUM",
        "passRate": "33.21%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-work-sessions-to-finish-the-tasks/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-work-sessions-to-finish-the-tasks/solution",
        "problemsDesc": "<p>你被安排了 <code>n</code>&nbsp;个任务。任务需要花费的时间用长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>tasks</code>&nbsp;表示，第 <code>i</code>&nbsp;个任务需要花费&nbsp;<code>tasks[i]</code>&nbsp;小时完成。一个 <strong>工作时间段</strong>&nbsp;中，你可以 <strong>至多</strong>&nbsp;连续工作&nbsp;<code>sessionTime</code>&nbsp;个小时，然后休息一会儿。</p>\n\n<p>你需要按照如下条件完成给定任务：</p>\n\n<ul>\n\t<li>如果你在某一个时间段开始一个任务，你需要在 <strong>同一个</strong>&nbsp;时间段完成它。</li>\n\t<li>完成一个任务后，你可以 <strong>立马</strong>&nbsp;开始一个新的任务。</li>\n\t<li>你可以按 <strong>任意顺序</strong>&nbsp;完成任务。</li>\n</ul>\n\n<p>给你&nbsp;<code>tasks</code> 和&nbsp;<code>sessionTime</code>&nbsp;，请你按照上述要求，返回完成所有任务所需要的&nbsp;<strong>最少</strong>&nbsp;数目的&nbsp;<strong>工作时间段</strong>&nbsp;。</p>\n\n<p>测试数据保证&nbsp;<code>sessionTime</code> <strong>大于等于</strong>&nbsp;<code>tasks[i]</code>&nbsp;中的&nbsp;<strong>最大值</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>tasks = [1,2,3], sessionTime = 3\n<b>输出：</b>2\n<b>解释：</b>你可以在两个工作时间段内完成所有任务。\n- 第一个工作时间段：完成第一和第二个任务，花费 1 + 2 = 3 小时。\n- 第二个工作时间段：完成第三个任务，花费 3 小时。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>tasks = [3,1,3,1,1], sessionTime = 8\n<b>输出：</b>2\n<b>解释：</b>你可以在两个工作时间段内完成所有任务。\n- 第一个工作时间段：完成除了最后一个任务以外的所有任务，花费 3 + 1 + 3 + 1 = 8 小时。\n- 第二个工作时间段，完成最后一个任务，花费 1 小时。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>tasks = [1,2,3,4,5], sessionTime = 15\n<b>输出：</b>1\n<b>解释：</b>你可以在一个工作时间段以内完成所有任务。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == tasks.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 14</code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10</code></li>\n\t<li><code>max(tasks[i]) &lt;= sessionTime &lt;= 15</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1987.不同的好子序列数目",
        "hardRate": "HARD",
        "passRate": "50.45%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-unique-good-subsequences/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-unique-good-subsequences/solution",
        "problemsDesc": "<p>给你一个二进制字符串&nbsp;<code>binary</code>&nbsp;。&nbsp;<code>binary</code>&nbsp;的一个 <strong>子序列</strong>&nbsp;如果是 <strong>非空</strong>&nbsp;的且没有 <b>前导</b>&nbsp;<strong>0</strong>&nbsp;（除非数字是 <code>\"0\"</code>&nbsp;本身），那么它就是一个 <strong>好</strong>&nbsp;的子序列。</p>\n\n<p>请你找到&nbsp;<code>binary</code>&nbsp;<strong>不同好子序列</strong>&nbsp;的数目。</p>\n\n<ul>\n\t<li>比方说，如果&nbsp;<code>binary = \"001\"</code>&nbsp;，那么所有 <strong>好</strong>&nbsp;子序列为&nbsp;<code>[\"0\", \"0\", \"1\"]</code>&nbsp;，所以 <b>不同</b>&nbsp;的好子序列为&nbsp;<code>\"0\"</code> 和&nbsp;<code>\"1\"</code>&nbsp;。 注意，子序列&nbsp;<code>\"00\"</code>&nbsp;，<code>\"01\"</code>&nbsp;和&nbsp;<code>\"001\"</code>&nbsp;不是好的，因为它们有前导 0 。</li>\n</ul>\n\n<p>请你返回&nbsp;<code>binary</code>&nbsp;中&nbsp;<strong>不同好子序列</strong>&nbsp;的数目。由于答案可能很大，请将它对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong> 后返回。</p>\n\n<p>一个 <strong>子序列</strong>&nbsp;指的是从原数组中删除若干个（可以一个也不删除）元素后，不改变剩余元素顺序得到的序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>binary = \"001\"\n<b>输出：</b>2\n<b>解释：</b>好的二进制子序列为 [\"0\", \"0\", \"1\"] 。\n不同的好子序列为 \"0\" 和 \"1\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>binary = \"11\"\n<b>输出：</b>2\n<b>解释：</b>好的二进制子序列为 [\"1\", \"1\", \"11\"] 。\n不同的好子序列为 \"1\" 和 \"11\" 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>binary = \"101\"\n<b>输出：</b>5\n<b>解释：</b>好的二进制子序列为 [\"1\", \"0\", \"1\", \"10\", \"11\", \"101\"] 。\n不同的好子序列为 \"0\" ，\"1\" ，\"10\" ，\"11\" 和 \"101\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= binary.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>binary</code>&nbsp;只含有&nbsp;<code>'0'</code>&nbsp;和&nbsp;<code>'1'</code> 。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1988.找出每所学校的最低分数要求",
        "hardRate": "MEDIUM",
        "passRate": "64.64%",
        "problemsUrl": "https://leetcode.cn/problems/find-cutoff-score-for-each-school/",
        "solutionsUrl": "https://leetcode.cn/problems/find-cutoff-score-for-each-school/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1989.捉迷藏中可捕获的最大人数",
        "hardRate": "MEDIUM",
        "passRate": "55.50%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-people-that-can-be-caught-in-tag/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-people-that-can-be-caught-in-tag/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1990.统计实验的数量",
        "hardRate": "MEDIUM",
        "passRate": "47.08%",
        "problemsUrl": "https://leetcode.cn/problems/count-the-number-of-experiments/",
        "solutionsUrl": "https://leetcode.cn/problems/count-the-number-of-experiments/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 1991.找到数组的中间位置",
        "hardRate": "EASY",
        "passRate": "63.86%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-middle-index-in-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-middle-index-in-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，请你找到 <strong>最左边</strong>&nbsp;的中间位置&nbsp;<code>middleIndex</code>&nbsp;（也就是所有可能中间位置下标最小的一个）。</p>\n\n<p>中间位置&nbsp;<code>middleIndex</code>&nbsp;是满足&nbsp;<code>nums[0] + nums[1] + ... + nums[middleIndex-1] == nums[middleIndex+1] + nums[middleIndex+2] + ... + nums[nums.length-1]</code>&nbsp;的数组下标。</p>\n\n<p>如果&nbsp;<code>middleIndex == 0</code>&nbsp;，左边部分的和定义为 <code>0</code>&nbsp;。类似的，如果&nbsp;<code>middleIndex == nums.length - 1</code>&nbsp;，右边部分的和定义为&nbsp;<code>0</code>&nbsp;。</p>\n\n<p>请你返回满足上述条件 <strong>最左边</strong>&nbsp;的<em>&nbsp;</em><code>middleIndex</code>&nbsp;，如果不存在这样的中间位置，请你返回&nbsp;<code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,3,-1,<em><strong>8</strong></em>,4]\n<b>输出：</b>3\n<strong>解释：</strong>\n下标 3 之前的数字和为：2 + 3 + -1 = 4\n下标 3 之后的数字和为：4 = 4\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,-1,<em><strong>4</strong></em>]\n<b>输出：</b>2\n<strong>解释：</strong>\n下标 2 之前的数字和为：1 + -1 = 0\n下标 2 之后的数字和为：0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,5]\n<b>输出：</b>-1\n<b>解释：</b>\n不存在符合要求的 middleIndex 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [<em><strong>1</strong></em>]\n<b>输出：</b>0\n<strong>解释：</strong>\n下标 0 之前的数字和为：0\n下标 0 之后的数字和为：0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>注意：</strong>本题与主站 724 题相同：<a href=\"https://leetcode-cn.com/problems/find-pivot-index/\" target=\"_blank\">https://leetcode-cn.com/problems/find-pivot-index/</a></p>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1992.找到所有的农场组",
        "hardRate": "MEDIUM",
        "passRate": "61.23%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-groups-of-farmland/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-groups-of-farmland/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始，大小为&nbsp;<code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>land</code>&nbsp;，其中 <code>0</code>&nbsp;表示一单位的森林土地，<code>1</code>&nbsp;表示一单位的农场土地。</p>\n\n<p>为了让农场保持有序，农场土地之间以矩形的 <strong>农场组</strong> 的形式存在。每一个农场组都 <strong>仅</strong>&nbsp;包含农场土地。且题目保证不会有两个农场组相邻，也就是说一个农场组中的任何一块土地都 <strong>不会</strong>&nbsp;与另一个农场组的任何一块土地在四个方向上相邻。</p>\n\n<p><code>land</code>&nbsp;可以用坐标系统表示，其中 <code>land</code>&nbsp;左上角坐标为&nbsp;<code>(0, 0)</code>&nbsp;，右下角坐标为&nbsp;<code>(m-1, n-1)</code>&nbsp;。请你找到所有 <b>农场组</b>&nbsp;最左上角和最右下角的坐标。一个左上角坐标为&nbsp;<code>(r<sub>1</sub>, c<sub>1</sub>)</code>&nbsp;且右下角坐标为&nbsp;<code>(r<sub>2</sub>, c<sub>2</sub>)</code>&nbsp;的 <strong>农场组</strong> 用长度为 4 的数组&nbsp;<code>[r<sub>1</sub>, c<sub>1</sub>, r<sub>2</sub>, c<sub>2</sub>]</code>&nbsp;表示。</p>\n\n<p>请你返回一个二维数组，它包含若干个长度为 4 的子数组，每个子数组表示 <code>land</code>&nbsp;中的一个 <strong>农场组</strong>&nbsp;。如果没有任何农场组，请你返回一个空数组。可以以 <strong>任意顺序</strong>&nbsp;返回所有农场组。</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-23-15-copy-of-diagram-drawio-diagrams-net.png\" style=\"width: 300px; height: 300px;\"></p>\n\n<pre><b>输入：</b>land = [[1,0,0],[0,1,1],[0,1,1]]\n<b>输出：</b>[[0,0,0,0],[1,1,2,2]]\n<strong>解释：</strong>\n第一个农场组的左上角为 land[0][0] ，右下角为 land[0][0] 。\n第二个农场组的左上角为 land[1][1] ，右下角为 land[2][2] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-30-26-copy-of-diagram-drawio-diagrams-net.png\" style=\"width: 200px; height: 200px;\"></p>\n\n<pre><b>输入：</b>land = [[1,1],[1,1]]\n<b>输出：</b>[[0,0,1,1]]\n<strong>解释：</strong>\n第一个农场组左上角为 land[0][0] ，右下角为 land[1][1] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/27/screenshot-2021-07-27-at-12-32-24-copy-of-diagram-drawio-diagrams-net.png\" style=\"width: 100px; height: 100px;\"></p>\n\n<pre><b>输入：</b>land = [[0]]\n<b>输出：</b>[]\n<b>解释：</b>\n没有任何农场组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == land.length</code></li>\n\t<li><code>n == land[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 300</code></li>\n\t<li><code>land</code>&nbsp;只包含&nbsp;<code>0</code>&nbsp;和&nbsp;<code>1</code>&nbsp;。</li>\n\t<li>农场组都是 <strong>矩形</strong>&nbsp;的形状。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1993.树上的操作",
        "hardRate": "MEDIUM",
        "passRate": "39.85%",
        "problemsUrl": "https://leetcode.cn/problems/operations-on-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/operations-on-tree/solution",
        "problemsDesc": "<p>给你一棵&nbsp;<code>n</code>&nbsp;个节点的树，编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，以父节点数组&nbsp;<code>parent</code>&nbsp;的形式给出，其中&nbsp;<code>parent[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个节点的父节点。树的根节点为 <code>0</code>&nbsp;号节点，所以&nbsp;<code>parent[0] = -1</code>&nbsp;，因为它没有父节点。你想要设计一个数据结构实现树里面对节点的加锁，解锁和升级操作。</p>\n\n<p>数据结构需要支持如下函数：</p>\n\n<ul>\n\t<li><strong>Lock：</strong>指定用户给指定节点 <strong>上锁</strong>&nbsp;，上锁后其他用户将无法给同一节点上锁。只有当节点处于未上锁的状态下，才能进行上锁操作。</li>\n\t<li><strong>Unlock：</strong>指定用户给指定节点 <strong>解锁</strong>&nbsp;，只有当指定节点当前正被指定用户锁住时，才能执行该解锁操作。</li>\n\t<li><b>Upgrade：</b>指定用户给指定节点&nbsp;<strong>上锁</strong>&nbsp;，并且将该节点的所有子孙节点&nbsp;<strong>解锁</strong>&nbsp;。只有如下 3 个条件 <strong>全部</strong> 满足时才能执行升级操作：\n\t<ul>\n\t\t<li>指定节点当前状态为未上锁。</li>\n\t\t<li>指定节点至少有一个上锁状态的子孙节点（可以是 <strong>任意</strong>&nbsp;用户上锁的）。</li>\n\t\t<li>指定节点没有任何上锁的祖先节点。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>请你实现&nbsp;<code>LockingTree</code>&nbsp;类：</p>\n\n<ul>\n\t<li><code>LockingTree(int[] parent)</code>&nbsp;用父节点数组初始化数据结构。</li>\n\t<li><code>lock(int num, int user)</code> 如果&nbsp;id 为&nbsp;<code>user</code>&nbsp;的用户可以给节点&nbsp;<code>num</code>&nbsp;上锁，那么返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。如果可以执行此操作，节点&nbsp;<code>num</code>&nbsp;会被 id 为 <code>user</code>&nbsp;的用户 <strong>上锁</strong>&nbsp;。</li>\n\t<li><code>unlock(int num, int user)</code>&nbsp;如果 id 为 <code>user</code>&nbsp;的用户可以给节点 <code>num</code>&nbsp;解锁，那么返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。如果可以执行此操作，节点 <code>num</code>&nbsp;变为 <strong>未上锁</strong>&nbsp;状态。</li>\n\t<li><code>upgrade(int num, int user)</code>&nbsp;如果 id 为 <code>user</code>&nbsp;的用户可以给节点 <code>num</code>&nbsp;升级，那么返回&nbsp;<code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。如果可以执行此操作，节点 <code>num</code>&nbsp;会被&nbsp;<strong>升级 </strong>。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/29/untitled.png\" style=\"width: 375px; height: 246px;\"></p>\n\n<pre><strong>输入：</strong>\n[\"LockingTree\", \"lock\", \"unlock\", \"unlock\", \"lock\", \"upgrade\", \"lock\"]\n[[[-1, 0, 0, 1, 1, 2, 2]], [2, 2], [2, 3], [2, 2], [4, 5], [0, 1], [0, 1]]\n<strong>输出：</strong>\n[null, true, false, true, true, true, false]\n\n<strong>解释：</strong>\nLockingTree lockingTree = new LockingTree([-1, 0, 0, 1, 1, 2, 2]);\nlockingTree.lock(2, 2);    // 返回 true ，因为节点 2 未上锁。\n                           // 节点 2 被用户 2 上锁。\nlockingTree.unlock(2, 3);  // 返回 false ，因为用户 3 无法解锁被用户 2 上锁的节点。\nlockingTree.unlock(2, 2);  // 返回 true ，因为节点 2 之前被用户 2 上锁。\n                           // 节点 2 现在变为未上锁状态。\nlockingTree.lock(4, 5);    // 返回 true ，因为节点 4 未上锁。\n                           // 节点 4 被用户 5 上锁。\nlockingTree.upgrade(0, 1); // 返回 true ，因为节点 0 未上锁且至少有一个被上锁的子孙节点（节点 4）。\n                           // 节点 0 被用户 1 上锁，节点 4 变为未上锁。\nlockingTree.lock(0, 1);    // 返回 false ，因为节点 0 已经被上锁了。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == parent.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 2000</code></li>\n\t<li>对于&nbsp;<code>i != 0</code>&nbsp;，满足&nbsp;<code>0 &lt;= parent[i] &lt;= n - 1</code></li>\n\t<li><code>parent[0] == -1</code></li>\n\t<li><code>0 &lt;= num &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= user &lt;= 10<sup>4</sup></code></li>\n\t<li><code>parent</code>&nbsp;表示一棵合法的树。</li>\n\t<li><code>lock</code>&nbsp;，<code>unlock</code>&nbsp;和&nbsp;<code>upgrade</code>&nbsp;的调用&nbsp;<strong>总共&nbsp;</strong>不超过&nbsp;<code>2000</code>&nbsp;次。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1994.好子集的数目",
        "hardRate": "HARD",
        "passRate": "56.14%",
        "problemsUrl": "https://leetcode.cn/problems/the-number-of-good-subsets/",
        "solutionsUrl": "https://leetcode.cn/problems/the-number-of-good-subsets/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;。如果&nbsp;<code>nums</code>&nbsp;的一个子集中，所有元素的乘积可以表示为一个或多个 <strong>互不相同的质数</strong> 的乘积，那么我们称它为&nbsp;<strong>好子集</strong>&nbsp;。</p>\n\n<ul>\n\t<li>比方说，如果&nbsp;<code>nums = [1, 2, 3, 4]</code>&nbsp;：\n\n\t<ul>\n\t\t<li><code>[2, 3]</code>&nbsp;，<code>[1, 2, 3]</code>&nbsp;和&nbsp;<code>[1, 3]</code>&nbsp;是 <strong>好</strong>&nbsp;子集，乘积分别为&nbsp;<code>6 = 2*3</code>&nbsp;，<code>6 = 2*3</code>&nbsp;和&nbsp;<code>3 = 3</code>&nbsp;。</li>\n\t\t<li><code>[1, 4]</code> 和&nbsp;<code>[4]</code>&nbsp;不是 <strong>好</strong>&nbsp;子集，因为乘积分别为&nbsp;<code>4 = 2*2</code> 和&nbsp;<code>4 = 2*2</code>&nbsp;。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>请你返回 <code>nums</code>&nbsp;中不同的&nbsp;<strong>好</strong>&nbsp;子集的数目对<em>&nbsp;</em><code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;的结果。</p>\n\n<p><code>nums</code>&nbsp;中的 <strong>子集</strong>&nbsp;是通过删除 <code>nums</code>&nbsp;中一些（可能一个都不删除，也可能全部都删除）元素后剩余元素组成的数组。如果两个子集删除的下标不同，那么它们被视为不同的子集。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,2,3,4]\n<b>输出：</b>6\n<b>解释：</b>好子集为：\n- [1,2]：乘积为 2 ，可以表示为质数 2 的乘积。\n- [1,2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n- [1,3]：乘积为 3 ，可以表示为质数 3 的乘积。\n- [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n- [2,3]：乘积为 6 ，可以表示为互不相同的质数 2 和 3 的乘积。\n- [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [4,2,3,15]\n<b>输出：</b>5\n<b>解释：</b>好子集为：\n- [2]：乘积为 2 ，可以表示为质数 2 的乘积。\n- [2,3]：乘积为 6 ，可以表示为互不相同质数 2 和 3 的乘积。\n- [2,15]：乘积为 30 ，可以表示为互不相同质数 2，3 和 5 的乘积。\n- [3]：乘积为 3 ，可以表示为质数 3 的乘积。\n- [15]：乘积为 15 ，可以表示为互不相同质数 3 和 5 的乘积。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 30</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1995.统计特殊四元组",
        "hardRate": "EASY",
        "passRate": "66.29%",
        "problemsUrl": "https://leetcode.cn/problems/count-special-quadruplets/",
        "solutionsUrl": "https://leetcode.cn/problems/count-special-quadruplets/solution",
        "problemsDesc": "<p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>nums</code> ，返回满足下述条件的 <strong>不同</strong> 四元组 <code>(a, b, c, d)</code> 的 <strong>数目</strong> ：</p>\n\n<ul>\n\t<li><code>nums[a] + nums[b] + nums[c] == nums[d]</code> ，且</li>\n\t<li><code>a &lt; b &lt; c &lt; d</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,3,6]\n<strong>输出：</strong>1\n<strong>解释：</strong>满足要求的唯一一个四元组是 (0, 1, 2, 3) 因为 1 + 2 + 3 == 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,3,6,4,5]\n<strong>输出：</strong>0\n<strong>解释：</strong>[3,3,6,4,5] 中不存在满足要求的四元组。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,1,1,3,5]\n<strong>输出：</strong>4\n<strong>解释：</strong>满足要求的 4 个四元组如下：\n- (0, 1, 2, 3): 1 + 1 + 1 == 3\n- (0, 1, 3, 4): 1 + 1 + 3 == 5\n- (0, 2, 3, 4): 1 + 1 + 3 == 5\n- (1, 2, 3, 4): 1 + 1 + 3 == 5\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>4 &lt;= nums.length &lt;= 50</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1996.游戏中弱角色的数量",
        "hardRate": "MEDIUM",
        "passRate": "41.50%",
        "problemsUrl": "https://leetcode.cn/problems/the-number-of-weak-characters-in-the-game/",
        "solutionsUrl": "https://leetcode.cn/problems/the-number-of-weak-characters-in-the-game/solution",
        "problemsDesc": "<p>你正在参加一个多角色游戏，每个角色都有两个主要属性：<strong>攻击</strong> 和 <strong>防御</strong> 。给你一个二维整数数组 <code>properties</code> ，其中 <code>properties[i] = [attack<sub>i</sub>, defense<sub>i</sub>]</code> 表示游戏中第 <code>i</code> 个角色的属性。</p>\n\n<p>如果存在一个其他角色的攻击和防御等级 <strong>都严格高于</strong> 该角色的攻击和防御等级，则认为该角色为 <strong>弱角色</strong> 。更正式地，如果认为角色 <code>i</code> <strong>弱于</strong> 存在的另一个角色 <code>j</code> ，那么 <code>attack<sub>j</sub> &gt; attack<sub>i</sub></code> 且 <code>defense<sub>j</sub> &gt; defense<sub>i</sub></code> 。</p>\n\n<p>返回 <strong>弱角色</strong> 的数量。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>properties = [[5,5],[6,3],[3,6]]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在攻击和防御都严格高于其他角色的角色。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>properties = [[2,2],[3,3]]\n<strong>输出：</strong>1\n<strong>解释：</strong>第一个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>properties = [[1,5],[10,4],[4,3]]\n<strong>输出：</strong>1\n<strong>解释：</strong>第三个角色是弱角色，因为第二个角色的攻击和防御严格大于该角色。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= properties.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>properties[i].length == 2</code></li>\n\t<li><code>1 &lt;= attack<sub>i</sub>, defense<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1997.访问完所有房间的第一天",
        "hardRate": "MEDIUM",
        "passRate": "35.23%",
        "problemsUrl": "https://leetcode.cn/problems/first-day-where-you-have-been-in-all-the-rooms/",
        "solutionsUrl": "https://leetcode.cn/problems/first-day-where-you-have-been-in-all-the-rooms/solution",
        "problemsDesc": "<p>你需要访问&nbsp;<code>n</code> 个房间，房间从 <code>0</code> 到 <code>n - 1</code> 编号。同时，每一天都有一个日期编号，从 <code>0</code> 开始，依天数递增。你每天都会访问一个房间。</p>\n\n<p>最开始的第 <code>0</code> 天，你访问&nbsp;<code>0</code> 号房间。给你一个长度为 <code>n</code> 且 <strong>下标从 0 开始</strong> 的数组 <code>nextVisit</code> 。在接下来的几天中，你访问房间的 <strong>次序</strong> 将根据下面的 <strong>规则</strong> 决定：</p>\n\n<ul>\n\t<li>假设某一天，你访问&nbsp;<code>i</code> 号房间。</li>\n\t<li>如果算上本次访问，访问&nbsp;<code>i</code> 号房间的次数为 <strong>奇数</strong> ，那么 <strong>第二天</strong> 需要访问&nbsp;<code>nextVisit[i]</code> 所指定的房间，其中 <code>0 &lt;= nextVisit[i] &lt;= i</code> 。</li>\n\t<li>如果算上本次访问，访问&nbsp;<code>i</code> 号房间的次数为 <strong>偶数</strong> ，那么 <strong>第二天</strong> 需要访问&nbsp;<code>(i + 1) mod n</code> 号房间。</li>\n</ul>\n\n<p>请返回你访问完所有房间的第一天的日期编号。题目数据保证总是存在这样的一天。由于答案可能很大，返回对 <code>10<sup>9</sup> + 7</code> 取余后的结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nextVisit = [0,0]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n- 第 0 天，你访问房间 0 。访问 0 号房间的总次数为 1 ，次数为奇数。\n&nbsp; 下一天你需要访问房间的编号是 nextVisit[0] = 0\n- 第 1 天，你访问房间 0 。访问 0 号房间的总次数为 2 ，次数为偶数。\n&nbsp; 下一天你需要访问房间的编号是 (0 + 1) mod 2 = 1\n- 第 2 天，你访问房间 1 。这是你第一次完成访问所有房间的那天。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nextVisit = [0,0,2]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n你每天访问房间的次序是 [0,0,1,0,0,1,2,...] 。\n第 6 天是你访问完所有房间的第一天。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nextVisit = [0,1,2,0]\n<strong>输出：</strong>6\n<strong>解释：</strong>\n你每天访问房间的次序是 [0,0,1,1,2,2,3,...] 。\n第 6 天是你访问完所有房间的第一天。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nextVisit.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nextVisit[i] &lt;= i</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1998.数组的最大公因数排序",
        "hardRate": "HARD",
        "passRate": "45.87%",
        "problemsUrl": "https://leetcode.cn/problems/gcd-sort-of-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/gcd-sort-of-an-array/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，你可以在 <code>nums</code> 上执行下述操作 <strong>任意次</strong> ：</p>\n\n<ul>\n\t<li>如果 <code>gcd(nums[i], nums[j]) &gt; 1</code> ，交换 <code>nums[i]</code> 和 <code>nums[j]</code> 的位置。其中 <code>gcd(nums[i], nums[j])</code> 是&nbsp;<code>nums[i]</code> 和 <code>nums[j]</code> 的最大公因数。</li>\n</ul>\n\n<p>如果能使用上述交换方式将 <code>nums</code> 按 <strong>非递减顺序</strong> 排列，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [7,21,3]\n<strong>输出：</strong>true\n<strong>解释：</strong>可以执行下述操作完成对 [7,21,3] 的排序：\n- 交换 7 和 21 因为 gcd(7,21) = 7 。nums = [<em><strong>21</strong></em>,<em><strong>7</strong></em>,3]\n- 交换 21 和 3 因为 gcd(21,3) = 3 。nums = [<em><strong>3</strong></em>,7,<em><strong>21</strong></em>]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [5,2,6,2]\n<strong>输出：</strong>false\n<strong>解释：</strong>无法完成排序，因为 5 不能与其他元素交换。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [10,5,9,3,15]\n<strong>输出：</strong>true\n<strong>解释：</strong>\n可以执行下述操作完成对 [10,5,9,3,15] 的排序：\n- 交换 10 和 15 因为 gcd(10,15) = 5 。nums = [<em><strong>15</strong></em>,5,9,3,<em><strong>10</strong></em>]\n- 交换 15 和 3 因为 gcd(15,3) = 3 。nums = [<em><strong>3</strong></em>,5,9,<em><strong>15</strong></em>,10]\n- 交换 10 和 15 因为 gcd(10,15) = 5 。nums = [3,5,9,<em><strong>10</strong></em>,<em><strong>15</strong></em>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>2 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 1999.最小的仅由两个数组成的倍数",
        "hardRate": "MEDIUM",
        "passRate": "47.00%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-greater-multiple-made-of-two-digits/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-greater-multiple-made-of-two-digits/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2000.反转单词前缀",
        "hardRate": "EASY",
        "passRate": "77.39%",
        "problemsUrl": "https://leetcode.cn/problems/reverse-prefix-of-word/",
        "solutionsUrl": "https://leetcode.cn/problems/reverse-prefix-of-word/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>word</code> 和一个字符 <code>ch</code> 。找出 <code>ch</code> 第一次出现的下标 <code>i</code> ，<strong>反转 </strong><code>word</code> 中从下标 <code>0</code> 开始、直到下标 <code>i</code> 结束（含下标 <code>i</code> ）的那段字符。如果 <code>word</code> 中不存在字符 <code>ch</code> ，则无需进行任何操作。</p>\n\n<ul>\n\t<li>例如，如果 <code>word = \"abcdefd\"</code> 且 <code>ch = \"d\"</code> ，那么你应该 <strong>反转</strong> 从下标 0 开始、直到下标 <code>3</code> 结束（含下标 <code>3</code> ）。结果字符串将会是 <code>\"<em><strong>dcba</strong></em>efd\"</code> 。</li>\n</ul>\n\n<p>返回 <strong>结果字符串</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>word = \"<em><strong>abcd</strong></em>efd\", ch = \"d\"\n<strong>输出：</strong>\"<em><strong>dcba</strong></em>efd\"\n<strong>解释：</strong>\"d\" 第一次出现在下标 3 。 \n反转从下标 0 到下标 3（含下标 3）的这段字符，结果字符串是 \"dcbaefd\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>word = \"<em><strong>xyxz</strong></em>xe\", ch = \"z\"\n<strong>输出：</strong>\"<em><strong>zxyx</strong></em>xe\"\n<strong>解释：</strong>\"z\" 第一次也是唯一一次出现是在下标 3 。\n反转从下标 0 到下标 3（含下标 3）的这段字符，结果字符串是 \"zxyxxe\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>word = \"abcd\", ch = \"z\"\n<strong>输出：</strong>\"abcd\"\n<strong>解释：</strong>\"z\" 不存在于 word 中。\n无需执行反转操作，结果字符串是 \"abcd\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 250</code></li>\n\t<li><code>word</code> 由小写英文字母组成</li>\n\t<li><code>ch</code> 是一个小写英文字母</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2001.可互换矩形的组数",
        "hardRate": "MEDIUM",
        "passRate": "38.96%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-pairs-of-interchangeable-rectangles/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-pairs-of-interchangeable-rectangles/solution",
        "problemsDesc": "<p>用一个下标从 <strong>0</strong> 开始的二维整数数组&nbsp;<code>rectangles</code> 来表示 <code>n</code> 个矩形，其中 <code>rectangles[i] = [width<sub>i</sub>, height<sub>i</sub>]</code> 表示第 <code>i</code> 个矩形的宽度和高度。</p>\n\n<p>如果两个矩形 <code>i</code> 和 <code>j</code>（<code>i &lt; j</code>）的宽高比相同，则认为这两个矩形 <strong>可互换</strong> 。更规范的说法是，两个矩形满足&nbsp;<code>width<sub>i</sub>/height<sub>i</sub> == width<sub>j</sub>/height<sub>j</sub></code>（使用实数除法而非整数除法），则认为这两个矩形 <strong>可互换</strong> 。</p>\n\n<p>计算并返回&nbsp;<code>rectangles</code> 中有多少对 <strong>可互换 </strong>矩形。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>rectangles = [[4,8],[3,6],[10,20],[15,30]]\n<strong>输出：</strong>6\n<strong>解释：</strong>下面按下标（从 0 开始）列出可互换矩形的配对情况：\n- 矩形 0 和矩形 1 ：4/8 == 3/6\n- 矩形 0 和矩形 2 ：4/8 == 10/20\n- 矩形 0 和矩形 3 ：4/8 == 15/30\n- 矩形 1 和矩形 2 ：3/6 == 10/20\n- 矩形 1 和矩形 3 ：3/6 == 15/30\n- 矩形 2 和矩形 3 ：10/20 == 15/30\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>rectangles = [[4,5],[7,8]]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在成对的可互换矩形。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == rectangles.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>rectangles[i].length == 2</code></li>\n\t<li><code>1 &lt;= width<sub>i</sub>, height<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2002.两个回文子序列长度的最大乘积",
        "hardRate": "MEDIUM",
        "passRate": "60.34%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-product-of-the-length-of-two-palindromic-subsequences/solution",
        "problemsDesc": "<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，请你找到&nbsp;<code>s</code>&nbsp;中两个&nbsp;<strong>不相交回文子序列</strong>&nbsp;，使得它们长度的&nbsp;<strong>乘积最大</strong>&nbsp;。两个子序列在原字符串中如果没有任何相同下标的字符，则它们是&nbsp;<strong>不相交</strong>&nbsp;的。</p>\n\n<p>请你返回两个回文子序列长度可以达到的<strong>&nbsp;最大乘积</strong>&nbsp;。</p>\n\n<p><strong>子序列</strong>&nbsp;指的是从原字符串中删除若干个字符（可以一个也不删除）后，剩余字符不改变顺序而得到的结果。如果一个字符串从前往后读和从后往前读一模一样，那么这个字符串是一个 <strong>回文字符串</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/08/24/two-palindromic-subsequences.png\" style=\"width: 550px; height: 124px;\"></p>\n\n<pre><b>输入：</b>s = \"leetcodecom\"\n<b>输出：</b>9\n<b>解释：</b>最优方案是选择 \"ete\" 作为第一个子序列，\"cdc\" 作为第二个子序列。\n它们的乘积为 3 * 3 = 9 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>s = \"bb\"\n<b>输出：</b>1\n<b>解释：</b>最优方案为选择 \"b\" （第一个字符）作为第一个子序列，\"b\" （第二个字符）作为第二个子序列。\n它们的乘积为 1 * 1 = 1 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>s = \"accbcaxxcxx\"\n<b>输出：</b>25\n<b>解释：</b>最优方案为选择 \"accca\" 作为第一个子序列，\"xxcxx\" 作为第二个子序列。\n它们的乘积为 5 * 5 = 25 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= s.length &lt;= 12</code></li>\n\t<li><code>s</code>&nbsp;只含有小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2003.每棵子树内缺失的最小基因值",
        "hardRate": "HARD",
        "passRate": "43.30%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-missing-genetic-value-in-each-subtree/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-missing-genetic-value-in-each-subtree/solution",
        "problemsDesc": "<p>有一棵根节点为 <code>0</code>&nbsp;的 <strong>家族树</strong>&nbsp;，总共包含 <code>n</code>&nbsp;个节点，节点编号为 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;。给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组 <code>parents</code>&nbsp;，其中&nbsp;<code>parents[i]</code>&nbsp;是节点 <code>i</code>&nbsp;的父节点。由于节点 <code>0</code>&nbsp;是 <strong>根</strong>&nbsp;，所以&nbsp;<code>parents[0] == -1</code>&nbsp;。</p>\n\n<p>总共有&nbsp;<code>10<sup>5</sup></code>&nbsp;个基因值，每个基因值都用 <strong>闭区间</strong>&nbsp;<code>[1, 10<sup>5</sup>]</code>&nbsp;中的一个整数表示。给你一个下标从&nbsp;<strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，其中&nbsp;<code>nums[i]</code>&nbsp;是节点 <code>i</code>&nbsp;的基因值，且基因值 <strong>互不相同</strong>&nbsp;。</p>\n\n<p>请你返回一个数组<em>&nbsp;</em><code>ans</code>&nbsp;，长度为&nbsp;<code>n</code>&nbsp;，其中&nbsp;<code>ans[i]</code>&nbsp;是以节点&nbsp;<code>i</code>&nbsp;为根的子树内 <b>缺失</b>&nbsp;的&nbsp;<strong>最小</strong>&nbsp;基因值。</p>\n\n<p>节点 <code>x</code>&nbsp;为根的 <strong>子树&nbsp;</strong>包含节点 <code>x</code>&nbsp;和它所有的 <strong>后代</strong>&nbsp;节点。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/23/case-1.png\" style=\"width: 204px; height: 167px;\"></p>\n\n<pre><b>输入：</b>parents = [-1,0,0,2], nums = [1,2,3,4]\n<b>输出：</b>[5,1,1,1]\n<b>解释：</b>每个子树答案计算结果如下：\n- 0：子树包含节点 [0,1,2,3] ，基因值分别为 [1,2,3,4] 。5 是缺失的最小基因值。\n- 1：子树只包含节点 1 ，基因值为 2 。1 是缺失的最小基因值。\n- 2：子树包含节点 [2,3] ，基因值分别为 [3,4] 。1 是缺失的最小基因值。\n- 3：子树只包含节点 3 ，基因值为 4 。1是缺失的最小基因值。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/08/23/case-2.png\" style=\"width: 247px; height: 168px;\"></p>\n\n<pre><b>输入：</b>parents = [-1,0,1,0,3,3], nums = [5,4,6,2,1,3]\n<b>输出：</b>[7,1,1,4,2,1]\n<b>解释：</b>每个子树答案计算结果如下：\n- 0：子树内包含节点 [0,1,2,3,4,5] ，基因值分别为 [5,4,6,2,1,3] 。7 是缺失的最小基因值。\n- 1：子树内包含节点 [1,2] ，基因值分别为 [4,6] 。 1 是缺失的最小基因值。\n- 2：子树内只包含节点 2 ，基因值为 6 。1 是缺失的最小基因值。\n- 3：子树内包含节点 [3,4,5] ，基因值分别为 [2,1,3] 。4 是缺失的最小基因值。\n- 4：子树内只包含节点 4 ，基因值为 1 。2 是缺失的最小基因值。\n- 5：子树内只包含节点 5 ，基因值为 3 。1 是缺失的最小基因值。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>parents = [-1,2,3,0,2,4,1], nums = [2,3,4,5,6,7,8]\n<b>输出：</b>[1,1,1,1,1,1,1]\n<b>解释：</b>所有子树都缺失基因值 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == parents.length == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li>对于&nbsp;<code>i != 0</code>&nbsp;，满足&nbsp;<code>0 &lt;= parents[i] &lt;= n - 1</code></li>\n\t<li><code>parents[0] == -1</code></li>\n\t<li><code>parents</code>&nbsp;表示一棵合法的树。</li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code>&nbsp;互不相同。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2004.职员招聘人数",
        "hardRate": "HARD",
        "passRate": "41.96%",
        "problemsUrl": "https://leetcode.cn/problems/the-number-of-seniors-and-juniors-to-join-the-company/",
        "solutionsUrl": "https://leetcode.cn/problems/the-number-of-seniors-and-juniors-to-join-the-company/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2005.斐波那契树的移除子树游戏",
        "hardRate": "HARD",
        "passRate": "50.28%",
        "problemsUrl": "https://leetcode.cn/problems/subtree-removal-game-with-fibonacci-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/subtree-removal-game-with-fibonacci-tree/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2006.差的绝对值为 K 的数对数目",
        "hardRate": "EASY",
        "passRate": "83.92%",
        "problemsUrl": "https://leetcode.cn/problems/count-number-of-pairs-with-absolute-difference-k/",
        "solutionsUrl": "https://leetcode.cn/problems/count-number-of-pairs-with-absolute-difference-k/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回数对&nbsp;<code>(i, j)</code>&nbsp;的数目，满足&nbsp;<code>i &lt; j</code>&nbsp;且&nbsp;<code>|nums[i] - nums[j]| == k</code>&nbsp;。</p>\n\n<p><code>|x|</code>&nbsp;的值定义为：</p>\n\n<ul>\n\t<li>如果&nbsp;<code>x &gt;= 0</code>&nbsp;，那么值为&nbsp;<code>x</code>&nbsp;。</li>\n\t<li>如果&nbsp;<code>x &lt; 0</code>&nbsp;，那么值为&nbsp;<code>-x</code>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [1,2,2,1], k = 1\n<b>输出：</b>4\n<b>解释：</b>差的绝对值为 1 的数对为：\n- [<em><strong>1</strong></em>,<em><strong>2</strong></em>,2,1]\n- [<em><strong>1</strong></em>,2,<em><strong>2</strong></em>,1]\n- [1,<em><strong>2</strong></em>,2,<em><strong>1</strong></em>]\n- [1,2,<em><strong>2</strong></em>,<em><strong>1</strong></em>]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,3], k = 3\n<b>输出：</b>0\n<b>解释：</b>没有任何数对差的绝对值为 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [3,2,1,5,4], k = 2\n<b>输出：</b>3\n<b>解释：</b>差的绝对值为 2 的数对为：\n- [<em><strong>3</strong></em>,2,<em><strong>1</strong></em>,5,4]\n- [<em><strong>3</strong></em>,2,1,<em><strong>5</strong></em>,4]\n- [3,<em><strong>2</strong></em>,1,5,<em><strong>4</strong></em>]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 200</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 99</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2007.从双倍数组中还原原数组",
        "hardRate": "MEDIUM",
        "passRate": "33.57%",
        "problemsUrl": "https://leetcode.cn/problems/find-original-array-from-doubled-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-original-array-from-doubled-array/solution",
        "problemsDesc": "<p>一个整数数组&nbsp;<code>original</code>&nbsp;可以转变成一个 <strong>双倍</strong>&nbsp;数组&nbsp;<code>changed</code>&nbsp;，转变方式为将 <code>original</code>&nbsp;中每个元素 <strong>值乘以 2 </strong>加入数组中，然后将所有元素 <strong>随机打乱</strong>&nbsp;。</p>\n\n<p>给你一个数组&nbsp;<code>changed</code>&nbsp;，如果&nbsp;<code>change</code>&nbsp;是&nbsp;<strong>双倍</strong>&nbsp;数组，那么请你返回&nbsp;<code>original</code>数组，否则请返回空数组。<code>original</code>&nbsp;的元素可以以&nbsp;<strong>任意</strong>&nbsp;顺序返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>changed = [1,3,4,2,6,8]\n<b>输出：</b>[1,3,4]\n<b>解释：</b>一个可能的 original 数组为 [1,3,4] :\n- 将 1 乘以 2 ，得到 1 * 2 = 2 。\n- 将 3 乘以 2 ，得到 3 * 2 = 6 。\n- 将 4 乘以 2 ，得到 4 * 2 = 8 。\n其他可能的原数组方案为 [4,3,1] 或者 [3,1,4] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>changed = [6,3,0,1]\n<b>输出：</b>[]\n<b>解释：</b>changed 不是一个双倍数组。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>changed = [1]\n<b>输出：</b>[]\n<b>解释：</b>changed 不是一个双倍数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= changed.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= changed[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2008.出租车的最大盈利",
        "hardRate": "MEDIUM",
        "passRate": "46.03%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-earnings-from-taxi/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-earnings-from-taxi/solution",
        "problemsDesc": "<p>你驾驶出租车行驶在一条有 <code>n</code>&nbsp;个地点的路上。这 <code>n</code>&nbsp;个地点从近到远编号为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;，你想要从 <code>1</code>&nbsp;开到 <code>n</code>&nbsp;，通过接乘客订单盈利。你只能沿着编号递增的方向前进，不能改变方向。</p>\n\n<p>乘客信息用一个下标从 <strong>0</strong>&nbsp;开始的二维数组&nbsp;<code>rides</code>&nbsp;表示，其中&nbsp;<code>rides[i] = [start<sub>i</sub>, end<sub>i</sub>, tip<sub>i</sub>]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;位乘客需要从地点&nbsp;<code>start<sub>i</sub></code>&nbsp;前往&nbsp;<code>end<sub>i</sub></code>&nbsp;，愿意支付&nbsp;<code>tip<sub>i</sub></code>&nbsp;元的小费。</p>\n\n<p><strong>每一位</strong> 你选择接单的乘客&nbsp;<code>i</code>&nbsp;，你可以 <strong>盈利</strong>&nbsp;<code>end<sub>i</sub> - start<sub>i</sub> + tip<sub>i</sub></code>&nbsp;元。你同时&nbsp;<strong>最多</strong>&nbsp;只能接一个订单。</p>\n\n<p>给你 <code>n</code>&nbsp;和 <code>rides</code>&nbsp;，请你返回在最优接单方案下，你能盈利&nbsp;<strong>最多</strong>&nbsp;多少元。</p>\n\n<p><strong>注意：</strong>你可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>n = 5, rides = [<em><strong>[2,5,4]</strong></em>,[1,5,1]]\n<b>输出：</b>7\n<b>解释：</b>我们可以接乘客 0 的订单，获得 5 - 2 + 4 = 7 元。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>n = 20, rides = [[1,6,1],<strong><em>[3,10,2]</em></strong>,<em><strong>[10,12,3]</strong></em>,[11,12,2],[12,15,2],<strong><em>[13,18,1]</em></strong>]\n<b>输出：</b>20\n<b>解释：</b>我们可以接以下乘客的订单：\n- 将乘客 1 从地点 3 送往地点 10 ，获得 10 - 3 + 2 = 9 元。\n- 将乘客 2 从地点 10 送往地点 12 ，获得 12 - 10 + 3 = 5 元。\n- 将乘客 5 从地点 13 送往地点 18 ，获得 18 - 13 + 1 = 6 元。\n我们总共获得 9 + 5 + 6 = 20 元。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= rides.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>rides[i].length == 3</code></li>\n\t<li><code>1 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= n</code></li>\n\t<li><code>1 &lt;= tip<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2009.使数组连续的最少操作数",
        "hardRate": "HARD",
        "passRate": "43.32%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-continuous/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-make-array-continuous/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;。每一次操作中，你可以将&nbsp;<code>nums</code>&nbsp;中&nbsp;<strong>任意</strong>&nbsp;一个元素替换成 <strong>任意&nbsp;</strong>整数。</p>\n\n<p>如果&nbsp;<code>nums</code>&nbsp;满足以下条件，那么它是 <strong>连续的</strong>&nbsp;：</p>\n\n<ul>\n\t<li><code>nums</code>&nbsp;中所有元素都是 <b>互不相同</b>&nbsp;的。</li>\n\t<li><code>nums</code>&nbsp;中 <strong>最大</strong>&nbsp;元素与&nbsp;<strong>最小</strong>&nbsp;元素的差等于&nbsp;<code>nums.length - 1</code>&nbsp;。</li>\n</ul>\n\n<p>比方说，<code>nums = [4, 2, 5, 3]</code>&nbsp;是 <strong>连续的</strong>&nbsp;，但是&nbsp;<code>nums = [1, 2, 3, 5, 6]</code> <strong>不是连续的</strong>&nbsp;。</p>\n\n<p>请你返回使 <code>nums</code>&nbsp;<strong>连续</strong>&nbsp;的 <strong>最少</strong>&nbsp;操作次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [4,2,5,3]\n<b>输出：</b>0\n<b>解释：</b>nums 已经是连续的了。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,2,3,5,6]\n<b>输出：</b>1\n<b>解释：</b>一个可能的解是将最后一个元素变为 4 。\n结果数组为 [1,2,3,5,4] ，是连续数组。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [1,10,100,1000]\n<b>输出：</b>3\n<b>解释：</b>一个可能的解是：\n- 将第二个元素变为 2 。\n- 将第三个元素变为 3 。\n- 将第四个元素变为 4 。\n结果数组为 [1,2,3,4] ，是连续数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2010.职员招聘人数 II",
        "hardRate": "HARD",
        "passRate": "61.23%",
        "problemsUrl": "https://leetcode.cn/problems/the-number-of-seniors-and-juniors-to-join-the-company-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/the-number-of-seniors-and-juniors-to-join-the-company-ii/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2011.执行操作后的变量值",
        "hardRate": "EASY",
        "passRate": "86.86%",
        "problemsUrl": "https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/final-value-of-variable-after-performing-operations/solution",
        "problemsDesc": "<p>存在一种仅支持 4 种操作和 1 个变量 <code>X</code> 的编程语言：</p>\n\n<ul>\n\t<li><code>++X</code> 和 <code>X++</code> 使变量 <code>X</code> 的值 <strong>加</strong> <code>1</code></li>\n\t<li><code>--X</code> 和 <code>X--</code> 使变量 <code>X</code> 的值 <strong>减</strong> <code>1</code></li>\n</ul>\n\n<p>最初，<code>X</code> 的值是 <code>0</code></p>\n\n<p>给你一个字符串数组 <code>operations</code> ，这是由操作组成的一个列表，返回执行所有操作后，<em> </em><code>X</code> 的 <strong>最终值</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"--X\",\"X++\",\"X++\"]\n<strong>输出：</strong>1\n<strong>解释：</strong>操作按下述步骤执行：\n最初，X = 0\n--X：X 减 1 ，X =  0 - 1 = -1\nX++：X 加 1 ，X = -1 + 1 =  0\nX++：X 加 1 ，X =  0 + 1 =  1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"++X\",\"++X\",\"X++\"]\n<strong>输出：</strong>3\n<strong>解释：</strong>操作按下述步骤执行： \n最初，X = 0\n++X：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\nX++：X 加 1 ，X = 2 + 1 = 3\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>operations = [\"X++\",\"++X\",\"--X\",\"X--\"]\n<strong>输出：</strong>0\n<strong>解释：</strong>操作按下述步骤执行：\n最初，X = 0\nX++：X 加 1 ，X = 0 + 1 = 1\n++X：X 加 1 ，X = 1 + 1 = 2\n--X：X 减 1 ，X = 2 - 1 = 1\nX--：X 减 1 ，X = 1 - 1 = 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= operations.length &lt;= 100</code></li>\n\t<li><code>operations[i]</code> 将会是 <code>\"++X\"</code>、<code>\"X++\"</code>、<code>\"--X\"</code> 或 <code>\"X--\"</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2012.数组美丽值求和",
        "hardRate": "MEDIUM",
        "passRate": "38.97%",
        "problemsUrl": "https://leetcode.cn/problems/sum-of-beauty-in-the-array/",
        "solutionsUrl": "https://leetcode.cn/problems/sum-of-beauty-in-the-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 。对于每个下标 <code>i</code>（<code>1 &lt;= i &lt;= nums.length - 2</code>），<code>nums[i]</code> 的 <strong>美丽值</strong> 等于：</p>\n\n<ul>\n\t<li><code>2</code>，对于所有 <code>0 &lt;= j &lt; i</code> 且 <code>i &lt; k &lt;= nums.length - 1</code> ，满足 <code>nums[j] &lt; nums[i] &lt; nums[k]</code></li>\n\t<li><code>1</code>，如果满足 <code>nums[i - 1] &lt; nums[i] &lt; nums[i + 1]</code> ，且不满足前面的条件</li>\n\t<li><code>0</code>，如果上述条件全部不满足</li>\n</ul>\n\n<p>返回符合 <code>1 &lt;= i &lt;= nums.length - 2</code> 的所有<em> </em><code>nums[i]</code><em> </em>的 <strong>美丽值的总和</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,3]\n<strong>输出：</strong>2\n<strong>解释：</strong>对于每个符合范围 1 &lt;= i &lt;= 1 的下标 i :\n- nums[1] 的美丽值等于 2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,4,6,4]\n<strong>输出：</strong>1\n<strong>解释：</strong>对于每个符合范围 1 &lt;= i &lt;= 2 的下标 i :\n- nums[1] 的美丽值等于 1\n- nums[2] 的美丽值等于 0\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,2,1]\n<strong>输出：</strong>0\n<strong>解释：</strong>对于每个符合范围 1 &lt;= i &lt;= 1 的下标 i :\n- nums[1] 的美丽值等于 0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2013.检测正方形",
        "hardRate": "MEDIUM",
        "passRate": "56.62%",
        "problemsUrl": "https://leetcode.cn/problems/detect-squares/",
        "solutionsUrl": "https://leetcode.cn/problems/detect-squares/solution",
        "problemsDesc": "<p>给你一个在 X-Y 平面上的点构成的数据流。设计一个满足下述要求的算法：</p>\n\n<ul>\n\t<li><strong>添加</strong> 一个在数据流中的新点到某个数据结构中<strong>。</strong>可以添加 <strong>重复</strong> 的点，并会视作不同的点进行处理。</li>\n\t<li>给你一个查询点，请你从数据结构中选出三个点，使这三个点和查询点一同构成一个 <strong>面积为正</strong> 的 <strong>轴对齐正方形</strong> ，<strong>统计</strong> 满足该要求的方案数目<strong>。</strong></li>\n</ul>\n\n<p><strong>轴对齐正方形</strong> 是一个正方形，除四条边长度相同外，还满足每条边都与 x-轴 或 y-轴 平行或垂直。</p>\n\n<p>实现 <code>DetectSquares</code> 类：</p>\n\n<ul>\n\t<li><code>DetectSquares()</code> 使用空数据结构初始化对象</li>\n\t<li><code>void add(int[] point)</code> 向数据结构添加一个新的点 <code>point = [x, y]</code></li>\n\t<li><code>int count(int[] point)</code> 统计按上述方式与点 <code>point = [x, y]</code> 共同构造 <strong>轴对齐正方形</strong> 的方案数。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/01/image.png\" style=\"width: 869px; height: 504px;\" />\n<pre>\n<strong>输入：</strong>\n[\"DetectSquares\", \"add\", \"add\", \"add\", \"count\", \"count\", \"add\", \"count\"]\n[[], [[3, 10]], [[11, 2]], [[3, 2]], [[11, 10]], [[14, 8]], [[11, 2]], [[11, 10]]]\n<strong>输出：</strong>\n[null, null, null, null, 1, 0, null, 2]\n\n<strong>解释：</strong>\nDetectSquares detectSquares = new DetectSquares();\ndetectSquares.add([3, 10]);\ndetectSquares.add([11, 2]);\ndetectSquares.add([3, 2]);\ndetectSquares.count([11, 10]); // 返回 1 。你可以选择：\n                               //   - 第一个，第二个，和第三个点\ndetectSquares.count([14, 8]);  // 返回 0 。查询点无法与数据结构中的这些点构成正方形。\ndetectSquares.add([11, 2]);    // 允许添加重复的点。\ndetectSquares.count([11, 10]); // 返回 2 。你可以选择：\n                               //   - 第一个，第二个，和第三个点\n                               //   - 第一个，第三个，和第四个点\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>point.length == 2</code></li>\n\t<li><code>0 &lt;= x, y &lt;= 1000</code></li>\n\t<li>调用&nbsp;<code>add</code> 和 <code>count</code> 的 <strong>总次数</strong> 最多为 <code>5000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2014.重复 K 次的最长子序列",
        "hardRate": "HARD",
        "passRate": "54.56%",
        "problemsUrl": "https://leetcode.cn/problems/longest-subsequence-repeated-k-times/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-subsequence-repeated-k-times/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code> 的字符串 <code>s</code> ，和一个整数 <code>k</code> 。请你找出字符串 <code>s</code> 中 <strong>重复</strong> <code>k</code> 次的 <strong>最长子序列</strong> 。</p>\n\n<p><strong>子序列</strong> 是由其他字符串删除某些（或不删除）字符派生而来的一个字符串。</p>\n\n<p>如果&nbsp;<code>seq * k</code> 是 <code>s</code> 的一个子序列，其中 <code>seq * k</code> 表示一个由 <code>seq</code> 串联 <code>k</code>&nbsp;次构造的字符串，那么就称 <code>seq</code><strong> </strong>是字符串 <code>s</code> 中一个 <strong>重复 <code>k</code> 次</strong> 的子序列。</p>\n\n<ul>\n\t<li>举个例子，<code>\"bba\"</code> 是字符串 <code>\"bababcba\"</code> 中的一个重复 <code>2</code> 次的子序列，因为字符串 <code>\"bbabba\"</code> 是由 <code>\"bba\"</code> 串联 <code>2</code> 次构造的，而&nbsp;<code>\"bbabba\"</code> 是字符串 <code>\"<em><strong>b</strong></em>a<em><strong>bab</strong></em>c<em><strong>ba</strong></em>\"</code> 的一个子序列。</li>\n</ul>\n\n<p>返回字符串 <code>s</code> 中 <strong>重复 k 次的最长子序列</strong>&nbsp; 。如果存在多个满足的子序列，则返回 <strong>字典序最大</strong> 的那个。如果不存在这样的子序列，返回一个 <strong>空</strong> 字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example 1\" src=\"https://assets.leetcode.com/uploads/2021/08/30/longest-subsequence-repeat-k-times.png\" style=\"width: 457px; height: 99px;\" /></p>\n\n<pre>\n<strong>输入：</strong>s = \"letsleetcode\", k = 2\n<strong>输出：</strong>\"let\"\n<strong>解释：</strong>存在两个最长子序列重复 2 次：let\" 和 \"ete\" 。\n\"let\" 是其中字典序最大的一个。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"bb\", k = 2\n<strong>输出：</strong>\"b\"\n<strong>解释：</strong>重复 2 次的最长子序列是 \"b\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ab\", k = 2\n<strong>输出：</strong>\"\"\n<strong>解释：</strong>不存在重复 2 次的最长子序列。返回空字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == s.length</code></li>\n\t<li><code>2 &lt;= k &lt;= 2000</code></li>\n\t<li><code>2 &lt;= n &lt; k * 8</code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2015.每段建筑物的平均高度",
        "hardRate": "MEDIUM",
        "passRate": "57.34%",
        "problemsUrl": "https://leetcode.cn/problems/average-height-of-buildings-in-each-segment/",
        "solutionsUrl": "https://leetcode.cn/problems/average-height-of-buildings-in-each-segment/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2016.增量元素之间的最大差值",
        "hardRate": "EASY",
        "passRate": "59.68%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-difference-between-increasing-elements/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-difference-between-increasing-elements/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，该数组的大小为 <code>n</code> ，请你计算 <code>nums[j] - nums[i]</code> 能求得的 <strong>最大差值 </strong>，其中 <code>0 &lt;= i &lt; j &lt; n</code> 且 <code>nums[i] &lt; nums[j]</code> 。</p>\n\n<p>返回 <strong>最大差值</strong> 。如果不存在满足要求的 <code>i</code> 和 <code>j</code> ，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [7,<em><strong>1</strong></em>,<em><strong>5</strong></em>,4]\n<strong>输出：</strong>4\n<strong>解释：</strong>\n最大差值出现在 i = 1 且 j = 2 时，nums[j] - nums[i] = 5 - 1 = 4 。\n注意，尽管 i = 1 且 j = 0 时 ，nums[j] - nums[i] = 7 - 1 = 6 &gt; 4 ，但 i &gt; j 不满足题面要求，所以 6 不是有效的答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [9,4,3,2]\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n不存在同时满足 i &lt; j 和 nums[i] &lt; nums[j] 这两个条件的 i, j 组合。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [<em><strong>1</strong></em>,5,2,<em><strong>10</strong></em>]\n<strong>输出：</strong>9\n<strong>解释：</strong>\n最大差值出现在 i = 0 且 j = 3 时，nums[j] - nums[i] = 10 - 1 = 9 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2017.网格游戏",
        "hardRate": "MEDIUM",
        "passRate": "38.59%",
        "problemsUrl": "https://leetcode.cn/problems/grid-game/",
        "solutionsUrl": "https://leetcode.cn/problems/grid-game/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的二维数组 <code>grid</code> ，数组大小为 <code>2 x n</code> ，其中 <code>grid[r][c]</code> 表示矩阵中 <code>(r, c)</code> 位置上的点数。现在有两个机器人正在矩阵上参与一场游戏。</p>\n\n<p>两个机器人初始位置都是 <code>(0, 0)</code> ，目标位置是 <code>(1, n-1)</code> 。每个机器人只会 <strong>向右</strong> (<code>(r, c)</code> 到 <code>(r, c + 1)</code>) 或 <strong>向下 </strong>(<code>(r, c)</code> 到 <code>(r + 1, c)</code>) 。</p>\n\n<p>游戏开始，<strong>第一个</strong> 机器人从 <code>(0, 0)</code> 移动到 <code>(1, n-1)</code> ，并收集路径上单元格的全部点数。对于路径上所有单元格 <code>(r, c)</code> ，途经后 <code>grid[r][c]</code> 会重置为 <code>0</code> 。然后，<strong>第二个</strong> 机器人从 <code>(0, 0)</code> 移动到 <code>(1, n-1)</code> ，同样收集路径上单元的全部点数。注意，它们的路径可能会存在相交的部分。</p>\n\n<p><strong>第一个</strong> 机器人想要打击竞争对手，使 <strong>第二个</strong> 机器人收集到的点数 <strong>最小化</strong> 。与此相对，<strong>第二个</strong> 机器人想要 <strong>最大化</strong> 自己收集到的点数。两个机器人都发挥出自己的 <strong>最佳水平</strong>&nbsp;的前提下，返回 <strong>第二个</strong> 机器人收集到的 <strong>点数</strong> <em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/08/a1.png\" style=\"width: 388px; height: 103px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[2,5,4],[1,5,1]]\n<strong>输出：</strong>4\n<strong>解释：</strong>第一个机器人的最佳路径如红色所示，第二个机器人的最佳路径如蓝色所示。\n第一个机器人访问过的单元格将会重置为 0 。\n第二个机器人将会收集到 0 + 0 + 4 + 0 = 4 个点。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/08/a2.png\" style=\"width: 384px; height: 105px;\" />\n<pre>\n<strong>输入：</strong>grid = [[3,3,1],[8,5,2]]\n<strong>输出：</strong>4\n<strong>解释：</strong>第一个机器人的最佳路径如红色所示，第二个机器人的最佳路径如蓝色所示。 \n第一个机器人访问过的单元格将会重置为 0 。\n第二个机器人将会收集到 0 + 3 + 1 + 0 = 4 个点。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/08/a3.png\" style=\"width: 493px; height: 103px;\" />\n<pre>\n<strong>输入：</strong>grid = [[1,3,1,15],[1,3,3,1]]\n<strong>输出：</strong>7\n<strong>解释：</strong>第一个机器人的最佳路径如红色所示，第二个机器人的最佳路径如蓝色所示。\n第一个机器人访问过的单元格将会重置为 0 。\n第二个机器人将会收集到 0 + 1 + 3 + 3 + 0 = 7 个点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>grid.length == 2</code></li>\n\t<li><code>n == grid[r].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= grid[r][c] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2018.判断单词是否能放入填字游戏内",
        "hardRate": "MEDIUM",
        "passRate": "42.27%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-word-can-be-placed-in-crossword/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-word-can-be-placed-in-crossword/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>m x n</code>&nbsp;的矩阵&nbsp;<code>board</code>&nbsp;，它代表一个填字游戏&nbsp;<strong>当前</strong>&nbsp;的状态。填字游戏格子中包含小写英文字母（已填入的单词），表示&nbsp;<strong>空</strong>&nbsp;格的&nbsp;<code>' '</code>&nbsp;和表示&nbsp;<strong>障碍</strong>&nbsp;格子的&nbsp;<code>'#'</code>&nbsp;。</p>\n\n<p>如果满足以下条件，那么我们可以 <strong>水平</strong>&nbsp;（从左到右 <strong>或者</strong>&nbsp;从右到左）或 <strong>竖直</strong>&nbsp;（从上到下 <strong>或者</strong>&nbsp;从下到上）填入一个单词：</p>\n\n<ul>\n\t<li>该单词不占据任何&nbsp;<code>'#'</code>&nbsp;对应的格子。</li>\n\t<li>每个字母对应的格子要么是&nbsp;<code>' '</code>&nbsp;（空格）要么与 <code>board</code>&nbsp;中已有字母 <strong>匹配</strong>&nbsp;。</li>\n\t<li>如果单词是 <strong>水平</strong>&nbsp;放置的，那么该单词左边和右边 <strong>相邻</strong>&nbsp;格子不能为&nbsp;<code>' '</code>&nbsp;或小写英文字母。</li>\n\t<li>如果单词是&nbsp;<strong>竖直</strong>&nbsp;放置的，那么该单词上边和下边&nbsp;<strong>相邻</strong><strong>&nbsp;</strong>格子不能为&nbsp;<code>' '</code>&nbsp;或小写英文字母。</li>\n</ul>\n\n<p>给你一个字符串&nbsp;<code>word</code>&nbsp;，如果&nbsp;<code>word</code>&nbsp;可以被放入&nbsp;<code>board</code>&nbsp;中，请你返回&nbsp;<code>true</code>&nbsp;，否则请返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/18/crossword-1.png\" style=\"width: 170px; height: 150px;\" /></p>\n\n<pre>\n<b>输入：</b>board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \"c\", \" \"]], word = \"abc\"\n<b>输出：</b>true\n<b>解释：</b>单词 \"abc\" 可以如上图放置（从上往下）。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/18/c2.png\" style=\"width: 170px; height: 151px;\" /></p>\n\n<pre>\n<b>输入：</b>board = [[\" \", \"#\", \"a\"], [\" \", \"#\", \"c\"], [\" \", \"#\", \"a\"]], word = \"ac\"\n<b>输出：</b>false\n<b>解释：</b>无法放置单词，因为放置该单词后上方或者下方相邻格会有空格。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/18/crossword-2.png\" style=\"width: 171px; height: 146px;\" /></p>\n\n<pre>\n<b>输入：</b>board = [[\"#\", \" \", \"#\"], [\" \", \" \", \"#\"], [\"#\", \" \", \"c\"]], word = \"ca\"\n<b>输出：</b>true\n<b>解释：</b>单词 \"ca\" 可以如上图放置（从右到左）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>board[i][j]</code>&nbsp;可能为&nbsp;<code>' '</code>&nbsp;，<code>'#'</code>&nbsp;或者一个小写英文字母。</li>\n\t<li><code>1 &lt;= word.length &lt;= max(m, n)</code></li>\n\t<li><code>word</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2019.解出数学表达式的学生分数",
        "hardRate": "HARD",
        "passRate": "37.66%",
        "problemsUrl": "https://leetcode.cn/problems/the-score-of-students-solving-math-expression/",
        "solutionsUrl": "https://leetcode.cn/problems/the-score-of-students-solving-math-expression/solution",
        "problemsDesc": "<p>给你一个字符串&nbsp;<code>s</code>&nbsp;，它 <strong>只</strong> 包含数字&nbsp;<code>0-9</code>&nbsp;，加法运算符&nbsp;<code>'+'</code>&nbsp;和乘法运算符&nbsp;<code>'*'</code>&nbsp;，这个字符串表示一个&nbsp;<strong>合法</strong>&nbsp;的只含有&nbsp;<strong>个位数</strong><strong>数字</strong>&nbsp;的数学表达式（比方说&nbsp;<code>3+5*2</code>）。有 <code>n</code>&nbsp;位小学生将计算这个数学表达式，并遵循如下 <strong>运算顺序</strong>&nbsp;：</p>\n\n<ol>\n\t<li>按照 <strong>从左到右</strong>&nbsp;的顺序计算 <strong>乘法</strong>&nbsp;，然后</li>\n\t<li>按照 <strong>从左到右</strong>&nbsp;的顺序计算 <strong>加法</strong>&nbsp;。</li>\n</ol>\n\n<p>给你一个长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>answers</code>&nbsp;，表示每位学生提交的答案。你的任务是给 <code>answer</code>&nbsp;数组按照如下 <strong>规则</strong>&nbsp;打分：</p>\n\n<ul>\n\t<li>如果一位学生的答案 <strong>等于</strong>&nbsp;表达式的正确结果，这位学生将得到 <code>5</code>&nbsp;分。</li>\n\t<li>否则，如果答案由&nbsp;<strong>一处或多处错误的运算顺序</strong>&nbsp;计算得到，那么这位学生能得到 <code>2</code>&nbsp;分。</li>\n\t<li>否则，这位学生将得到 <code>0</code>&nbsp;分。</li>\n</ul>\n\n<p>请你返回所有学生的分数和。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/17/student_solving_math.png\" style=\"width: 678px; height: 109px;\"></p>\n\n<pre><b>输入：</b>s = \"7+3*1*2\", answers = [20,13,42]\n<b>输出：</b>7\n<b>解释：</b>如上图所示，正确答案为 13 ，因此有一位学生得分为 5 分：[20,<em><strong>13</strong></em>,42] 。\n一位学生可能通过错误的运算顺序得到结果 20 ：7+3=10，10*1=10，10*2=20 。所以这位学生得分为 2 分：[<em><strong>20</strong></em>,13,42] 。\n所有学生得分分别为：[2,5,0] 。所有得分之和为 2+5+0=7 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>s = \"3+5*2\", answers = [13,0,10,13,13,16,16]\n<b>输出：</b>19\n<b>解释：</b>表达式的正确结果为 13 ，所以有 3 位学生得到 5 分：[<em><strong>13</strong></em>,0,10,<em><strong>13</strong></em>,<em><strong>13</strong></em>,16,16] 。\n学生可能通过错误的运算顺序得到结果 16 ：3+5=8，8*2=16 。所以两位学生得到 2 分：[13,0,10,13,13,<em><strong>16</strong></em>,<em><strong>16</strong></em>] 。\n所有学生得分分别为：[5,0,0,5,5,2,2] 。所有得分之和为 5+0+0+5+5+2+2=19 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>s = \"6+0*1\", answers = [12,9,6,4,8,6]\n<b>输出：</b>10\n<b>解释：</b>表达式的正确结果为 6 。\n如果一位学生通过错误的运算顺序计算该表达式，结果仍为 6 。\n根据打分规则，运算顺序错误的学生也将得到 5 分（因为他们仍然得到了正确的结果），而不是 2 分。\n所有学生得分分别为：[0,0,5,0,0,5] 。所有得分之和为 10 分。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 31</code></li>\n\t<li><code>s</code>&nbsp;表示一个只包含&nbsp;<code>0-9</code>&nbsp;，<code>'+'</code>&nbsp;和&nbsp;<code>'*'</code>&nbsp;的合法表达式。</li>\n\t<li>表达式中所有整数运算数字都在闭区间&nbsp;<code>[0, 9]</code>&nbsp;以内。</li>\n\t<li><code>1 &lt;=</code>&nbsp;数学表达式中所有运算符数目（<code>'+'</code> 和&nbsp;<code>'*'</code>）&nbsp;<code>&lt;= 15</code></li>\n\t<li>测试数据保证正确表达式结果在范围&nbsp;<code>[0, 1000]</code>&nbsp;以内。</li>\n\t<li><code>n == answers.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= answers[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2020.无流量的帐户数",
        "hardRate": "MEDIUM",
        "passRate": "70.81%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-accounts-that-did-not-stream/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-accounts-that-did-not-stream/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2021.街上最亮的位置",
        "hardRate": "MEDIUM",
        "passRate": "63.03%",
        "problemsUrl": "https://leetcode.cn/problems/brightest-position-on-street/",
        "solutionsUrl": "https://leetcode.cn/problems/brightest-position-on-street/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2022.将一维数组转变成二维数组",
        "hardRate": "EASY",
        "passRate": "65.44%",
        "problemsUrl": "https://leetcode.cn/problems/convert-1d-array-into-2d-array/",
        "solutionsUrl": "https://leetcode.cn/problems/convert-1d-array-into-2d-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的一维整数数组&nbsp;<code>original</code>&nbsp;和两个整数&nbsp;<code>m</code>&nbsp;和&nbsp;&nbsp;<code>n</code>&nbsp;。你需要使用&nbsp;<code>original</code>&nbsp;中&nbsp;<strong>所有</strong>&nbsp;元素创建一个&nbsp;<code>m</code>&nbsp;行&nbsp;<code>n</code>&nbsp;列的二维数组。</p>\n\n<p><code>original</code>&nbsp;中下标从 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;（都 <strong>包含</strong> ）的元素构成二维数组的第一行，下标从 <code>n</code>&nbsp;到 <code>2 * n - 1</code>&nbsp;（都 <strong>包含</strong>&nbsp;）的元素构成二维数组的第二行，依此类推。</p>\n\n<p>请你根据上述过程返回一个<em>&nbsp;</em><code>m x n</code>&nbsp;的二维数组。如果无法构成这样的二维数组，请你返回一个空的二维数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2021/08/26/image-20210826114243-1.png\" style=\"width: 500px; height: 174px;\">\n<pre><b>输入：</b>original = [1,2,3,4], m = 2, n = 2\n<b>输出：</b>[[1,2],[3,4]]\n<strong>解释：\n</strong>构造出的二维数组应该包含 2 行 2 列。\noriginal 中第一个 n=2 的部分为 [1,2] ，构成二维数组的第一行。\noriginal 中第二个 n=2 的部分为 [3,4] ，构成二维数组的第二行。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>original = [1,2,3], m = 1, n = 3\n<b>输出：</b>[[1,2,3]]\n<b>解释：</b>\n构造出的二维数组应该包含 1 行 3 列。\n将 original 中所有三个元素放入第一行中，构成要求的二维数组。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>original = [1,2], m = 1, n = 1\n<b>输出：</b>[]\n<strong>解释：\n</strong>original 中有 2 个元素。\n无法将 2 个元素放入到一个 1x1 的二维数组中，所以返回一个空的二维数组。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><b>输入：</b>original = [3], m = 1, n = 2\n<b>输出：</b>[]\n<strong>解释：</strong>\noriginal 中只有 1 个元素。\n无法将 1 个元素放满一个 1x2 的二维数组，所以返回一个空的二维数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= original.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= original[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m, n &lt;= 4 * 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2023.连接后等于目标字符串的字符串对",
        "hardRate": "MEDIUM",
        "passRate": "74.25%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-pairs-of-strings-with-concatenation-equal-to-target/solution",
        "problemsDesc": "<p>给你一个 <strong>数字</strong>&nbsp;字符串数组 <code>nums</code>&nbsp;和一个 <strong>数字</strong>&nbsp;字符串 <code>target</code>&nbsp;，请你返回 <code>nums[i] + nums[j]</code>&nbsp;（两个字符串连接）结果等于 <code>target</code>&nbsp;的下标 <code>(i, j)</code>&nbsp;（需满足 <code>i != j</code>）的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [\"777\",\"7\",\"77\",\"77\"], target = \"7777\"\n<b>输出：</b>4\n<b>解释：</b>符合要求的下标对包括：\n- (0, 1)：\"777\" + \"7\"\n- (1, 0)：\"7\" + \"777\"\n- (2, 3)：\"77\" + \"77\"\n- (3, 2)：\"77\" + \"77\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [\"123\",\"4\",\"12\",\"34\"], target = \"1234\"\n<b>输出：</b>2\n<b>解释：</b>符合要求的下标对包括\n- (0, 1)：\"123\" + \"4\"\n- (2, 3)：\"12\" + \"34\"\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [\"1\",\"1\",\"1\"], target = \"11\"\n<b>输出：</b>6\n<b>解释：</b>符合要求的下标对包括\n- (0, 1)：\"1\" + \"1\"\n- (1, 0)：\"1\" + \"1\"\n- (0, 2)：\"1\" + \"1\"\n- (2, 0)：\"1\" + \"1\"\n- (1, 2)：\"1\" + \"1\"\n- (2, 1)：\"1\" + \"1\"\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 100</code></li>\n\t<li><code>2 &lt;= target.length &lt;= 100</code></li>\n\t<li><code>nums[i]</code>&nbsp;和&nbsp;<code>target</code>&nbsp;只包含数字。</li>\n\t<li><code>nums[i]</code>&nbsp;和&nbsp;<code>target</code>&nbsp;不含有任何前导 0 。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2024.考试的最大困扰度",
        "hardRate": "MEDIUM",
        "passRate": "57.28%",
        "problemsUrl": "https://leetcode.cn/problems/maximize-the-confusion-of-an-exam/",
        "solutionsUrl": "https://leetcode.cn/problems/maximize-the-confusion-of-an-exam/solution",
        "problemsDesc": "<p>一位老师正在出一场由 <code>n</code>&nbsp;道判断题构成的考试，每道题的答案为 true （用 <code><span style=\"\">'T'</span></code> 表示）或者 false （用 <code>'F'</code>&nbsp;表示）。老师想增加学生对自己做出答案的不确定性，方法是&nbsp;<strong>最大化&nbsp;</strong>有 <strong>连续相同</strong>&nbsp;结果的题数。（也就是连续出现 true 或者连续出现 false）。</p>\n\n<p>给你一个字符串&nbsp;<code>answerKey</code>&nbsp;，其中&nbsp;<code>answerKey[i]</code>&nbsp;是第 <code>i</code>&nbsp;个问题的正确结果。除此以外，还给你一个整数 <code>k</code>&nbsp;，表示你能进行以下操作的最多次数：</p>\n\n<ul>\n\t<li>每次操作中，将问题的正确答案改为&nbsp;<code>'T'</code> 或者&nbsp;<code>'F'</code>&nbsp;（也就是将 <code>answerKey[i]</code> 改为&nbsp;<code>'T'</code>&nbsp;或者&nbsp;<code>'F'</code>&nbsp;）。</li>\n</ul>\n\n<p>请你返回在不超过 <code>k</code>&nbsp;次操作的情况下，<strong>最大</strong>&nbsp;连续 <code>'T'</code>&nbsp;或者 <code>'F'</code>&nbsp;的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>answerKey = \"TTFF\", k = 2\n<b>输出：</b>4\n<b>解释：</b>我们可以将两个 'F' 都变为 'T' ，得到 answerKey = \"<em><strong>TTTT</strong></em>\" 。\n总共有四个连续的 'T' 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>answerKey = \"TFFT\", k = 1\n<b>输出：</b>3\n<b>解释：</b>我们可以将最前面的 'T' 换成 'F' ，得到 answerKey = \"<em><strong>FFF</strong></em>T\" 。\n或者，我们可以将第二个 'T' 换成 'F' ，得到 answerKey = \"T<em><strong>FFF</strong></em>\" 。\n两种情况下，都有三个连续的 'F' 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>answerKey = \"TTFTTFTT\", k = 1\n<b>输出：</b>5\n<b>解释：</b>我们可以将第一个 'F' 换成 'T' ，得到 answerKey = \"<em><strong>TTTTT</strong></em>FTT\" 。\n或者我们可以将第二个 'F' 换成 'T' ，得到 answerKey = \"TTF<em><strong>TTTTT</strong></em>\" 。\n两种情况下，都有五个连续的 'T' 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == answerKey.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>answerKey[i]</code>&nbsp;要么是&nbsp;<code>'T'</code> ，要么是&nbsp;<code>'F'</code></li>\n\t<li><code>1 &lt;= k &lt;= n</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2025.分割数组的最多方案数",
        "hardRate": "HARD",
        "passRate": "30.42%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-ways-to-partition-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-ways-to-partition-an-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始且长度为 <code>n</code>&nbsp;的整数数组&nbsp;<code>nums</code>&nbsp;。<strong>分割</strong>&nbsp;数组 <code>nums</code>&nbsp;的方案数定义为符合以下两个条件的 <code>pivot</code>&nbsp;数目：</p>\n\n<ul>\n\t<li><code>1 &lt;= pivot &lt; n</code></li>\n\t<li><code>nums[0] + nums[1] + ... + nums[pivot - 1] == nums[pivot] + nums[pivot + 1] + ... + nums[n - 1]</code></li>\n</ul>\n\n<p>同时给你一个整数&nbsp;<code>k</code>&nbsp;。你可以将&nbsp;<code>nums</code>&nbsp;中&nbsp;<strong>一个</strong>&nbsp;元素变为&nbsp;<code>k</code>&nbsp;或&nbsp;<strong>不改变</strong>&nbsp;数组。</p>\n\n<p>请你返回在 <strong>至多</strong>&nbsp;改变一个元素的前提下，<strong>最多</strong>&nbsp;有多少种方法 <strong>分割</strong>&nbsp;<code>nums</code>&nbsp;使得上述两个条件都满足。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [2,-1,2], k = 3\n<b>输出：</b>1\n<b>解释：</b>一个最优的方案是将 nums[0] 改为 k&nbsp;。数组变为 [<em><strong>3</strong></em>,-1,2] 。\n有一种方法分割数组：\n- pivot = 2 ，我们有分割 [3,-1 | 2]：3 + -1 == 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [0,0,0], k = 1\n<b>输出：</b>2\n<b>解释：</b>一个最优的方案是不改动数组。\n有两种方法分割数组：\n- pivot = 1 ，我们有分割 [0 | 0,0]：0 == 0 + 0 。\n- pivot = 2 ，我们有分割 [0,0 | 0]: 0 + 0 == 0 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [22,4,-25,-20,-15,15,-16,7,19,-10,0,-13,-14], k = -33\n<b>输出：</b>4\n<b>解释：</b>一个最优的方案是将 nums[2] 改为 k 。数组变为 [22,4,<em><strong>-33</strong></em>,-20,-15,15,-16,7,19,-10,0,-13,-14] 。\n有四种方法分割数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= k, nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2026.低质量的问题",
        "hardRate": "EASY",
        "passRate": "79.99%",
        "problemsUrl": "https://leetcode.cn/problems/low-quality-problems/",
        "solutionsUrl": "https://leetcode.cn/problems/low-quality-problems/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2027.转换字符串的最少操作次数",
        "hardRate": "EASY",
        "passRate": "66.97%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-moves-to-convert-string/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-moves-to-convert-string/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> ，由 <code>n</code> 个字符组成，每个字符不是 <code>'X'</code> 就是 <code>'O'</code> 。</p>\n\n<p>一次<strong> 操作</strong> 定义为从 <code>s</code> 中选出 <strong>三个连续字符 </strong>并将选中的每个字符都转换为 <code>'O'</code> 。注意，如果字符已经是 <code>'O'</code> ，只需要保持 <strong>不变</strong> 。</p>\n\n<p>返回将 <code>s</code> 中所有字符均转换为 <code>'O'</code> 需要执行的&nbsp;<strong>最少</strong>&nbsp;操作次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"XXX\"\n<strong>输出：</strong>1\n<strong>解释：<em>XXX</em></strong> -&gt; OOO\n一次操作，选中全部 3 个字符，并将它们转换为 <code>'O' 。</code>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"XXOX\"\n<strong>输出：</strong>2\n<strong>解释：<em>XXO</em></strong>X -&gt; O<em><strong>OOX</strong></em> -&gt; OOOO\n第一次操作，选择前 3 个字符，并将这些字符转换为 <code>'O'</code> 。\n然后，选中后 3 个字符，并执行转换。最终得到的字符串全由字符 <code>'O'</code> 组成。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"OOOO\"\n<strong>输出：</strong>0\n<strong>解释：</strong>s 中不存在需要转换的 <code>'X' 。</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s[i]</code> 为 <code>'X'</code> 或 <code>'O'</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2028.找出缺失的观测数据",
        "hardRate": "MEDIUM",
        "passRate": "50.68%",
        "problemsUrl": "https://leetcode.cn/problems/find-missing-observations/",
        "solutionsUrl": "https://leetcode.cn/problems/find-missing-observations/solution",
        "problemsDesc": "<p>现有一份 <code>n + m</code>&nbsp;次投掷单个<strong> 六面</strong> 骰子的观测数据，骰子的每个面从 <code>1</code> 到 <code>6</code> 编号。观测数据中缺失了 <code>n</code> 份，你手上只拿到剩余&nbsp;<code>m</code> 次投掷的数据。幸好你有之前计算过的这 <code>n + m</code> 次投掷数据的 <strong>平均值</strong> 。</p>\n\n<p>给你一个长度为 <code>m</code> 的整数数组 <code>rolls</code> ，其中&nbsp;<code>rolls[i]</code> 是第 <code>i</code> 次观测的值。同时给你两个整数 <code>mean</code> 和 <code>n</code> 。</p>\n\n<p>返回一个长度为<em> </em><code>n</code><em> </em>的数组，包含所有缺失的观测数据，且满足这<em> </em><code>n + m</code><em> </em>次投掷的 <strong>平均值</strong> 是<em> </em><code>mean</code> 。如果存在多组符合要求的答案，只需要返回其中任意一组即可。如果不存在答案，返回一个空数组。</p>\n\n<p><code>k</code>&nbsp;个数字的 <strong>平均值</strong> 为这些数字求和后再除以&nbsp;<code>k</code> 。</p>\n\n<p>注意 <code>mean</code> 是一个整数，所以 <code>n + m</code> 次投掷的总和需要被&nbsp;<code>n + m</code>&nbsp;整除。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>rolls = [3,2,4,3], mean = 4, n = 2\n<strong>输出：</strong>[6,6]\n<strong>解释：</strong>所有 n + m 次投掷的平均值是 (3 + 2 + 4 + 3 + 6 + 6) / 6 = 4 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>rolls = [1,5,6], mean = 3, n = 4\n<strong>输出：</strong>[2,3,2,2]\n<strong>解释：</strong>所有 n + m 次投掷的平均值是 (1 + 5 + 6 + 2 + 3 + 2 + 2) / 7 = 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>rolls = [1,2,3,4], mean = 6, n = 4\n<strong>输出：</strong>[]\n<strong>解释：</strong>无论丢失的 4 次数据是什么，平均值都不可能是 6 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>rolls = [1], mean = 3, n = 1\n<strong>输出：</strong>[5]\n<strong>解释：</strong>所有 n + m 次投掷的平均值是 (1 + 5) / 2 = 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == rolls.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= rolls[i], mean &lt;= 6</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2029.石子游戏 IX",
        "hardRate": "MEDIUM",
        "passRate": "46.95%",
        "problemsUrl": "https://leetcode.cn/problems/stone-game-ix/",
        "solutionsUrl": "https://leetcode.cn/problems/stone-game-ix/solution",
        "problemsDesc": "<p>Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 <code>stones</code> ，其中 <code>stones[i]</code> 是第 <code>i</code> 个石子的价值。</p>\n\n<p>Alice 和 Bob 轮流进行自己的回合，<strong>Alice</strong> 先手。每一回合，玩家需要从 <code>stones</code>&nbsp;中移除任一石子。</p>\n\n<ul>\n\t<li>如果玩家移除石子后，导致 <strong>所有已移除石子</strong> 的价值&nbsp;<strong>总和</strong> 可以被 3 整除，那么该玩家就 <strong>输掉游戏</strong> 。</li>\n\t<li>如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。</li>\n</ul>\n\n<p>假设两位玩家均采用&nbsp;<strong>最佳</strong> 决策。如果 Alice 获胜，返回 <code>true</code> ；如果 Bob 获胜，返回 <code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [2,1]\n<strong>输出：</strong>true\n<strong>解释：</strong>游戏进行如下：\n- 回合 1：Alice 可以移除任意一个石子。\n- 回合 2：Bob 移除剩下的石子。 \n已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [2]\n<strong>输出：</strong>false\n<strong>解释：</strong>Alice 会移除唯一一个石子，已移除石子的值总和为 2 。 \n由于所有石子都已移除，且值总和无法被 3 整除，Bob 获胜。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [5,1,2,4,3]\n<strong>输出：</strong>false\n<strong>解释：</strong>Bob 总会获胜。其中一种可能的游戏进行方式如下：\n- 回合 1：Alice 可以移除值为 1 的第 2 个石子。已移除石子值总和为 1 。\n- 回合 2：Bob 可以移除值为 3 的第 5 个石子。已移除石子值总和为 = 1 + 3 = 4 。\n- 回合 3：Alices 可以移除值为 4 的第 4 个石子。已移除石子值总和为 = 1 + 3 + 4 = 8 。\n- 回合 4：Bob 可以移除值为 2 的第 3 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 = 10.\n- 回合 5：Alice 可以移除值为 5 的第 1 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 + 5 = 15.\nAlice 输掉游戏，因为已移除石子值总和（15）可以被 3 整除，Bob 获胜。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stones.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= stones[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2030.含特定字母的最小子序列",
        "hardRate": "HARD",
        "passRate": "36.48%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-k-length-subsequence-with-occurrences-of-a-letter/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> ，一个整数 <code>k</code> ，一个字母 <code>letter</code> 以及另一个整数 <code>repetition</code> 。</p>\n\n<p>返回 <code>s</code> 中长度为 <code>k</code> 且 <strong>字典序最小</strong> 的子序列，该子序列同时应满足字母 <code>letter</code> 出现<strong> 至少</strong> <code>repetition</code> 次。生成的测试用例满足 <code>letter</code> 在 <code>s</code> 中出现 <strong>至少</strong> <code>repetition</code> 次。</p>\n\n<p><strong>子序列</strong> 是由原字符串删除一些（或不删除）字符且不改变剩余字符顺序得到的剩余字符串。</p>\n\n<p>字符串 <code>a</code> 字典序比字符串 <code>b</code> 小的定义为：在 <code>a</code> 和 <code>b</code> 出现不同字符的第一个位置上，字符串 <code>a</code> 的字符在字母表中的顺序早于字符串 <code>b</code>&nbsp;的字符。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"leet\", k = 3, letter = \"e\", repetition = 1\n<strong>输出：</strong>\"eet\"\n<strong>解释：</strong>存在 4 个长度为 3 ，且满足字母 'e' 出现至少 1 次的子序列：\n- \"lee\"（\"<em><strong>lee</strong></em>t\"）\n- \"let\"（\"<em><strong>le</strong></em>e<em><strong>t</strong></em>\"）\n- \"let\"（\"<em><strong>l</strong></em>e<em><strong>et</strong></em>\"）\n- \"eet\"（\"l<em><strong>eet</strong></em>\"）\n其中字典序最小的子序列是 \"eet\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"example-2\" src=\"https://assets.leetcode.com/uploads/2021/09/13/smallest-k-length-subsequence.png\" style=\"width: 339px; height: 67px;\" /></p>\n\n<pre>\n<strong>输入：</strong>s = \"leetcode\", k = 4, letter = \"e\", repetition = 2\n<strong>输出：</strong>\"ecde\"\n<strong>解释：</strong>\"ecde\" 是长度为 4 且满足字母 \"e\" 出现至少 2 次的字典序最小的子序列。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"bb\", k = 2, letter = \"b\", repetition = 2\n<strong>输出：</strong>\"bb\"\n<strong>解释：</strong>\"bb\" 是唯一一个长度为 2 且满足字母 \"b\" 出现至少 2 次的子序列。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= repetition &lt;= k &lt;= s.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n\t<li><code>letter</code> 是一个小写英文字母，在 <code>s</code>&nbsp;中至少出现 <code>repetition</code> 次</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2031.1 比 0 多的子数组个数",
        "hardRate": "MEDIUM",
        "passRate": "55.21%",
        "problemsUrl": "https://leetcode.cn/problems/count-subarrays-with-more-ones-than-zeros/",
        "solutionsUrl": "https://leetcode.cn/problems/count-subarrays-with-more-ones-than-zeros/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2032.至少在两个数组中出现的值",
        "hardRate": "EASY",
        "passRate": "73.12%",
        "problemsUrl": "https://leetcode.cn/problems/two-out-of-three/",
        "solutionsUrl": "https://leetcode.cn/problems/two-out-of-three/solution",
        "problemsDesc": "给你三个整数数组 <code>nums1</code>、<code>nums2</code> 和 <code>nums3</code> ，请你构造并返回一个 <strong>元素各不相同的</strong> 数组，且由 <strong>至少</strong> 在 <strong>两个</strong> 数组中出现的所有值组成<em>。</em>数组中的元素可以按 <strong>任意</strong> 顺序排列。\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]\n<strong>输出：</strong>[3,2]\n<strong>解释：</strong>至少在两个数组中出现的所有值为：\n- 3 ，在全部三个数组中都出现过。\n- 2 ，在数组 nums1 和 nums2 中出现过。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]\n<strong>输出：</strong>[2,3,1]\n<strong>解释：</strong>至少在两个数组中出现的所有值为：\n- 2 ，在数组 nums2 和 nums3 中出现过。\n- 3 ，在数组 nums1 和 nums2 中出现过。\n- 1 ，在数组 nums1 和 nums3 中出现过。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]\n<strong>输出：</strong>[]\n<strong>解释：</strong>不存在至少在两个数组中出现的值。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length, nums3.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums1[i], nums2[j], nums3[k] &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2033.获取单值网格的最小操作数",
        "hardRate": "MEDIUM",
        "passRate": "43.23%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-operations-to-make-a-uni-value-grid/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-operations-to-make-a-uni-value-grid/solution",
        "problemsDesc": "<p>给你一个大小为&nbsp;<code>m x n</code> 的二维整数网格 <code>grid</code> 和一个整数 <code>x</code> 。每一次操作，你可以对 <code>grid</code> 中的任一元素 <strong>加</strong> <code>x</code> 或 <strong>减</strong> <code>x</code> 。</p>\n\n<p><strong>单值网格</strong> 是全部元素都相等的网格。</p>\n\n<p>返回使网格化为单值网格所需的 <strong>最小</strong> 操作数。如果不能，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt.png\" style=\"width: 164px; height: 165px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[2,4],[6,8]], x = 2\n<strong>输出：</strong>4\n<strong>解释：</strong>可以执行下述操作使所有元素都等于 4 ： \n- 2 加 x 一次。\n- 6 减 x 一次。\n- 8 减 x 两次。\n共计 4 次操作。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt-1.png\" style=\"width: 164px; height: 165px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[1,5],[2,3]], x = 1\n<strong>输出：</strong>5\n<strong>解释：</strong>可以使所有元素都等于 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/gridtxt-2.png\" style=\"width: 164px; height: 165px;\" /></p>\n\n<pre>\n<strong>输入：</strong>grid = [[1,2],[3,4]], x = 2\n<strong>输出：</strong>-1\n<strong>解释：</strong>无法使所有元素相等。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= x, grid[i][j] &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2034.股票价格波动",
        "hardRate": "MEDIUM",
        "passRate": "45.81%",
        "problemsUrl": "https://leetcode.cn/problems/stock-price-fluctuation/",
        "solutionsUrl": "https://leetcode.cn/problems/stock-price-fluctuation/solution",
        "problemsDesc": "<p>给你一支股票价格的数据流。数据流中每一条记录包含一个 <strong>时间戳</strong>&nbsp;和该时间点股票对应的 <strong>价格</strong>&nbsp;。</p>\n\n<p>不巧的是，由于股票市场内在的波动性，股票价格记录可能不是按时间顺序到来的。某些情况下，有的记录可能是错的。如果两个有相同时间戳的记录出现在数据流中，前一条记录视为错误记录，后出现的记录 <b>更正</b>&nbsp;前一条错误的记录。</p>\n\n<p>请你设计一个算法，实现：</p>\n\n<ul>\n\t<li><strong>更新 </strong>股票在某一时间戳的股票价格，如果有之前同一时间戳的价格，这一操作将&nbsp;<strong>更正</strong>&nbsp;之前的错误价格。</li>\n\t<li>找到当前记录里 <b>最新股票价格</b>&nbsp;。<strong>最新股票价格</strong>&nbsp;定义为时间戳最晚的股票价格。</li>\n\t<li>找到当前记录里股票的 <strong>最高价格</strong>&nbsp;。</li>\n\t<li>找到当前记录里股票的 <strong>最低价格</strong>&nbsp;。</li>\n</ul>\n\n<p>请你实现&nbsp;<code>StockPrice</code>&nbsp;类：</p>\n\n<ul>\n\t<li><code>StockPrice()</code>&nbsp;初始化对象，当前无股票价格记录。</li>\n\t<li><code>void update(int timestamp, int price)</code>&nbsp;在时间点 <code>timestamp</code>&nbsp;更新股票价格为 <code>price</code>&nbsp;。</li>\n\t<li><code>int current()</code>&nbsp;返回股票 <strong>最新价格</strong>&nbsp;。</li>\n\t<li><code>int maximum()</code>&nbsp;返回股票 <strong>最高价格</strong>&nbsp;。</li>\n\t<li><code>int minimum()</code>&nbsp;返回股票 <strong>最低价格</strong>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>\n[\"StockPrice\", \"update\", \"update\", \"current\", \"maximum\", \"update\", \"maximum\", \"update\", \"minimum\"]\n[[], [1, 10], [2, 5], [], [], [1, 3], [], [4, 2], []]\n<strong>输出：</strong>\n[null, null, null, 5, 10, null, 5, null, 2]\n\n<strong>解释：</strong>\nStockPrice stockPrice = new StockPrice();\nstockPrice.update(1, 10); // 时间戳为 [1] ，对应的股票价格为 [10] 。\nstockPrice.update(2, 5);  // 时间戳为 [1,2] ，对应的股票价格为 [10,5] 。\nstockPrice.current();     // 返回 5 ，最新时间戳为 2 ，对应价格为 5 。\nstockPrice.maximum();     // 返回 10 ，最高价格的时间戳为 1 ，价格为 10 。\nstockPrice.update(1, 3);  // 之前时间戳为 1 的价格错误，价格更新为 3 。\n                          // 时间戳为 [1,2] ，对应股票价格为 [3,5] 。\nstockPrice.maximum();     // 返回 5 ，更正后最高价格为 5 。\nstockPrice.update(4, 2);  // 时间戳为 [1,2,4] ，对应价格为 [3,5,2] 。\nstockPrice.minimum();     // 返回 2 ，最低价格时间戳为 4 ，价格为 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= timestamp, price &lt;= 10<sup>9</sup></code></li>\n\t<li><code>update</code>，<code>current</code>，<code>maximum</code>&nbsp;和&nbsp;<code>minimum</code>&nbsp;<strong>总</strong> 调用次数不超过&nbsp;<code>10<sup>5</sup></code>&nbsp;。</li>\n\t<li><code>current</code>，<code>maximum</code>&nbsp;和&nbsp;<code>minimum</code>&nbsp;被调用时，<code>update</code>&nbsp;操作 <strong>至少</strong>&nbsp;已经被调用过 <strong>一次</strong>&nbsp;。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2035.将数组分成两个数组并最小化数组和的差",
        "hardRate": "HARD",
        "passRate": "34.82%",
        "problemsUrl": "https://leetcode.cn/problems/partition-array-into-two-arrays-to-minimize-sum-difference/",
        "solutionsUrl": "https://leetcode.cn/problems/partition-array-into-two-arrays-to-minimize-sum-difference/solution",
        "problemsDesc": "<p>给你一个长度为 <code>2 * n</code>&nbsp;的整数数组。你需要将&nbsp;<code>nums</code>&nbsp;分成&nbsp;<strong>两个</strong>&nbsp;长度为&nbsp;<code>n</code>&nbsp;的数组，分别求出两个数组的和，并 <strong>最小化</strong>&nbsp;两个数组和之&nbsp;<b>差的绝对值</b>&nbsp;。<code>nums</code>&nbsp;中每个元素都需要放入两个数组之一。</p>\n\n<p>请你返回&nbsp;<strong>最小</strong>&nbsp;的数组和之差。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/02/ex1.png\" style=\"width: 240px; height: 106px;\"></p>\n\n<pre><b>输入：</b>nums = [3,9,7,3]\n<b>输出：</b>2\n<strong>解释：</strong>最优分组方案是分成 [3,9] 和 [7,3] 。\n数组和之差的绝对值为 abs((3 + 9) - (7 + 3)) = 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [-36,36]\n<b>输出：</b>72\n<strong>解释：</strong>最优分组方案是分成 [-36] 和 [36] 。\n数组和之差的绝对值为 abs((-36) - (36)) = 72 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"example-3\" src=\"https://assets.leetcode.com/uploads/2021/10/02/ex3.png\" style=\"width: 316px; height: 106px;\"></p>\n\n<pre><b>输入：</b>nums = [2,-1,0,4,-2,-9]\n<b>输出：</b>0\n<strong>解释：</strong>最优分组方案是分成 [2,4,-9] 和 [-1,0,-2] 。\n数组和之差的绝对值为 abs((2 + 4 + -9) - (-1 + 0 + -2)) = 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 15</code></li>\n\t<li><code>nums.length == 2 * n</code></li>\n\t<li><code>-10<sup>7</sup> &lt;= nums[i] &lt;= 10<sup>7</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2036.最大交替子数组和",
        "hardRate": "MEDIUM",
        "passRate": "42.58%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-alternating-subarray-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-alternating-subarray-sum/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2037.使每位学生都有座位的最少移动次数",
        "hardRate": "EASY",
        "passRate": "85.03%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-moves-to-seat-everyone/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-moves-to-seat-everyone/solution",
        "problemsDesc": "<p>一个房间里有 <code>n</code>&nbsp;个座位和 <code>n</code>&nbsp;名学生，房间用一个数轴表示。给你一个长度为 <code>n</code>&nbsp;的数组&nbsp;<code>seats</code>&nbsp;，其中&nbsp;<code>seats[i]</code> 是第 <code>i</code>&nbsp;个座位的位置。同时给你一个长度为 <code>n</code>&nbsp;的数组&nbsp;<code>students</code>&nbsp;，其中&nbsp;<code>students[j]</code>&nbsp;是第 <code>j</code>&nbsp;位学生的位置。</p>\n\n<p>你可以执行以下操作任意次：</p>\n\n<ul>\n\t<li>增加或者减少第&nbsp;<code>i</code>&nbsp;位学生的位置，每次变化量为 <code>1</code>&nbsp;（也就是将第 <code>i</code>&nbsp;位学生从位置 <code>x</code>&nbsp;移动到 <code>x + 1</code>&nbsp;或者 <code>x - 1</code>）</li>\n</ul>\n\n<p>请你返回使所有学生都有座位坐的 <strong>最少移动次数</strong>&nbsp;，并确保没有两位学生的座位相同。</p>\n\n<p>请注意，初始时有可能有多个座位或者多位学生在 <strong>同一</strong>&nbsp;位置。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>seats = [3,1,5], students = [2,7,4]\n<b>输出：</b>4\n<b>解释：</b>学生移动方式如下：\n- 第一位学生从位置 2 移动到位置 1 ，移动 1 次。\n- 第二位学生从位置 7 移动到位置 5 ，移动 2 次。\n- 第三位学生从位置 4 移动到位置 3 ，移动 1 次。\n总共 1 + 2 + 1 = 4 次移动。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>seats = [4,1,5,9], students = [1,3,2,6]\n<b>输出：</b>7\n<strong>解释：</strong>学生移动方式如下：\n- 第一位学生不移动。\n- 第二位学生从位置 3 移动到位置 4 ，移动 1 次。\n- 第三位学生从位置 2 移动到位置 5 ，移动 3 次。\n- 第四位学生从位置 6 移动到位置 9 ，移动 3 次。\n总共 0 + 1 + 3 + 3 = 7 次移动。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>seats = [2,2,6,6], students = [1,3,2,6]\n<b>输出：</b>4\n<b>解释：</b>学生移动方式如下：\n- 第一位学生从位置 1 移动到位置 2 ，移动 1 次。\n- 第二位学生从位置 3 移动到位置 6 ，移动 3 次。\n- 第三位学生不移动。\n- 第四位学生不移动。\n总共 1 + 3 + 0 + 0 = 4 次移动。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == seats.length == students.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= seats[i], students[j] &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2038.如果相邻两个颜色均相同则删除当前颜色",
        "hardRate": "MEDIUM",
        "passRate": "63.37%",
        "problemsUrl": "https://leetcode.cn/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/",
        "solutionsUrl": "https://leetcode.cn/problems/remove-colored-pieces-if-both-neighbors-are-the-same-color/solution",
        "problemsDesc": "<p>总共有 <code>n</code>&nbsp;个颜色片段排成一列，每个颜色片段要么是&nbsp;<code>'A'</code>&nbsp;要么是&nbsp;<code>'B'</code>&nbsp;。给你一个长度为&nbsp;<code>n</code>&nbsp;的字符串&nbsp;<code>colors</code>&nbsp;，其中&nbsp;<code>colors[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个颜色片段的颜色。</p>\n\n<p>Alice 和 Bob 在玩一个游戏，他们 <strong>轮流</strong>&nbsp;从这个字符串中删除颜色。Alice <strong>先手</strong>&nbsp;。</p>\n\n<ul>\n\t<li>如果一个颜色片段为 <code>'A'</code>&nbsp;且 <strong>相邻两个颜色</strong>&nbsp;都是颜色 <code>'A'</code>&nbsp;，那么 Alice 可以删除该颜色片段。Alice&nbsp;<strong>不可以</strong>&nbsp;删除任何颜色&nbsp;<code>'B'</code>&nbsp;片段。</li>\n\t<li>如果一个颜色片段为 <code>'B'</code>&nbsp;且 <strong>相邻两个颜色</strong>&nbsp;都是颜色 <code>'B'</code>&nbsp;，那么 Bob 可以删除该颜色片段。Bob <strong>不可以</strong>&nbsp;删除任何颜色 <code>'A'</code>&nbsp;片段。</li>\n\t<li>Alice 和 Bob <strong>不能</strong>&nbsp;从字符串两端删除颜色片段。</li>\n\t<li>如果其中一人无法继续操作，则该玩家 <b>输</b>&nbsp;掉游戏且另一玩家 <strong>获胜</strong>&nbsp;。</li>\n</ul>\n\n<p>假设 Alice 和 Bob 都采用最优策略，如果 Alice 获胜，请返回&nbsp;<code>true</code>，否则 Bob 获胜，返回<em>&nbsp;</em><code>false</code>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>colors = \"AAABABB\"\n<b>输出：</b>true\n<b>解释：</b>\nA<em><strong>A</strong></em>ABABB -&gt; AABABB\nAlice 先操作。\n她删除从左数第二个 'A' ，这也是唯一一个相邻颜色片段都是 'A' 的 'A' 。\n\n现在轮到 Bob 操作。\nBob 无法执行任何操作，因为没有相邻位置都是 'B' 的颜色片段 'B' 。\n因此，Alice 获胜，返回 true 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>colors = \"AA\"\n<b>输出：</b>false\n<strong>解释：</strong>\nAlice 先操作。\n只有 2 个 'A' 且它们都在字符串的两端，所以她无法执行任何操作。\n因此，Bob 获胜，返回 false 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>colors = \"ABBBBBBBAAA\"\n<b>输出：</b>false\n<strong>解释：</strong>\nABBBBBBBA<em><strong>A</strong></em>A -&gt; ABBBBBBBAA\nAlice 先操作。\n她唯一的选择是删除从右数起第二个 'A' 。\n\nABBBB<strong><em>B</em></strong>BBAA -&gt; ABBBBBBAA\n接下来轮到 Bob 操作。\n他有许多选择，他可以选择任何一个 'B' 删除。\n\n然后轮到 Alice 操作，她无法删除任何片段。\n所以 Bob 获胜，返回 false 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;colors.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>colors</code>&nbsp;只包含字母&nbsp;<code>'A'</code>&nbsp;和&nbsp;<code>'B'</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2039.网络空闲的时刻",
        "hardRate": "MEDIUM",
        "passRate": "55.88%",
        "problemsUrl": "https://leetcode.cn/problems/the-time-when-the-network-becomes-idle/",
        "solutionsUrl": "https://leetcode.cn/problems/the-time-when-the-network-becomes-idle/solution",
        "problemsDesc": "<p>给你一个有 <code>n</code>&nbsp;个服务器的计算机网络，服务器编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。同时给你一个二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示服务器&nbsp;<code>u<sub>i</sub></code> 和&nbsp;<code>v<sub>i</sub></code><sub>&nbsp;</sub>之间有一条信息线路，在&nbsp;<strong>一秒</strong>&nbsp;内它们之间可以传输&nbsp;<strong>任意</strong>&nbsp;数目的信息。再给你一个长度为 <code>n</code>&nbsp;且下标从&nbsp;<strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>patience</code>&nbsp;。</p>\n\n<p>题目保证所有服务器都是 <b>相通</b>&nbsp;的，也就是说一个信息从任意服务器出发，都可以通过这些信息线路直接或间接地到达任何其他服务器。</p>\n\n<p>编号为 <code>0</code>&nbsp;的服务器是 <strong>主</strong>&nbsp;服务器，其他服务器为 <strong>数据</strong>&nbsp;服务器。每个数据服务器都要向主服务器发送信息，并等待回复。信息在服务器之间按 <strong>最优</strong>&nbsp;线路传输，也就是说每个信息都会以 <strong>最少时间</strong>&nbsp;到达主服务器。主服务器会处理 <strong>所有</strong>&nbsp;新到达的信息并 <strong>立即</strong>&nbsp;按照每条信息来时的路线 <strong>反方向</strong> 发送回复信息。</p>\n\n<p>在 <code>0</code>&nbsp;秒的开始，所有数据服务器都会发送各自需要处理的信息。从第 <code>1</code>&nbsp;秒开始，<strong>每</strong>&nbsp;一秒最 <strong>开始</strong>&nbsp;时，每个数据服务器都会检查它是否收到了主服务器的回复信息（包括新发出信息的回复信息）：</p>\n\n<ul>\n\t<li>如果还没收到任何回复信息，那么该服务器会周期性&nbsp;<strong>重发</strong>&nbsp;信息。数据服务器&nbsp;<code>i</code>&nbsp;每&nbsp;<code>patience[i]</code>&nbsp;秒都会重发一条信息，也就是说，数据服务器&nbsp;<code>i</code>&nbsp;在上一次发送信息给主服务器后的 <code>patience[i]</code>&nbsp;秒 <strong>后</strong>&nbsp;会重发一条信息给主服务器。</li>\n\t<li>否则，该数据服务器&nbsp;<strong>不会重发</strong>&nbsp;信息。</li>\n</ul>\n\n<p>当没有任何信息在线路上传输或者到达某服务器时，该计算机网络变为 <strong>空闲</strong>&nbsp;状态。</p>\n\n<p>请返回计算机网络变为 <strong>空闲</strong>&nbsp;状态的&nbsp;<strong>最早秒数</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example 1\" src=\"https://assets.leetcode.com/uploads/2021/09/22/quiet-place-example1.png\" style=\"width: 750px; height: 384px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1],[1,2]], patience = [0,2,1]\n<b>输出：</b>8\n<strong>解释：</strong>\n0 秒最开始时，\n- 数据服务器 1 给主服务器发出信息（用 1A 表示）。\n- 数据服务器 2 给主服务器发出信息（用 2A 表示）。\n\n1 秒时，\n- 信息 1A 到达主服务器，主服务器立刻处理信息 1A 并发出 1A 的回复信息。\n- 数据服务器 1 还没收到任何回复。距离上次发出信息过去了 1 秒（1 &lt; patience[1] = 2），所以不会重发信息。\n- 数据服务器 2 还没收到任何回复。距离上次发出信息过去了 1 秒（1 == patience[2] = 1），所以它重发一条信息（用 2B 表示）。\n\n2 秒时，\n- 回复信息 1A 到达服务器 1 ，服务器 1 不会再重发信息。\n- 信息 2A 到达主服务器，主服务器立刻处理信息 2A 并发出 2A 的回复信息。\n- 服务器 2 重发一条信息（用 2C 表示）。\n...\n4 秒时，\n- 回复信息 2A 到达服务器 2 ，服务器 2 不会再重发信息。\n...\n7 秒时，回复信息 2D 到达服务器 2 。\n\n从第 8 秒开始，不再有任何信息在服务器之间传输，也不再有信息到达服务器。\n所以第 8 秒是网络变空闲的最早时刻。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"example 2\" src=\"https://assets.leetcode.com/uploads/2021/09/04/network_a_quiet_place_2.png\" style=\"width: 100px; height: 85px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]\n<b>输出：</b>3\n<b>解释：</b>数据服务器 1 和 2 第 2 秒初收到回复信息。\n从第 3 秒开始，网络变空闲。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == patience.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>patience[0] == 0</code></li>\n\t<li>对于&nbsp;<code>1 &lt;= i &lt; n</code> ，满足&nbsp;<code>1 &lt;= patience[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= edges.length &lt;= min(10<sup>5</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt; n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li>不会有重边。</li>\n\t<li>每个服务器都直接或间接与别的服务器相连。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2040.两个有序数组的第 K 小乘积",
        "hardRate": "HARD",
        "passRate": "33.46%",
        "problemsUrl": "https://leetcode.cn/problems/kth-smallest-product-of-two-sorted-arrays/",
        "solutionsUrl": "https://leetcode.cn/problems/kth-smallest-product-of-two-sorted-arrays/solution",
        "problemsDesc": "给你两个 <strong>从小到大排好序</strong>&nbsp;且下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;以及一个整数&nbsp;<code>k</code>&nbsp;，请你返回第<em>&nbsp;</em><code>k</code>&nbsp;（从 <strong>1</strong>&nbsp;开始编号）小的&nbsp;<code>nums1[i] * nums2[j]</code><em>&nbsp;</em>的乘积，其中<em>&nbsp;</em><code>0 &lt;= i &lt; nums1.length</code><em> </em>且<em> </em><code>0 &lt;= j &lt; nums2.length</code>&nbsp;。\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums1 = [2,5], nums2 = [3,4], k = 2\n<b>输出：</b>8\n<b>解释：</b>第 2 小的乘积计算如下：\n- nums1[0] * nums2[0] = 2 * 3 = 6\n- nums1[0] * nums2[1] = 2 * 4 = 8\n第 2 小的乘积为 8 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums1 = [-4,-2,0,3], nums2 = [2,4], k = 6\n<b>输出：</b>0\n<strong>解释：</strong>第 6 小的乘积计算如下：\n- nums1[0] * nums2[1] = (-4) * 4 = -16\n- nums1[0] * nums2[0] = (-4) * 2 = -8\n- nums1[1] * nums2[1] = (-2) * 4 = -8\n- nums1[1] * nums2[0] = (-2) * 2 = -4\n- nums1[2] * nums2[0] = 0 * 2 = 0\n- nums1[2] * nums2[1] = 0 * 4 = 0\n第 6 小的乘积为 0 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums1 = [-2,-1,0,1,2], nums2 = [-3,-1,2,4,5], k = 3\n<b>输出：</b>-6\n<b>解释：</b>第 3 小的乘积计算如下：\n- nums1[0] * nums2[4] = (-2) * 5 = -10\n- nums1[0] * nums2[3] = (-2) * 4 = -8\n- nums1[4] * nums2[0] = 2 * (-3) = -6\n第 3 小的乘积为 -6 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums1[i], nums2[j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums1.length * nums2.length</code></li>\n\t<li><code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;都是从小到大排好序的。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2041.面试中被录取的候选人",
        "hardRate": "MEDIUM",
        "passRate": "76.44%",
        "problemsUrl": "https://leetcode.cn/problems/accepted-candidates-from-the-interviews/",
        "solutionsUrl": "https://leetcode.cn/problems/accepted-candidates-from-the-interviews/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2042.检查句子中的数字是否递增",
        "hardRate": "EASY",
        "passRate": "71.97%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-numbers-are-ascending-in-a-sentence/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-numbers-are-ascending-in-a-sentence/solution",
        "problemsDesc": "<p>句子是由若干 <strong>token</strong> 组成的一个列表，<strong>token</strong> 间用 <strong>单个</strong> 空格分隔，句子没有前导或尾随空格。每个 token 要么是一个由数字 <code>0-9</code> 组成的不含前导零的 <strong>正整数</strong>&nbsp;，要么是一个由小写英文字母组成的 <strong>单词</strong> 。</p>\n\n<ul>\n\t<li>示例，<code>\"a puppy has 2 eyes 4 legs\"</code> 是一个由 7 个 token 组成的句子：<code>\"2\"</code> 和 <code>\"4\"</code> 是数字，其他像&nbsp;<code>\"puppy\"</code> 这样的 tokens 属于单词。</li>\n</ul>\n\n<p>给你一个表示句子的字符串 <code>s</code> ，你需要检查 <code>s</code> 中的 <strong>全部</strong> 数字是否从左到右严格递增（即，除了最后一个数字，<code>s</code> 中的 <strong>每个</strong> 数字都严格小于它 <strong>右侧</strong> 的数字）。</p>\n\n<p>如果满足题目要求，返回 <code>true</code>&nbsp;，否则，返回<em> </em><code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/09/30/example1.png\" style=\"width: 637px; height: 48px;\" /></p>\n\n<pre>\n<strong>输入：</strong>s = \"1 box has 3 blue 4 red 6 green and 12 yellow marbles\"\n<strong>输出：</strong>true\n<strong>解释：</strong>句子中的数字是：1, 3, 4, 6, 12 。\n这些数字是按从左到右严格递增的 1 &lt; 3 &lt; 4 &lt; 6 &lt; 12 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"hello world 5 x 5\"\n<strong>输出：</strong>false\n<strong>解释：</strong>句子中的数字是：<em><strong>5</strong></em>, <strong><em>5</em></strong> 。这些数字不是严格递增的。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"example-3\" src=\"https://assets.leetcode.com/uploads/2021/09/30/example3.png\" style=\"width: 794px; height: 48px;\" /></p>\n\n<pre>\n<strong>输入：</strong>s = \"sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s\"\n<strong>输出：</strong>false\n<strong>解释：</strong>s 中的数字是：7, <em><strong>51</strong></em>, <em><strong>50</strong></em>, 60 。这些数字不是严格递增的。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"4 5 11 26\"\n<strong>输出：</strong>true\n<strong>解释：</strong>s 中的数字是：4, 5, 11, 26 。\n这些数字是按从左到右严格递增的：4 &lt; 5 &lt; 11 &lt; 26 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 200</code></li>\n\t<li><code>s</code> 由小写英文字母、空格和数字 <code>0</code> 到 <code>9</code> 组成（包含 <code>0</code> 和 <code>9</code>）</li>\n\t<li><code>s</code> 中数字 token 的数目在 <code>2</code> 和 <code>100</code> 之间（包含 <code>2</code> 和 <code>100</code>）</li>\n\t<li><code>s</code> 中的 token 之间由单个空格分隔</li>\n\t<li><code>s</code> 中至少有 <strong>两个</strong> 数字</li>\n\t<li><code>s</code> 中的每个数字都是一个 <strong>小于</strong> <code>100</code> 的 <strong>正</strong> 数，且不含前导零</li>\n\t<li><code>s</code> 不含前导或尾随空格</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2043.简易银行系统",
        "hardRate": "MEDIUM",
        "passRate": "65.98%",
        "problemsUrl": "https://leetcode.cn/problems/simple-bank-system/",
        "solutionsUrl": "https://leetcode.cn/problems/simple-bank-system/solution",
        "problemsDesc": "<p>你的任务是为一个很受欢迎的银行设计一款程序，以自动化执行所有传入的交易（转账，存款和取款）。银行共有 <code>n</code> 个账户，编号从 <code>1</code> 到 <code>n</code> 。每个账号的初始余额存储在一个下标从 <strong>0</strong> 开始的整数数组 <code>balance</code>&nbsp;中，其中第 <code>(i + 1)</code> 个账户的初始余额是 <code>balance[i]</code> 。</p>\n\n<p>请你执行所有 <strong>有效的</strong> 交易。如果满足下面全部条件，则交易 <strong>有效</strong> ：</p>\n\n<ul>\n\t<li>指定的账户数量在 <code>1</code> 和 <code>n</code> 之间，且</li>\n\t<li>取款或者转账需要的钱的总数 <strong>小于或者等于</strong> 账户余额。</li>\n</ul>\n\n<p>实现 <code>Bank</code> 类：</p>\n\n<ul>\n\t<li><code>Bank(long[] balance)</code> 使用下标从 <strong>0</strong> 开始的整数数组 <code>balance</code> 初始化该对象。</li>\n\t<li><code>boolean transfer(int account1, int account2, long money)</code> 从编号为&nbsp;<code>account1</code> 的账户向编号为 <code>account2</code> 的账户转帐 <code>money</code> 美元。如果交易成功，返回 <code>true</code> ，否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean deposit(int account, long money)</code> 向编号为&nbsp;<code>account</code> 的账户存款 <code>money</code> 美元。如果交易成功，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n\t<li><code>boolean withdraw(int account, long money)</code> 从编号为 <code>account</code> 的账户取款 <code>money</code> 美元。如果交易成功，返回 <code>true</code> ；否则，返回 <code>false</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>：\n[\"Bank\", \"withdraw\", \"transfer\", \"deposit\", \"transfer\", \"withdraw\"]\n[[[10, 100, 20, 50, 30]], [3, 10], [5, 1, 20], [5, 20], [3, 4, 15], [10, 50]]\n<strong>输出：</strong>\n[null, true, true, true, false, false]\n\n<strong>解释：</strong>\nBank bank = new Bank([10, 100, 20, 50, 30]);\nbank.withdraw(3, 10);    // 返回 true ，账户 3 的余额是 $20 ，所以可以取款 $10 。\n                         // 账户 3 余额为 $20 - $10 = $10 。\nbank.transfer(5, 1, 20); // 返回 true ，账户 5 的余额是 $30 ，所以可以转账 $20 。\n                         // 账户 5 的余额为 $30 - $20 = $10 ，账户 1 的余额为 $10 + $20 = $30 。\nbank.deposit(5, 20);     // 返回 true ，可以向账户 5 存款 $20 。\n                         // 账户 5 的余额为 $10 + $20 = $30 。\nbank.transfer(3, 4, 15); // 返回 false ，账户 3 的当前余额是 $10 。\n                         // 所以无法转账 $15 。\nbank.withdraw(10, 50);   // 返回 false ，交易无效，因为账户 10 并不存在。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == balance.length</code></li>\n\t<li><code>1 &lt;= n, account, account1, account2 &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= balance[i], money &lt;= 10<sup>12</sup></code></li>\n\t<li><code>transfer</code>, <code>deposit</code>, <code>withdraw</code> 三个函数，<strong>每个</strong> 最多调用 <code>10<sup>4</sup></code> 次</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2044.统计按位或能得到最大值的子集数目",
        "hardRate": "MEDIUM",
        "passRate": "81.77%",
        "problemsUrl": "https://leetcode.cn/problems/count-number-of-maximum-bitwise-or-subsets/",
        "solutionsUrl": "https://leetcode.cn/problems/count-number-of-maximum-bitwise-or-subsets/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，请你找出 <code>nums</code> 子集 <strong>按位或</strong> 可能得到的<strong> </strong><strong>最大值</strong> ，并返回按位或能得到最大值的 <strong>不同非空子集的数目</strong> 。</p>\n\n<p>如果数组 <code>a</code> 可以由数组 <code>b</code> 删除一些元素（或不删除）得到，则认为数组 <code>a</code> 是数组 <code>b</code> 的一个 <strong>子集</strong> 。如果选中的元素下标位置不一样，则认为两个子集 <strong>不同</strong> 。</p>\n\n<p>对数组 <code>a</code> 执行 <strong>按位或</strong>&nbsp;，结果等于 <code>a[0] <strong>OR</strong> a[1] <strong>OR</strong> ... <strong>OR</strong> a[a.length - 1]</code>（下标从 <strong>0</strong> 开始）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>子集按位或能得到的最大值是 3 。有 2 个子集按位或可以得到 3 ：\n- [3]\n- [3,1]\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,2,2]\n<strong>输出：</strong>7\n<strong>解释：</strong>[2,2,2] 的所有非空子集的按位或都可以得到 2 。总共有 2<sup>3</sup> - 1 = 7 个子集。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,2,1,5]\n<strong>输出：</strong>6\n<strong>解释：</strong>子集按位或可能的最大值是 7 。有 6 个子集按位或可以得到 7 ：\n- [3,5]\n- [3,1,5]\n- [3,2,5]\n- [3,2,1,5]\n- [2,5]\n- [2,1,5]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 16</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2045.到达目的地的第二短时间",
        "hardRate": "HARD",
        "passRate": "53.33%",
        "problemsUrl": "https://leetcode.cn/problems/second-minimum-time-to-reach-destination/",
        "solutionsUrl": "https://leetcode.cn/problems/second-minimum-time-to-reach-destination/solution",
        "problemsDesc": "<p>城市用一个 <strong>双向连通</strong> 图表示，图中有 <code>n</code> 个节点，从 <code>1</code> 到 <code>n</code> 编号（包含 <code>1</code> 和 <code>n</code>）。图中的边用一个二维整数数组 <code>edges</code> 表示，其中每个 <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code>&nbsp;表示一条节点&nbsp;<code>u<sub>i</sub></code> 和节点&nbsp;<code>v<sub>i</sub></code> 之间的双向连通边。每组节点对由 <strong>最多一条</strong> 边连通，顶点不存在连接到自身的边。穿过任意一条边的时间是 <code>time</code>&nbsp;分钟。</p>\n\n<p>每个节点都有一个交通信号灯，每 <code>change</code> 分钟改变一次，从绿色变成红色，再由红色变成绿色，循环往复。所有信号灯都&nbsp;<strong>同时</strong> 改变。你可以在 <strong>任何时候</strong> 进入某个节点，但是 <strong>只能</strong> 在节点&nbsp;<strong>信号灯是绿色时</strong> 才能离开。如果信号灯是&nbsp; <strong>绿色</strong> ，你 <strong>不能</strong> 在节点等待，必须离开。</p>\n\n<p><strong>第二小的值</strong> 是&nbsp;<strong>严格大于</strong> 最小值的所有值中最小的值。</p>\n\n<ul>\n\t<li>例如，<code>[2, 3, 4]</code> 中第二小的值是 <code>3</code> ，而 <code>[2, 2, 4]</code> 中第二小的值是 <code>4</code> 。</li>\n</ul>\n\n<p>给你 <code>n</code>、<code>edges</code>、<code>time</code> 和 <code>change</code> ，返回从节点 <code>1</code> 到节点 <code>n</code> 需要的 <strong>第二短时间</strong> 。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>你可以 <strong>任意次</strong> 穿过任意顶点，<strong>包括</strong> <code>1</code> 和 <code>n</code> 。</li>\n\t<li>你可以假设在 <strong>启程时</strong> ，所有信号灯刚刚变成 <strong>绿色</strong> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/29/e1.png\" style=\"width: 200px; height: 250px;\" />        <img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/29/e2.png\" style=\"width: 200px; height: 250px;\" /></p>\n\n<pre>\n<strong>输入：</strong>n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5\n<strong>输出：</strong>13\n<strong>解释：</strong>\n上面的左图展现了给出的城市交通图。\n右图中的蓝色路径是最短时间路径。\n花费的时间是：\n- 从节点 1 开始，总花费时间=0\n- 1 -&gt; 4：3 分钟，总花费时间=3\n- 4 -&gt; 5：3 分钟，总花费时间=6\n因此需要的最小时间是 6 分钟。\n\n右图中的红色路径是第二短时间路径。\n- 从节点 1 开始，总花费时间=0\n- 1 -&gt; 3：3 分钟，总花费时间=3\n- 3 -&gt; 4：3 分钟，总花费时间=6\n- 在节点 4 等待 4 分钟，总花费时间=10\n- 4 -&gt; 5：3 分钟，总花费时间=13\n因此第二短时间是 13 分钟。      \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/29/eg2.png\" style=\"width: 225px; height: 50px;\" /></p>\n\n<pre>\n<strong>输入：</strong>n = 2, edges = [[1,2]], time = 3, change = 2\n<strong>输出：</strong>11\n<strong>解释：</strong>\n最短时间路径是 1 -&gt; 2 ，总花费时间 = 3 分钟\n第二短时间路径是 1 -&gt; 2 -&gt; 1 -&gt; 2 ，总花费时间 = 11 分钟</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>n - 1 &lt;= edges.length &lt;= min(2 * 10<sup>4</sup>, n * (n - 1) / 2)</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>1 &lt;= u<sub>i</sub>, v<sub>i</sub> &lt;= n</code></li>\n\t<li><code>u<sub>i</sub> != v<sub>i</sub></code></li>\n\t<li>不含重复边</li>\n\t<li>每个节点都可以从其他节点直接或者间接到达</li>\n\t<li><code>1 &lt;= time, change &lt;= 10<sup>3</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2046.给按照绝对值排序的链表排序",
        "hardRate": "MEDIUM",
        "passRate": "64.15%",
        "problemsUrl": "https://leetcode.cn/problems/sort-linked-list-already-sorted-using-absolute-values/",
        "solutionsUrl": "https://leetcode.cn/problems/sort-linked-list-already-sorted-using-absolute-values/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2047.句子中的有效单词数",
        "hardRate": "EASY",
        "passRate": "38.62%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-valid-words-in-a-sentence/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-valid-words-in-a-sentence/solution",
        "problemsDesc": "<p>句子仅由小写字母（<code>'a'</code> 到 <code>'z'</code>）、数字（<code>'0'</code> 到 <code>'9'</code>）、连字符（<code>'-'</code>）、标点符号（<code>'!'</code>、<code>'.'</code> 和 <code>','</code>）以及空格（<code>' '</code>）组成。每个句子可以根据空格分解成 <strong>一个或者多个 token</strong> ，这些 token 之间由一个或者多个空格 <code>' '</code> 分隔。</p>\n\n<p>如果一个 token 同时满足下述条件，则认为这个 token 是一个有效单词：</p>\n\n<ul>\n\t<li>仅由小写字母、连字符和/或标点（不含数字）\b组成。</li>\n\t<li><strong>至多一个</strong> 连字符 <code>'-'</code> 。如果存在，连字符两侧应当都存在小写字母（<code>\"a-b\"</code> 是一个有效单词，但 <code>\"-ab\"</code> 和 <code>\"ab-\"</code> 不是有效单词）。</li>\n\t<li><strong>至多一个 </strong>标点符号。如果存在，标点符号应当位于 token 的 <strong>末尾</strong> 。</li>\n</ul>\n\n<p>这里给出几个有效单词的例子：<code>\"a-b.\"</code>、<code>\"afad\"</code>、<code>\"ba-c\"</code>、<code>\"a!\"</code> 和 <code>\"!\"</code> 。</p>\n\n<p>给你一个字符串 <code>sentence</code> ，请你找出并返回<em> </em><code>sentence</code> 中<strong> 有效单词的数目</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>sentence = \"<em><strong>cat</strong></em> <em><strong>and</strong></em>  <em><strong>dog</strong></em>\"\n<strong>输出：</strong>3\n<strong>解释：</strong>句子中的有效单词是 \"cat\"、\"and\" 和 \"dog\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>sentence = \"!this  1-s b8d!\"\n<strong>输出：</strong>0\n<strong>解释：</strong>句子中没有有效单词\n\"!this\" 不是有效单词，因为它以一个标点开头\n\"1-s\" 和 \"b8d\" 也不是有效单词，因为它们都包含数字\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>sentence = \"<em><strong>alice</strong></em> <em><strong>and</strong></em>  <em><strong>bob</strong></em> <em><strong>are</strong></em> <em><strong>playing</strong></em> stone-game10\"\n<strong>输出：</strong>5\n<strong>解释：</strong>句子中的有效单词是 \"alice\"、\"and\"、\"bob\"、\"are\" 和 \"playing\"\n\"stone-game10\" 不是有效单词，因为它含有数字\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= sentence.length &lt;= 1000</code></li>\n\t<li><code>sentence</code> 由小写英文字母、数字（<code>0-9</code>）、以及字符（<code>' '</code>、<code>'-'</code>、<code>'!'</code>、<code>'.'</code> 和 <code>','</code>）组成</li>\n\t<li>句子中至少有 <code>1</code> 个 token</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2048.下一个更大的数值平衡数",
        "hardRate": "MEDIUM",
        "passRate": "45.47%",
        "problemsUrl": "https://leetcode.cn/problems/next-greater-numerically-balanced-number/",
        "solutionsUrl": "https://leetcode.cn/problems/next-greater-numerically-balanced-number/solution",
        "problemsDesc": "<p>如果整数&nbsp; <code>x</code> 满足：对于每个数位&nbsp;<code>d</code> ，这个数位&nbsp;<strong>恰好</strong> 在 <code>x</code> 中出现 <code>d</code> 次。那么整数 <code>x</code> 就是一个 <strong>数值平衡数</strong> 。</p>\n\n<p>给你一个整数 <code>n</code> ，请你返回 <strong>严格大于</strong> <code>n</code> 的 <strong>最小数值平衡数</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1\n<strong>输出：</strong>22\n<strong>解释：</strong>\n22 是一个数值平衡数，因为：\n- 数字 2 出现 2 次 \n这也是严格大于 1 的最小数值平衡数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 1000\n<strong>输出：</strong>1333\n<strong>解释：</strong>\n1333 是一个数值平衡数，因为：\n- 数字 1 出现 1 次。\n- 数字 3 出现 3 次。 \n这也是严格大于 1000 的最小数值平衡数。\n注意，1022 不能作为本输入的答案，因为数字 0 的出现次数超过了 0 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3000\n<strong>输出：</strong>3133\n<strong>解释：</strong>\n3133 是一个数值平衡数，因为：\n- 数字 1 出现 1 次。\n- 数字 3 出现 3 次。 \n这也是严格大于 3000 的最小数值平衡数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= n &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2049.统计最高分的节点数目",
        "hardRate": "MEDIUM",
        "passRate": "51.78%",
        "problemsUrl": "https://leetcode.cn/problems/count-nodes-with-the-highest-score/",
        "solutionsUrl": "https://leetcode.cn/problems/count-nodes-with-the-highest-score/solution",
        "problemsDesc": "<p>给你一棵根节点为 <code>0</code> 的&nbsp;<strong>二叉树</strong>&nbsp;，它总共有 <code>n</code>&nbsp;个节点，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。同时给你一个下标从&nbsp;<strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>parents</code>&nbsp;表示这棵树，其中&nbsp;<code>parents[i]</code>&nbsp;是节点 <code>i</code>&nbsp;的父节点。由于节点 <code>0</code>&nbsp;是根，所以&nbsp;<code>parents[0] == -1</code>&nbsp;。</p>\n\n<p>一个子树的 <strong>大小</strong>&nbsp;为这个子树内节点的数目。每个节点都有一个与之关联的&nbsp;<strong>分数</strong>&nbsp;。求出某个节点分数的方法是，将这个节点和与它相连的边全部 <strong>删除</strong>&nbsp;，剩余部分是若干个 <strong>非空</strong>&nbsp;子树，这个节点的 <strong>分数</strong>&nbsp;为所有这些子树 <strong>大小的乘积</strong>&nbsp;。</p>\n\n<p>请你返回有 <strong>最高得分</strong>&nbsp;节点的 <strong>数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<p><img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/03/example-1.png\" style=\"width: 604px; height: 266px;\"></p>\n\n<pre><b>输入：</b>parents = [-1,2,0,2,0]\n<b>输出：</b>3\n<strong>解释：</strong>\n- 节点 0 的分数为：3 * 1 = 3\n- 节点 1 的分数为：4 = 4\n- 节点 2 的分数为：1 * 1 * 2 = 2\n- 节点 3 的分数为：4 = 4\n- 节点 4 的分数为：4 = 4\n最高得分为 4 ，有三个节点得分为 4 （分别是节点 1，3 和 4 ）。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"example-2\" src=\"https://assets.leetcode.com/uploads/2021/10/03/example-2.png\" style=\"width: 95px; height: 143px;\"></p>\n\n<pre><b>输入：</b>parents = [-1,2,0]\n<b>输出：</b>2\n<strong>解释：</strong>\n- 节点 0 的分数为：2 = 2\n- 节点 1 的分数为：2 = 2\n- 节点 2 的分数为：1 * 1 = 1\n最高分数为 2 ，有两个节点分数为 2 （分别为节点 0 和 1 ）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == parents.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>parents[0] == -1</code></li>\n\t<li>对于&nbsp;<code>i != 0</code>&nbsp;，有&nbsp;<code>0 &lt;= parents[i] &lt;= n - 1</code></li>\n\t<li><code>parents</code>&nbsp;表示一棵二叉树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2050.并行课程 III",
        "hardRate": "HARD",
        "passRate": "58.54%",
        "problemsUrl": "https://leetcode.cn/problems/parallel-courses-iii/",
        "solutionsUrl": "https://leetcode.cn/problems/parallel-courses-iii/solution",
        "problemsDesc": "<p>给你一个整数&nbsp;<code>n</code>&nbsp;，表示有&nbsp;<code>n</code>&nbsp;节课，课程编号从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;。同时给你一个二维整数数组&nbsp;<code>relations</code>&nbsp;，其中&nbsp;<code>relations[j] = [prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code>&nbsp;，表示课程&nbsp;<code>prevCourse<sub>j</sub></code>&nbsp;必须在课程&nbsp;<code>nextCourse<sub>j</sub></code>&nbsp;<strong>之前</strong>&nbsp;完成（先修课的关系）。同时给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>time</code>&nbsp;，其中&nbsp;<code>time[i]</code>&nbsp;表示完成第&nbsp;<code>(i+1)</code>&nbsp;门课程需要花费的 <strong>月份</strong>&nbsp;数。</p>\n\n<p>请你根据以下规则算出完成所有课程所需要的 <strong>最少</strong>&nbsp;月份数：</p>\n\n<ul>\n\t<li>如果一门课的所有先修课都已经完成，你可以在 <strong>任意</strong>&nbsp;时间开始这门课程。</li>\n\t<li>你可以&nbsp;<strong>同时</strong>&nbsp;上&nbsp;<strong>任意门课程</strong>&nbsp;。</li>\n</ul>\n\n<p>请你返回完成所有课程所需要的 <strong>最少</strong>&nbsp;月份数。</p>\n\n<p><strong>注意：</strong>测试数据保证一定可以完成所有课程（也就是先修课的关系构成一个有向无环图）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/07/ex1.png\" style=\"width: 392px; height: 232px;\"></strong></p>\n\n<pre><strong>输入：</strong>n = 3, relations = [[1,3],[2,3]], time = [3,2,5]\n<b>输出：</b>8\n<b>解释：</b>上图展示了输入数据所表示的先修关系图，以及完成每门课程需要花费的时间。\n你可以在月份 0 同时开始课程 1 和 2 。\n课程 1 花费 3 个月，课程 2 花费 2 个月。\n所以，最早开始课程 3 的时间是月份 3 ，完成所有课程所需时间为 3 + 5 = 8 个月。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/07/ex2.png\" style=\"width: 500px; height: 365px;\"></strong></p>\n\n<pre><b>输入：</b>n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]\n<b>输出：</b>12\n<b>解释：</b>上图展示了输入数据所表示的先修关系图，以及完成每门课程需要花费的时间。\n你可以在月份 0 同时开始课程 1 ，2 和 3 。\n在月份 1，2 和 3 分别完成这三门课程。\n课程 4 需在课程 3 之后开始，也就是 3 个月后。课程 4 在 3 + 4 = 7 月完成。\n课程 5 需在课程 1，2，3 和 4 之后开始，也就是在 max(1,2,3,7) = 7 月开始。\n所以完成所有课程所需的最少时间为 7 + 5 = 12 个月。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= relations.length &lt;= min(n * (n - 1) / 2, 5 * 10<sup>4</sup>)</code></li>\n\t<li><code>relations[j].length == 2</code></li>\n\t<li><code>1 &lt;= prevCourse<sub>j</sub>, nextCourse<sub>j</sub> &lt;= n</code></li>\n\t<li><code>prevCourse<sub>j</sub> != nextCourse<sub>j</sub></code></li>\n\t<li>所有的先修课程对&nbsp;<code>[prevCourse<sub>j</sub>, nextCourse<sub>j</sub>]</code>&nbsp;都是 <strong>互不相同</strong>&nbsp;的。</li>\n\t<li><code>time.length == n</code></li>\n\t<li><code>1 &lt;= time[i] &lt;= 10<sup>4</sup></code></li>\n\t<li>先修课程图是一个有向无环图。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2051.商店中每个成员的级别",
        "hardRate": "MEDIUM",
        "passRate": "65.22%",
        "problemsUrl": "https://leetcode.cn/problems/the-category-of-each-member-in-the-store/",
        "solutionsUrl": "https://leetcode.cn/problems/the-category-of-each-member-in-the-store/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2052.将句子分隔成行的最低成本",
        "hardRate": "MEDIUM",
        "passRate": "48.48%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-to-separate-sentence-into-rows/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-to-separate-sentence-into-rows/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2053.数组中第 K 个独一无二的字符串",
        "hardRate": "EASY",
        "passRate": "71.13%",
        "problemsUrl": "https://leetcode.cn/problems/kth-distinct-string-in-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/kth-distinct-string-in-an-array/solution",
        "problemsDesc": "<p><strong>独一无二的字符串</strong>&nbsp;指的是在一个数组中只出现过 <strong>一次</strong>&nbsp;的字符串。</p>\n\n<p>给你一个字符串数组&nbsp;<code>arr</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;，请你返回&nbsp;<code>arr</code>&nbsp;中第&nbsp;<code>k</code>&nbsp;个&nbsp;<strong>独一无二的字符串</strong>&nbsp;。如果&nbsp;<strong>少于</strong>&nbsp;<code>k</code>&nbsp;个独一无二的字符串，那么返回&nbsp;<strong>空字符串</strong>&nbsp;<code>\"\"</code>&nbsp;。</p>\n\n<p>注意，按照字符串在原数组中的 <strong>顺序</strong>&nbsp;找到第 <code>k</code>&nbsp;个独一无二字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre><b>输入：</b>arr = [\"d\",\"b\",\"c\",\"b\",\"c\",\"a\"], k = 2\n<b>输出：</b>\"a\"\n<strong>解释：</strong>\narr 中独一无二字符串包括 \"d\" 和 \"a\"<code>&nbsp;。</code>\n\"d\" 首先出现，所以它是第 1 个独一无二字符串。\n\"a\" 第二个出现，所以它是 2 个独一无二字符串。\n由于 k == 2 ，返回 \"a\" 。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre><b>输入：</b>arr = [\"aaa\",\"aa\",\"a\"], k = 1\n<b>输出：</b>\"aaa\"\n<strong>解释：</strong>\narr 中所有字符串都是独一无二的，所以返回第 1 个字符串 \"aaa\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>arr = [\"a\",\"b\",\"a\"], k = 3\n<b>输出：</b>\"\"\n<strong>解释：</strong>\n唯一一个独一无二字符串是 \"b\" 。由于少于 3 个独一无二字符串，我们返回空字符串 \"\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= arr.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= arr[i].length &lt;= 5</code></li>\n\t<li><code>arr[i]</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2054.两个最好的不重叠活动",
        "hardRate": "MEDIUM",
        "passRate": "38.30%",
        "problemsUrl": "https://leetcode.cn/problems/two-best-non-overlapping-events/",
        "solutionsUrl": "https://leetcode.cn/problems/two-best-non-overlapping-events/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>events</code>&nbsp;，其中&nbsp;<code>events[i] = [startTime<sub>i</sub>, endTime<sub>i</sub>, value<sub>i</sub>]</code>&nbsp;。第&nbsp;<code>i</code>&nbsp;个活动开始于&nbsp;<code>startTime<sub>i</sub></code>&nbsp;，结束于&nbsp;<code>endTime<sub>i</sub></code>&nbsp;，如果你参加这个活动，那么你可以得到价值&nbsp;<code>value<sub>i</sub></code>&nbsp;。你 <strong>最多</strong>&nbsp;可以参加&nbsp;<strong>两个时间不重叠</strong>&nbsp;活动，使得它们的价值之和 <strong>最大</strong>&nbsp;。</p>\n\n<p>请你返回价值之和的 <strong>最大值</strong>&nbsp;。</p>\n\n<p>注意，活动的开始时间和结束时间是 <strong>包括</strong>&nbsp;在活动时间内的，也就是说，你不能参加两个活动且它们之一的开始时间等于另一个活动的结束时间。更具体的，如果你参加一个活动，且结束时间为 <code>t</code>&nbsp;，那么下一个活动必须在&nbsp;<code>t + 1</code>&nbsp;或之后的时间开始。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture5.png\" style=\"width: 400px; height: 75px;\"></p>\n\n<pre><b>输入：</b>events = [[1,3,2],[4,5,2],[2,4,3]]\n<b>输出：</b>4\n<strong>解释：</strong>选择绿色的活动 0 和 1 ，价值之和为 2 + 2 = 4 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"Example 1 Diagram\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture1.png\" style=\"width: 400px; height: 77px;\"></p>\n\n<pre><b>输入：</b>events = [[1,3,2],[4,5,2],[1,5,5]]\n<b>输出：</b>5\n<strong>解释：</strong>选择活动 2 ，价值和为 5 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/21/picture3.png\" style=\"width: 400px; height: 66px;\"></p>\n\n<pre><b>输入：</b>events = [[1,5,3],[1,5,1],[6,6,5]]\n<b>输出：</b>8\n<strong>解释：</strong>选择活动 0 和 2 ，价值之和为 3 + 5 = 8 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= events.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>events[i].length == 3</code></li>\n\t<li><code>1 &lt;= startTime<sub>i</sub> &lt;= endTime<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= value<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2055.蜡烛之间的盘子",
        "hardRate": "MEDIUM",
        "passRate": "43.42%",
        "problemsUrl": "https://leetcode.cn/problems/plates-between-candles/",
        "solutionsUrl": "https://leetcode.cn/problems/plates-between-candles/solution",
        "problemsDesc": "<p>给你一个长桌子，桌子上盘子和蜡烛排成一列。给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>s</code>&nbsp;，它只包含字符&nbsp;<code>'*'</code> 和&nbsp;<code>'|'</code>&nbsp;，其中&nbsp;<code>'*'</code>&nbsp;表示一个 <strong>盘子</strong>&nbsp;，<code>'|'</code>&nbsp;表示一支&nbsp;<strong>蜡烛</strong>&nbsp;。</p>\n\n<p>同时给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>&nbsp;表示 <strong>子字符串</strong>&nbsp;<code>s[left<sub>i</sub>...right<sub>i</sub>]</code>&nbsp;（<strong>包含左右端点的字符</strong>）。对于每个查询，你需要找到 <strong>子字符串中</strong>&nbsp;在 <strong>两支蜡烛之间</strong>&nbsp;的盘子的 <b>数目</b>&nbsp;。如果一个盘子在 <strong>子字符串中</strong>&nbsp;左边和右边 <strong>都</strong>&nbsp;至少有一支蜡烛，那么这个盘子满足在 <strong>两支蜡烛之间</strong>&nbsp;。</p>\n\n<ul>\n\t<li>比方说，<code>s = \"||**||**|*\"</code>&nbsp;，查询&nbsp;<code>[3, 8]</code>&nbsp;，表示的是子字符串&nbsp;<code>\"*||<strong><em>**</em></strong>|\"</code>&nbsp;。子字符串中在两支蜡烛之间的盘子数目为&nbsp;<code>2</code>&nbsp;，子字符串中右边两个盘子在它们左边和右边 <strong>都 </strong>至少有一支蜡烛。</li>\n</ul>\n\n<p>请你返回一个整数数组&nbsp;<code>answer</code>&nbsp;，其中&nbsp;<code>answer[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个查询的答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p><img alt=\"ex-1\" src=\"https://assets.leetcode.com/uploads/2021/10/04/ex-1.png\" style=\"width: 400px; height: 134px;\"></p>\n\n<pre><b>输入：</b>s = \"**|**|***|\", queries = [[2,5],[5,9]]\n<b>输出：</b>[2,3]\n<b>解释：</b>\n- queries[0] 有两个盘子在蜡烛之间。\n- queries[1] 有三个盘子在蜡烛之间。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<p><img alt=\"ex-2\" src=\"https://assets.leetcode.com/uploads/2021/10/04/ex-2.png\" style=\"width: 600px; height: 193px;\"></p>\n\n<pre><b>输入：</b>s = \"***|**|*****|**||**|*\", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]\n<b>输出：</b>[9,0,0,0,0]\n<strong>解释：</strong>\n- queries[0] 有 9 个盘子在蜡烛之间。\n- 另一个查询没有盘子在蜡烛之间。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code>&nbsp;只包含字符&nbsp;<code>'*'</code> 和&nbsp;<code>'|'</code>&nbsp;。</li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>queries[i].length == 2</code></li>\n\t<li><code>0 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt; s.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2056.棋盘上有效移动组合的数目",
        "hardRate": "HARD",
        "passRate": "58.84%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-valid-move-combinations-on-chessboard/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-valid-move-combinations-on-chessboard/solution",
        "problemsDesc": "<p>有一个&nbsp;<code>8 x 8</code>&nbsp;的棋盘，它包含&nbsp;<code>n</code>&nbsp;个棋子（棋子包括车，后和象三种）。给你一个长度为 <code>n</code>&nbsp;的字符串数组&nbsp;<code>pieces</code>&nbsp;，其中&nbsp;<code>pieces[i]</code>&nbsp;表示第 <code>i</code>&nbsp;个棋子的类型（车，后或象）。除此以外，还给你一个长度为 <code>n</code>&nbsp;的二维整数数组&nbsp;<code>positions</code>&nbsp;，其中 <code>positions[i] = [r<sub>i</sub>, c<sub>i</sub>]</code>&nbsp;表示第 <code>i</code>&nbsp;个棋子现在在棋盘上的位置为&nbsp;<code>(r<sub>i</sub>, c<sub>i</sub>)</code>&nbsp;，棋盘下标从 <strong>1</strong>&nbsp;开始。</p>\n\n<p>棋盘上每个棋子都可以移动 <b>至多一次</b>&nbsp;。每个棋子的移动中，首先选择移动的 <strong>方向</strong>&nbsp;，然后选择 <strong>移动的步数</strong>&nbsp;，同时你要确保移动过程中棋子不能移到棋盘以外的地方。棋子需按照以下规则移动：</p>\n\n<ul>\n\t<li>车可以 <strong>水平或者竖直</strong>&nbsp;从&nbsp;<code>(r, c)</code>&nbsp;沿着方向&nbsp;<code>(r+1, c)</code>，<code>(r-1, c)</code>，<code>(r, c+1)</code>&nbsp;或者&nbsp;<code>(r, c-1)</code>&nbsp;移动。</li>\n\t<li>后可以 <strong>水平竖直或者斜对角</strong>&nbsp;从&nbsp;<code>(r, c)</code> 沿着方向&nbsp;<code>(r+1, c)</code>，<code>(r-1, c)</code>，<code>(r, c+1)</code>，<code>(r, c-1)</code>，<code>(r+1, c+1)</code>，<code>(r+1, c-1)</code>，<code>(r-1, c+1)</code>，<code>(r-1, c-1)</code>&nbsp;移动。</li>\n\t<li>象可以 <strong>斜对角</strong>&nbsp;从&nbsp;<code>(r, c)</code>&nbsp;沿着方向&nbsp;<code>(r+1, c+1)</code>，<code>(r+1, c-1)</code>，<code>(r-1, c+1)</code>，<code>(r-1, c-1)</code>&nbsp;移动。</li>\n</ul>\n\n<p><strong>移动组合</strong>&nbsp;包含所有棋子的 <strong>移动</strong>&nbsp;。每一秒，每个棋子都沿着它们选择的方向往前移动 <strong>一步</strong>&nbsp;，直到它们到达目标位置。所有棋子从时刻 <code>0</code>&nbsp;开始移动。如果在某个时刻，两个或者更多棋子占据了同一个格子，那么这个移动组合 <strong>不有效</strong>&nbsp;。</p>\n\n<p>请你返回 <strong>有效</strong>&nbsp;移动组合的数目。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>初始时，<strong>不会有两个棋子</strong>&nbsp;在 <strong>同一个位置 。</strong></li>\n\t<li>有可能在一个移动组合中，有棋子不移动。</li>\n\t<li>如果两个棋子 <strong>直接相邻</strong>&nbsp;且两个棋子下一秒要互相占据对方的位置，可以将它们在同一秒内 <strong>交换位置</strong>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a1.png\" style=\"width: 215px; height: 215px;\" /></p>\n\n<pre>\n<b>输入：</b>pieces = [\"rook\"], positions = [[1,1]]\n<b>输出：</b>15\n<b>解释：</b>上图展示了棋子所有可能的移动。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a2.png\" style=\"width: 215px; height: 215px;\" /></p>\n\n<pre>\n<b>输入：</b>pieces = [\"queen\"], positions = [[1,1]]\n<b>输出：</b>22\n<b>解释：</b>上图展示了棋子所有可能的移动。\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a3.png\" style=\"width: 214px; height: 215px;\" /></p>\n\n<pre>\n<b>输入：</b>pieces = [\"bishop\"], positions = [[4,3]]\n<b>输出：</b>12\n<b>解释：</b>上图展示了棋子所有可能的移动。\n</pre>\n\n<p><strong>示例 4:</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a4.png\" style=\"width: 216px; height: 219px;\" /></p>\n\n<pre>\n<b>输入：</b>pieces = [\"rook\",\"rook\"], positions = [[1,1],[8,8]]\n<b>输出：</b>223\n<b>解释：</b>每个车有 15 种移动，所以总共有 15 * 15 = 225 种移动组合。\n但是，有两个是不有效的移动组合：\n- 将两个车都移动到 (8, 1) ，会导致它们在同一个格子相遇。\n- 将两个车都移动到 (1, 8) ，会导致它们在同一个格子相遇。\n所以，总共有 225 - 2 = 223 种有效移动组合。\n注意，有两种有效的移动组合，分别是一个车在 (1, 8) ，另一个车在 (8, 1) 。\n即使棋盘状态是相同的，这两个移动组合被视为不同的，因为每个棋子移动操作是不相同的。\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/09/23/a5.png\" style=\"width: 214px; height: 213px;\" /></p>\n\n<pre>\n<b>输入：</b>pieces = [\"queen\",\"bishop\"], positions = [[5,7],[3,4]]\n<b>输出：</b>281\n<b>解释：</b>总共有 12 * 24 = 288 种移动组合。\n但是，有一些不有效的移动组合：\n- 如果后停在 (6, 7) ，它会阻挡象到达 (6, 7) 或者 (7, 8) 。\n- 如果后停在 (5, 6) ，它会阻挡象到达 (5, 6) ，(6, 7) 或者 (7, 8) 。\n- 如果象停在 (5, 2) ，它会阻挡后到达 (5, 2) 或者 (5, 1) 。\n在 288 个移动组合当中，281 个是有效的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == pieces.length </code></li>\n\t<li><code>n == positions.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 4</code></li>\n\t<li><code>pieces</code>&nbsp;只包含字符串&nbsp;<code>\"rook\"</code>&nbsp;，<code>\"queen\"</code>&nbsp;和&nbsp;<code>\"bishop\"</code>&nbsp;。</li>\n\t<li>棋盘上总共最多只有一个后。</li>\n\t<li><code>1 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 8</code></li>\n\t<li>每一个&nbsp;<code>positions[i]</code>&nbsp;互不相同。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2057.值相等的最小索引",
        "hardRate": "EASY",
        "passRate": "75.39%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-index-with-equal-value/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-index-with-equal-value/solution",
        "problemsDesc": "<p>给你一个下标从 0 开始的整数数组 <code>nums</code> ，返回 <code>nums</code> 中满足<em> </em><code>i mod 10 == nums[i]</code><em> </em>的最小下标 <code>i</code> ；如果不存在这样的下标，返回<em> </em><code>-1</code><em> </em>。</p>\n\n<p><code>x mod y</code> 表示 <code>x</code> 除以 <code>y</code> 的 <strong>余数</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,1,2]\n<strong>输出：</strong>0\n<strong>解释：</strong>\ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\n所有下标都满足 i mod 10 == nums[i] ，所以返回最小下标 0\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [4,3,2,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>\ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 唯一一个满足 i mod 10 == nums[i] 的下标\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,3,4,5,6,7,8,9,0]\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在满足 i mod 10 == nums[i] 的下标\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>nums = [2,1,3,5,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>1 是唯一一个满足 i mod 10 == nums[i] 的下标\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 9</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2058.找出临界点之间的最小和最大距离",
        "hardRate": "MEDIUM",
        "passRate": "56.48%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/solution",
        "problemsDesc": "<p>链表中的 <strong>临界点</strong> 定义为一个 <strong>局部极大值点</strong> <strong>或</strong> <strong>局部极小值点 。</strong></p>\n\n<p>如果当前节点的值 <strong>严格大于</strong> 前一个节点和后一个节点，那么这个节点就是一个<strong>&nbsp; 局部极大值点</strong> 。</p>\n\n<p>如果当前节点的值 <strong>严格小于</strong> 前一个节点和后一个节点，那么这个节点就是一个<strong>&nbsp; 局部极小值点</strong> 。</p>\n\n<p>注意：节点只有在同时存在前一个节点和后一个节点的情况下，才能成为一个 <strong>局部极大值点 / 极小值点</strong> 。</p>\n\n<p>给你一个链表 <code>head</code> ，返回一个长度为 2 的数组<em> </em><code>[minDistance, maxDistance]</code> ，其中<em> </em><code>minDistance</code><em> </em>是任意两个不同临界点之间的最小距离，<code>maxDistance</code> 是任意两个不同临界点之间的最大距离。如果临界点少于两个，则返回 <code>[-1，-1]</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/13/a1.png\" style=\"width: 148px; height: 55px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [3,1]\n<strong>输出：</strong>[-1,-1]\n<strong>解释：</strong>链表 [3,1] 中不存在临界点。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/13/a2.png\" style=\"width: 624px; height: 46px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [5,3,1,2,5,1,2]\n<strong>输出：</strong>[1,3]\n<strong>解释：</strong>存在三个临界点：\n- [5,3,<em><strong>1</strong></em>,2,5,1,2]：第三个节点是一个局部极小值点，因为 1 比 3 和 2 小。\n- [5,3,1,2,<em><strong>5</strong></em>,1,2]：第五个节点是一个局部极大值点，因为 5 比 2 和 1 大。\n- [5,3,1,2,5,<em><strong>1</strong></em>,2]：第六个节点是一个局部极小值点，因为 1 比 5 和 2 小。\n第五个节点和第六个节点之间距离最小。minDistance = 6 - 5 = 1 。\n第三个节点和第六个节点之间距离最大。maxDistance = 6 - 3 = 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/14/a5.png\" style=\"width: 624px; height: 39px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,3,2,2,3,2,2,2,7]\n<strong>输出：</strong>[3,3]\n<strong>解释：</strong>存在两个临界点：\n- [1,<em><strong>3</strong></em>,2,2,3,2,2,2,7]：第二个节点是一个局部极大值点，因为 3 比 1 和 2 大。\n- [1,3,2,2,<em><strong>3</strong></em>,2,2,2,7]：第五个节点是一个局部极大值点，因为 3 比 2 和 2 大。\n最小和最大距离都存在于第二个节点和第五个节点之间。\n因此，minDistance 和 maxDistance 是 5 - 2 = 3 。\n注意，最后一个节点不算一个局部极大值点，因为它之后就没有节点了。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/13/a4.png\" style=\"width: 345px; height: 52px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [2,3,3,2]\n<strong>输出：</strong>[-1,-1]\n<strong>解释：</strong>链表 [2,3,3,2] 中不存在临界点。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>链表中节点的数量在范围 <code>[2, 10<sup>5</sup>]</code> 内</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2059.转化数字的最小运算数",
        "hardRate": "MEDIUM",
        "passRate": "48.18%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-operations-to-convert-number/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-operations-to-convert-number/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，该数组由 <strong>互不相同</strong> 的数字组成。另给你两个整数 <code>start</code> 和 <code>goal</code> 。</p>\n\n<p>整数 <code>x</code> 的值最开始设为 <code>start</code> ，你打算执行一些运算使 <code>x</code> 转化为 <code>goal</code> 。你可以对数字 <code>x</code> 重复执行下述运算：</p>\n\n<p>如果 <code>0 &lt;= x &lt;= 1000</code> ，那么，对于数组中的任一下标 <code>i</code>（<code>0 &lt;= i &lt; nums.length</code>），可以将 <code>x</code> 设为下述任一值：</p>\n\n<ul>\n\t<li><code>x + nums[i]</code></li>\n\t<li><code>x - nums[i]</code></li>\n\t<li><code>x ^ nums[i]</code>（按位异或 XOR）</li>\n</ul>\n\n<p>注意，你可以按任意顺序使用每个 <code>nums[i]</code> 任意次。使 <code>x</code> 越过 <code>0 &lt;= x &lt;= 1000</code> 范围的运算同样可以生效，但该该运算执行后将不能执行其他运算。</p>\n\n<p>返回将 <code>x = start</code><em> </em>转化为<em> </em><code>goal</code><em> </em>的最小操作数；如果无法完成转化，则返回<em> </em><code>-1</code><em> </em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,4,12], start = 2, goal = 12\n<strong>输出：</strong>2\n<strong>解释：</strong>\n可以按 2 → 14 → 12 的转化路径进行，只需执行下述 2 次运算：\n- 2 + 12 = 14\n- 14 - 2 = 12\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,5,7], start = 0, goal = -4\n<strong>输出：</strong>2\n<strong>解释：</strong>\n可以按 0 → 3 → -4 的转化路径进行，只需执行下述 2 次运算：\n- 0 + 3 = 3\n- 3 - 7 = -4\n注意，最后一步运算使 x 超过范围 0 &lt;= x &lt;= 1000 ，但该运算仍然可以生效。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,8,16], start = 0, goal = 1\n<strong>输出：</strong>-1\n<strong>解释：</strong>\n无法将 0 转化为 1</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i], goal &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= start &lt;= 1000</code></li>\n\t<li><code>start != goal</code></li>\n\t<li><code>nums</code> 中的所有整数互不相同</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2060.同源字符串检测",
        "hardRate": "HARD",
        "passRate": "40.35%",
        "problemsUrl": "https://leetcode.cn/problems/check-if-an-original-string-exists-given-two-encoded-strings/",
        "solutionsUrl": "https://leetcode.cn/problems/check-if-an-original-string-exists-given-two-encoded-strings/solution",
        "problemsDesc": "<p>原字符串由小写字母组成，可以按下述步骤编码：</p>\n\n<ul>\n\t<li>任意将其 <strong>分割</strong> 为由若干 <strong>非空</strong> 子字符串组成的一个 <strong>序列</strong> 。</li>\n\t<li>任意选择序列中的一些元素（也可能不选择），然后将这些元素替换为元素各自的长度（作为一个数字型的字符串）。</li>\n\t<li>重新 <strong>顺次连接</strong> 序列，得到编码后的字符串。</li>\n</ul>\n\n<p>例如，编码 <code>\"abcdefghijklmnop\"</code> 的一种方法可以描述为：</p>\n\n<ul>\n\t<li>将原字符串分割得到一个序列：<code>[\"ab\", \"cdefghijklmn\", \"o\", \"p\"]</code> 。</li>\n\t<li>选出其中第二个和第三个元素并分别替换为它们自身的长度。序列变为 <code>[\"ab\", \"12\", \"1\", \"p\"]</code> 。</li>\n\t<li>重新顺次连接序列中的元素，得到编码后的字符串：<code>\"ab121p\"</code> 。</li>\n</ul>\n\n<p>给你两个编码后的字符串 <code>s1</code> 和 <code>s2</code> ，由小写英文字母和数字 <code>1-9</code> 组成。如果存在能够同时编码得到 <code>s1</code> 和 <code>s2</code> 原字符串，返回 <code>true</code> ；否则，返回 <code>false</code>。</p>\n\n<p><strong>注意：</strong>生成的测试用例满足 <code>s1</code> 和 <code>s2</code> 中连续数字数不超过 <code>3</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s1 = \"internationalization\", s2 = \"i18n\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\"internationalization\" 可以作为原字符串\n- \"internationalization\" \n  -&gt; 分割：      [\"internationalization\"]\n  -&gt; 不替换任何元素\n  -&gt; 连接：      \"internationalization\"，得到 s1\n- \"internationalization\"\n  -&gt; 分割：      [\"i\", \"nternationalizatio\", \"n\"]\n  -&gt; 替换：      [\"i\", \"18\",                 \"n\"]\n  -&gt; 连接：      \"i18n\"，得到 s2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s1 = \"l123e\", s2 = \"44\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\"leetcode\" 可以作为原字符串\n- \"leetcode\" \n  -&gt; 分割：       [\"l\", \"e\", \"et\", \"cod\", \"e\"]\n  -&gt; 替换：       [\"l\", \"1\", \"2\",  \"3\",   \"e\"]\n  -&gt; 连接：       \"l123e\"，得到 s1\n- \"leetcode\" \n  -&gt; 分割：       [\"leet\", \"code\"]\n  -&gt; 替换：       [\"4\",    \"4\"]\n  -&gt; 连接：       \"44\"，得到 s2\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>s1 = \"a5b\", s2 = \"c5b\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在这样的原字符串\n- 编码为 s1 的字符串必须以字母 'a' 开头\n- 编码为 s2 的字符串必须以字母 'c' 开头\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>s1 = \"112s\", s2 = \"g841\"\n<strong>输出：</strong>true\n<strong>解释：</strong>\"gaaaaaaaaaaaas\" 可以作为原字符串\n- \"gaaaaaaaaaaaas\"\n  -&gt; 分割：       [\"g\", \"aaaaaaaaaaaa\", \"s\"]\n  -&gt; 替换：       [\"1\", \"12\",           \"s\"]\n  -&gt; 连接：       \"112s\"，得到 s1\n- \"gaaaaaaaaaaaas\"\n  -&gt; 分割：       [\"g\", \"aaaaaaaa\", \"aaaa\", \"s\"]\n  -&gt; 替换：       [\"g\", \"8\",        \"4\",    \"1\"]\n  -&gt; 连接         \"g841\"，得到 s2\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><strong>输入：</strong>s1 = \"ab\", s2 = \"a2\"\n<strong>输出：</strong>false\n<strong>解释：</strong>不存在这样的原字符串\n- 编码为 s1 的字符串由两个字母组成\n- 编码为 s2 的字符串由三个字母组成\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s1.length, s2.length &lt;= 40</code></li>\n\t<li><code>s1</code> 和 <code>s2</code> 仅由数字 <code>1-9</code> 和小写英文字母组成</li>\n\t<li><code>s1</code> 和 <code>s2</code> 中连续数字数不超过 <code>3</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2061.扫地机器人清扫过的空间个数",
        "hardRate": "MEDIUM",
        "passRate": "50.23%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-spaces-cleaning-robot-cleaned/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-spaces-cleaning-robot-cleaned/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2062.统计字符串中的元音子字符串",
        "hardRate": "EASY",
        "passRate": "62.59%",
        "problemsUrl": "https://leetcode.cn/problems/count-vowel-substrings-of-a-string/",
        "solutionsUrl": "https://leetcode.cn/problems/count-vowel-substrings-of-a-string/solution",
        "problemsDesc": "<p><strong>子字符串</strong> 是字符串中的一个连续（非空）的字符序列。</p>\n\n<p><strong>元音子字符串</strong> 是 <strong>仅</strong> 由元音（<code>'a'</code>、<code>'e'</code>、<code>'i'</code>、<code>'o'</code> 和 <code>'u'</code>）组成的一个子字符串，且必须包含 <strong>全部五种</strong> 元音。</p>\n\n<p>给你一个字符串 <code>word</code> ，统计并返回 <code>word</code> 中 <strong>元音子字符串的数目</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"aeiouu\"\n<strong>输出：</strong>2\n<strong>解释：</strong>下面列出 word 中的元音子字符串（斜体加粗部分）：\n- \"<em><strong>aeiou</strong></em>u\"\n- \"<strong><em>aeiouu</em></strong>\"\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"unicornarihan\"\n<strong>输出：</strong>0\n<strong>解释：</strong>word 中不含 5 种元音，所以也不会存在元音子字符串。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"cuaieuouac\"\n<strong>输出：</strong>7\n<strong>解释：</strong>下面列出 word 中的元音子字符串（斜体加粗部分）：\n- \"c<em><strong>uaieuo</strong></em>uac\"\n- \"c<em><strong>uaieuou</strong></em>ac\"\n- \"c<em><strong>uaieuoua</strong></em>c\"\n- \"cu<em><strong>aieuo</strong></em>uac\"\n- \"cu<em><strong>aieuou</strong></em>ac\"\n- \"cu<em><strong>aieuoua</strong></em>c\"\n- \"cua<em><strong>ieuoua</strong></em>c\"</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"bbaeixoubb\"\n<strong>输出：</strong>0\n<strong>解释：</strong>所有包含全部五种元音的子字符串都含有辅音，所以不存在元音子字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code> 仅由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2063.所有子字符串中的元音",
        "hardRate": "MEDIUM",
        "passRate": "51.71%",
        "problemsUrl": "https://leetcode.cn/problems/vowels-of-all-substrings/",
        "solutionsUrl": "https://leetcode.cn/problems/vowels-of-all-substrings/solution",
        "problemsDesc": "<p>给你一个字符串 <code>word</code> ，返回 <code>word</code> 的所有子字符串中 <strong>元音的总数</strong> ，元音是指 <code>'a'</code>、<code>'e'</code><em>、</em><code>'i'</code><em>、</em><code>'o'</code><em> </em>和 <code>'u'</code><em> 。</em></p>\n\n<p><strong>子字符串</strong> 是字符串中一个连续（非空）的字符序列。</p>\n\n<p><strong>注意：</strong>由于对 <code>word</code> 长度的限制比较宽松，答案可能超过有符号 32 位整数的范围。计算时需当心。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"aba\"\n<strong>输出：</strong>6\n<strong>解释：</strong>\n所有子字符串是：\"a\"、\"ab\"、\"aba\"、\"b\"、\"ba\" 和 \"a\" 。\n- \"b\" 中有 0 个元音\n- \"a\"、\"ab\"、\"ba\" 和 \"a\" 每个都有 1 个元音\n- \"aba\" 中有 2 个元音\n因此，元音总数 = 0 + 1 + 1 + 1 + 1 + 2 = 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"abc\"\n<strong>输出：</strong>3\n<strong>解释：</strong>\n所有子字符串是：\"a\"、\"ab\"、\"abc\"、\"b\"、\"bc\" 和 \"c\" 。\n- \"a\"、\"ab\" 和 \"abc\" 每个都有 1 个元音\n- \"b\"、\"bc\" 和 \"c\" 每个都有 0 个元音\n因此，元音总数 = 1 + 1 + 1 + 0 + 0 + 0 = 3 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"ltcd\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\"ltcd\" 的子字符串均不含元音。</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre>\n<strong>输入：</strong>word = \"noosabasboosa\"\n<strong>输出：</strong>237\n<strong>解释：</strong>所有子字符串中共有 237 个元音。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>word</code> 由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2064.分配给商店的最多商品的最小值",
        "hardRate": "MEDIUM",
        "passRate": "45.04%",
        "problemsUrl": "https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store/",
        "solutionsUrl": "https://leetcode.cn/problems/minimized-maximum-of-products-distributed-to-any-store/solution",
        "problemsDesc": "<p>给你一个整数&nbsp;<code>n</code>&nbsp;，表示有&nbsp;<code>n</code>&nbsp;间零售商店。总共有&nbsp;<code>m</code>&nbsp;种产品，每种产品的数目用一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>quantities</code>&nbsp;表示，其中&nbsp;<code>quantities[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;种商品的数目。</p>\n\n<p>你需要将 <strong>所有商品</strong>&nbsp;分配到零售商店，并遵守这些规则：</p>\n\n<ul>\n\t<li>一间商店 <strong>至多</strong>&nbsp;只能有 <strong>一种商品</strong> ，但一间商店拥有的商品数目可以为&nbsp;<strong>任意</strong>&nbsp;件。</li>\n\t<li>分配后，每间商店都会被分配一定数目的商品（可能为 <code>0</code>&nbsp;件）。用&nbsp;<code>x</code>&nbsp;表示所有商店中分配商品数目的最大值，你希望 <code>x</code>&nbsp;越小越好。也就是说，你想 <strong>最小化</strong>&nbsp;分配给任意商店商品数目的 <strong>最大值</strong>&nbsp;。</li>\n</ul>\n\n<p>请你返回最小的可能的&nbsp;<code>x</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>n = 6, quantities = [11,6]\n<b>输出：</b>3\n<strong>解释： </strong>一种最优方案为：\n- 11 件种类为 0 的商品被分配到前 4 间商店，分配数目分别为：2，3，3，3 。\n- 6 件种类为 1 的商品被分配到另外 2 间商店，分配数目分别为：3，3 。\n分配给所有商店的最大商品数目为 max(2, 3, 3, 3, 3, 3) = 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>n = 7, quantities = [15,10,10]\n<b>输出：</b>5\n<b>解释：</b>一种最优方案为：\n- 15 件种类为 0 的商品被分配到前 3 间商店，分配数目为：5，5，5 。\n- 10 件种类为 1 的商品被分配到接下来 2 间商店，数目为：5，5 。\n- 10 件种类为 2 的商品被分配到最后 2 间商店，数目为：5，5 。\n分配给所有商店的最大商品数目为 max(5, 5, 5, 5, 5, 5, 5) = 5 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>n = 1, quantities = [100000]\n<b>输出：</b>100000\n<b>解释：</b>唯一一种最优方案为：\n- 所有 100000 件商品 0 都分配到唯一的商店中。\n分配给所有商店的最大商品数目为 max(100000) = 100000 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == quantities.length</code></li>\n\t<li><code>1 &lt;= m &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= quantities[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2065.最大化一张图中的路径价值",
        "hardRate": "HARD",
        "passRate": "54.27%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-path-quality-of-a-graph/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-path-quality-of-a-graph/solution",
        "problemsDesc": "<p>给你一张 <strong>无向</strong>&nbsp;图，图中有 <code>n</code>&nbsp;个节点，节点编号从 <code>0</code>&nbsp;到 <code>n - 1</code>&nbsp;（<strong>都包括</strong>）。同时给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>values</code>&nbsp;，其中&nbsp;<code>values[i]</code>&nbsp;是第 <code>i</code>&nbsp;个节点的 <strong>价值</strong>&nbsp;。同时给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[j] = [u<sub>j</sub>, v<sub>j</sub>, time<sub>j</sub>]</code>&nbsp;表示节点&nbsp;<code>u<sub>j</sub></code> 和&nbsp;<code>v<sub>j</sub></code>&nbsp;之间有一条需要&nbsp;<code>time<sub>j</sub></code>&nbsp;秒才能通过的无向边。最后，给你一个整数&nbsp;<code>maxTime</code>&nbsp;。</p>\n\n<p><strong>合法路径</strong>&nbsp;指的是图中任意一条从节点&nbsp;<code>0</code>&nbsp;开始，最终回到节点 <code>0</code>&nbsp;，且花费的总时间 <strong>不超过</strong>&nbsp;<code>maxTime</code> 秒的一条路径。你可以访问一个节点任意次。一条合法路径的 <b>价值</b>&nbsp;定义为路径中 <strong>不同节点</strong>&nbsp;的价值 <strong>之和</strong>&nbsp;（每个节点的价值 <strong>至多</strong>&nbsp;算入价值总和中一次）。</p>\n\n<p>请你返回一条合法路径的 <strong>最大</strong>&nbsp;价值。</p>\n\n<p><strong>注意：</strong>每个节点 <strong>至多</strong>&nbsp;有 <strong>四条</strong>&nbsp;边与之相连。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex1drawio.png\" style=\"width: 269px; height: 170px;\" /></p>\n\n<pre>\n<b>输入：</b>values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49\n<b>输出：</b>75\n<strong>解释：</strong>\n一条可能的路径为：0 -&gt; 1 -&gt; 0 -&gt; 3 -&gt; 0 。总花费时间为 10 + 10 + 10 + 10 = 40 &lt;= 49 。\n访问过的节点为 0 ，1 和 3 ，最大路径价值为 0 + 32 + 43 = 75 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex2drawio.png\" style=\"width: 269px; height: 170px;\" /></p>\n\n<pre>\n<b>输入：</b>values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30\n<b>输出：</b>25\n<strong>解释：</strong>\n一条可能的路径为：0 -&gt; 3 -&gt; 0 。总花费时间为 10 + 10 = 20 &lt;= 30 。\n访问过的节点为 0 和 3 ，最大路径价值为 5 + 20 = 25 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/19/ex31drawio.png\" style=\"width: 236px; height: 170px;\" /></p>\n\n<pre>\n<b>输入：</b>values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50\n<b>输出：</b>7\n<strong>解释：</strong>\n一条可能的路径为：0 -&gt; 1 -&gt; 3 -&gt; 1 -&gt; 0 。总花费时间为 10 + 13 + 13 + 10 = 46 &lt;= 50 。\n访问过的节点为 0 ，1 和 3 ，最大路径价值为 1 + 2 + 4 = 7 。</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/21/ex4drawio.png\" style=\"width: 270px; height: 71px;\" /></strong></p>\n\n<pre>\n<b>输入：</b>values = [0,1,2], edges = [[1,2,10]], maxTime = 10\n<b>输出：</b>0\n<b>解释：</b>\n唯一一条路径为 0 。总花费时间为 0 。\n唯一访问过的节点为 0 ，最大路径价值为 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == values.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= values[i] &lt;= 10<sup>8</sup></code></li>\n\t<li><code>0 &lt;= edges.length &lt;= 2000</code></li>\n\t<li><code>edges[j].length == 3 </code></li>\n\t<li><code>0 &lt;= u<sub>j </sub>&lt; v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>10 &lt;= time<sub>j</sub>, maxTime &lt;= 100</code></li>\n\t<li><code>[u<sub>j</sub>, v<sub>j</sub>]</code>&nbsp;所有节点对 <strong>互不相同</strong>&nbsp;。</li>\n\t<li>每个节点 <strong>至多有四条&nbsp;</strong>边。</li>\n\t<li>图可能不连通。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2066.账户余额",
        "hardRate": "MEDIUM",
        "passRate": "78.71%",
        "problemsUrl": "https://leetcode.cn/problems/account-balance/",
        "solutionsUrl": "https://leetcode.cn/problems/account-balance/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2067.等计数子串的数量",
        "hardRate": "MEDIUM",
        "passRate": "54.48%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-equal-count-substrings/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-equal-count-substrings/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2068.检查两个字符串是否几乎相等",
        "hardRate": "EASY",
        "passRate": "69.84%",
        "problemsUrl": "https://leetcode.cn/problems/check-whether-two-strings-are-almost-equivalent/",
        "solutionsUrl": "https://leetcode.cn/problems/check-whether-two-strings-are-almost-equivalent/solution",
        "problemsDesc": "<p>如果两个字符串 <code>word1</code>&nbsp;和 <code>word2</code>&nbsp;中从 <code>'a'</code>&nbsp;到 <code>'z'</code>&nbsp;每一个字母出现频率之差都 <strong>不超过</strong>&nbsp;<code>3</code>&nbsp;，那么我们称这两个字符串&nbsp;<code>word1</code> 和&nbsp;<code>word2</code> <strong>几乎相等</strong>&nbsp;。</p>\n\n<p>给你两个长度都为&nbsp;<code>n</code>&nbsp;的字符串&nbsp;<code>word1</code> 和&nbsp;<code>word2</code>&nbsp;，如果&nbsp;<code>word1</code>&nbsp;和&nbsp;<code>word2</code>&nbsp;<strong>几乎相等</strong>&nbsp;，请你返回&nbsp;<code>true</code>&nbsp;，否则返回&nbsp;<code>false</code>&nbsp;。</p>\n\n<p>一个字母 <code>x</code>&nbsp;的出现 <strong>频率</strong>&nbsp;指的是它在字符串中出现的次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>word1 = \"aaaa\", word2 = \"bccb\"\n<b>输出：</b>false\n<b>解释：</b>字符串 \"aaaa\" 中有 4 个 'a' ，但是 \"bccb\" 中有 0 个 'a' 。\n两者之差为 4 ，大于上限 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>word1 = \"abcdeef\", word2 = \"abaaacc\"\n<b>输出：</b>true\n<b>解释：</b>word1 和 word2 中每个字母出现频率之差至多为 3 ：\n- 'a' 在 word1 中出现了 1 次，在 word2 中出现了 4 次，差为 3 。\n- 'b' 在 word1 中出现了 1 次，在 word2 中出现了 1 次，差为 0 。\n- 'c' 在 word1 中出现了 1 次，在 word2 中出现了 2 次，差为 1 。\n- 'd' 在 word1 中出现了 1 次，在 word2 中出现了 0 次，差为 1 。\n- 'e' 在 word1 中出现了 2 次，在 word2 中出现了 0 次，差为 2 。\n- 'f' 在 word1 中出现了 1 次，在 word2 中出现了 0 次，差为 1 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>word1 = \"cccddabba\", word2 = \"babababab\"\n<b>输出：</b>true\n<b>解释：</b>word1 和 word2 中每个字母出现频率之差至多为 3 ：\n- 'a' 在 word1 中出现了 2 次，在 word2 中出现了 4 次，差为 2 。\n- 'b' 在 word1 中出现了 2 次，在 word2 中出现了 5 次，差为 3 。\n- 'c' 在 word1 中出现了 3 次，在 word2 中出现了 0 次，差为 3 。\n- 'd' 在 word1 中出现了 2 次，在 word2 中出现了 0 次，差为 2 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == word1.length == word2.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>word1</code> 和&nbsp;<code>word2</code>&nbsp;都只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2069.模拟行走机器人 II",
        "hardRate": "MEDIUM",
        "passRate": "22.12%",
        "problemsUrl": "https://leetcode.cn/problems/walking-robot-simulation-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/walking-robot-simulation-ii/solution",
        "problemsDesc": "<p>给你一个在 XY 平面上的&nbsp;<code>width x height</code>&nbsp;的网格图，<strong>左下角</strong>&nbsp;的格子为&nbsp;<code>(0, 0)</code>&nbsp;，<strong>右上角</strong>&nbsp;的格子为&nbsp;<code>(width - 1, height - 1)</code>&nbsp;。网格图中相邻格子为四个基本方向之一（<code>\"North\"</code>，<code>\"East\"</code>，<code>\"South\"</code>&nbsp;和&nbsp;<code>\"West\"</code>）。一个机器人 <strong>初始</strong>&nbsp;在格子&nbsp;<code>(0, 0)</code>&nbsp;，方向为&nbsp;<code>\"East\"</code>&nbsp;。</p>\n\n<p>机器人可以根据指令移动指定的 <strong>步数</strong>&nbsp;。每一步，它可以执行以下操作。</p>\n\n<ol>\n\t<li>沿着当前方向尝试 <strong>往前一步</strong>&nbsp;。</li>\n\t<li>如果机器人下一步将到达的格子 <strong>超出了边界</strong>&nbsp;，机器人会 <strong>逆时针</strong>&nbsp;转 90 度，然后再尝试往前一步。</li>\n</ol>\n\n<p>如果机器人完成了指令要求的移动步数，它将停止移动并等待下一个指令。</p>\n\n<p>请你实现&nbsp;<code>Robot</code>&nbsp;类：</p>\n\n<ul>\n\t<li><code>Robot(int width, int height)</code>&nbsp;初始化一个&nbsp;<code>width x height</code>&nbsp;的网格图，机器人初始在&nbsp;<code>(0, 0)</code>&nbsp;，方向朝&nbsp;<code>\"East\"</code>&nbsp;。</li>\n\t<li><code>void step(int num)</code>&nbsp;给机器人下达前进&nbsp;<code>num</code>&nbsp;步的指令。</li>\n\t<li><code>int[] getPos()</code>&nbsp;返回机器人当前所处的格子位置，用一个长度为 2 的数组&nbsp;<code>[x, y]</code>&nbsp;表示。</li>\n\t<li><code>String getDir()</code>&nbsp;返回当前机器人的朝向，为&nbsp;<code>\"North\"</code>&nbsp;，<code>\"East\"</code>&nbsp;，<code>\"South\"</code>&nbsp;或者&nbsp;<code>\"West\"</code>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"example-1\" src=\"https://assets.leetcode.com/uploads/2021/10/09/example-1.png\" style=\"width: 498px; height: 268px;\" /></p>\n\n<pre>\n<strong>输入：</strong>\n[\"Robot\", \"step\", \"step\", \"getPos\", \"getDir\", \"step\", \"step\", \"step\", \"getPos\", \"getDir\"]\n[[6, 3], [2], [2], [], [], [2], [1], [4], [], []]\n<strong>输出：</strong>\n[null, null, null, [4, 0], \"East\", null, null, null, [1, 2], \"West\"]\n\n<strong>解释：</strong>\nRobot robot = new Robot(6, 3); // 初始化网格图，机器人在 (0, 0) ，朝东。\nrobot.step(2);  // 机器人朝东移动 2 步，到达 (2, 0) ，并朝东。\nrobot.step(2);  // 机器人朝东移动 2 步，到达 (4, 0) ，并朝东。\nrobot.getPos(); // 返回 [4, 0]\nrobot.getDir(); // 返回 \"East\"\nrobot.step(2);  // 朝东移动 1 步到达 (5, 0) ，并朝东。\n                // 下一步继续往东移动将出界，所以逆时针转变方向朝北。\n                // 然后，往北移动 1 步到达 (5, 1) ，并朝北。\nrobot.step(1);  // 朝北移动 1 步到达 (5, 2) ，并朝 <strong>北</strong> （不是朝西）。\nrobot.step(4);  // 下一步继续往北移动将出界，所以逆时针转变方向朝西。\n                // 然后，移动 4 步到 (1, 2) ，并朝西。\nrobot.getPos(); // 返回 [1, 2]\nrobot.getDir(); // 返回 \"West\"\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= width, height &lt;= 100</code></li>\n\t<li><code>1 &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li><code>step</code> ，<code>getPos</code>&nbsp;和&nbsp;<code>getDir</code>&nbsp;<strong>总共&nbsp;</strong>调用次数不超过&nbsp;<code>10<sup>4</sup></code>&nbsp;次。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2070.每一个查询的最大美丽值",
        "hardRate": "MEDIUM",
        "passRate": "45.13%",
        "problemsUrl": "https://leetcode.cn/problems/most-beautiful-item-for-each-query/",
        "solutionsUrl": "https://leetcode.cn/problems/most-beautiful-item-for-each-query/solution",
        "problemsDesc": "<p>给你一个二维整数数组&nbsp;<code>items</code>&nbsp;，其中&nbsp;<code>items[i] = [price<sub>i</sub>, beauty<sub>i</sub>]</code>&nbsp;分别表示每一个物品的 <strong>价格</strong>&nbsp;和 <strong>美丽值</strong>&nbsp;。</p>\n\n<p>同时给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>queries</code>&nbsp;。对于每个查询&nbsp;<code>queries[j]</code>&nbsp;，你想求出价格小于等于&nbsp;<code>queries[j]</code>&nbsp;的物品中，<strong>最大的美丽值</strong>&nbsp;是多少。如果不存在符合条件的物品，那么查询的结果为&nbsp;<code>0</code>&nbsp;。</p>\n\n<p>请你返回一个长度与 <code>queries</code>&nbsp;相同的数组<em>&nbsp;</em><code>answer</code>，其中<em>&nbsp;</em><code>answer[j]</code>是第&nbsp;<code>j</code>&nbsp;个查询的答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\n<b>输出：</b>[2,4,5,5,6,6]\n<strong>解释：</strong>\n- queries[0]=1 ，[1,2] 是唯一价格 &lt;= 1 的物品。所以这个查询的答案为 2 。\n- queries[1]=2 ，符合条件的物品有 [1,2] 和 [2,4] 。\n  它们中的最大美丽值为 4 。\n- queries[2]=3 和 queries[3]=4 ，符合条件的物品都为 [1,2] ，[3,2] ，[2,4] 和 [3,5] 。\n  它们中的最大美丽值为 5 。\n- queries[4]=5 和 queries[5]=6 ，所有物品都符合条件。\n  所以，答案为所有物品中的最大美丽值，为 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\n<b>输出：</b>[4]\n<b>解释：</b>\n每个物品的价格均为 1 ，所以我们选择最大美丽值 4 。\n注意，多个物品可能有相同的价格和美丽值。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>items = [[10,1000]], queries = [5]\n<b>输出：</b>[0]\n<strong>解释：</strong>\n没有物品的价格小于等于 5 ，所以没有物品可以选择。\n因此，查询的结果为 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= items.length, queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>items[i].length == 2</code></li>\n\t<li><code>1 &lt;= price<sub>i</sub>, beauty<sub>i</sub>, queries[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2071.你可以安排的最多任务数目",
        "hardRate": "HARD",
        "passRate": "29.92%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-tasks-you-can-assign/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-tasks-you-can-assign/solution",
        "problemsDesc": "<p>给你&nbsp;<code>n</code>&nbsp;个任务和&nbsp;<code>m</code>&nbsp;个工人。每个任务需要一定的力量值才能完成，需要的力量值保存在下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>tasks</code>&nbsp;中，第 <code>i</code>&nbsp;个任务需要&nbsp;<code>tasks[i]</code>&nbsp;的力量才能完成。每个工人的力量值保存在下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>workers</code>&nbsp;中，第&nbsp;<code>j</code>&nbsp;个工人的力量值为&nbsp;<code>workers[j]</code>&nbsp;。每个工人只能完成 <strong>一个</strong>&nbsp;任务，且力量值需要 <strong>大于等于</strong>&nbsp;该任务的力量要求值（即&nbsp;<code>workers[j] &gt;= tasks[i]</code>&nbsp;）。</p>\n\n<p>除此以外，你还有&nbsp;<code>pills</code>&nbsp;个神奇药丸，可以给 <strong>一个工人的力量值</strong>&nbsp;增加&nbsp;<code>strength</code>&nbsp;。你可以决定给哪些工人使用药丸，但每个工人&nbsp;<strong>最多</strong>&nbsp;只能使用&nbsp;<strong>一片</strong>&nbsp;药丸。</p>\n\n<p>给你下标从 <strong>0</strong>&nbsp;开始的整数数组<code>tasks</code> 和&nbsp;<code>workers</code>&nbsp;以及两个整数&nbsp;<code>pills</code> 和&nbsp;<code>strength</code>&nbsp;，请你返回 <strong>最多</strong>&nbsp;有多少个任务可以被完成。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>tasks = [<em><strong>3</strong></em>,<em><strong>2</strong></em>,<em><strong>1</strong></em>], workers = [<em><strong>0</strong></em>,<em><strong>3</strong></em>,<em><strong>3</strong></em>], pills = 1, strength = 1\n<b>输出：</b>3\n<strong>解释：</strong>\n我们可以按照如下方案安排药丸：\n- 给 0 号工人药丸。\n- 0 号工人完成任务 2（0 + 1 &gt;= 1）\n- 1 号工人完成任务 1（3 &gt;= 2）\n- 2 号工人完成任务 0（3 &gt;= 3）\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>tasks = [<em><strong>5</strong></em>,4], workers = [<em><strong>0</strong></em>,0,0], pills = 1, strength = 5\n<b>输出：</b>1\n<strong>解释：</strong>\n我们可以按照如下方案安排药丸：\n- 给 0 号工人药丸。\n- 0 号工人完成任务 0（0 + 5 &gt;= 5）\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>tasks = [<em><strong>10</strong></em>,<em><strong>15</strong></em>,30], workers = [<em><strong>0</strong></em>,<em><strong>10</strong></em>,10,10,10], pills = 3, strength = 10\n<b>输出：</b>2\n<strong>解释：</strong>\n我们可以按照如下方案安排药丸：\n- 给 0 号和 1 号工人药丸。\n- 0 号工人完成任务 0（0 + 10 &gt;= 10）\n- 1 号工人完成任务 1（10 + 10 &gt;= 15）\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><b>输入：</b>tasks = [<em><strong>5</strong></em>,9,<em><strong>8</strong></em>,<em><strong>5</strong></em>,9], workers = [1,<em><strong>6</strong></em>,<em><strong>4</strong></em>,2,<em><strong>6</strong></em>], pills = 1, strength = 5\n<b>输出：</b>3\n<strong>解释：</strong>\n我们可以按照如下方案安排药丸：\n- 给 2 号工人药丸。\n- 1 号工人完成任务 0（6 &gt;= 5）\n- 2 号工人完成任务 2（4 + 5 &gt;= 8）\n- 4 号工人完成任务 3（6 &gt;= 5）\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == tasks.length</code></li>\n\t<li><code>m == workers.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= pills &lt;= m</code></li>\n\t<li><code>0 &lt;= tasks[i], workers[j], strength &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2072.赢得比赛的大学",
        "hardRate": "EASY",
        "passRate": "68.73%",
        "problemsUrl": "https://leetcode.cn/problems/the-winner-university/",
        "solutionsUrl": "https://leetcode.cn/problems/the-winner-university/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2073.买票需要的时间",
        "hardRate": "EASY",
        "passRate": "61.65%",
        "problemsUrl": "https://leetcode.cn/problems/time-needed-to-buy-tickets/",
        "solutionsUrl": "https://leetcode.cn/problems/time-needed-to-buy-tickets/solution",
        "problemsDesc": "<p>有 <code>n</code> 个人前来排队买票，其中第 <code>0</code> 人站在队伍 <strong>最前方</strong> ，第 <code>(n - 1)</code> 人站在队伍 <strong>最后方</strong> 。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>tickets</code> ，数组长度为 <code>n</code> ，其中第 <code>i</code> 人想要购买的票数为 <code>tickets[i]</code> 。</p>\n\n<p>每个人买票都需要用掉 <strong>恰好 1 秒</strong> 。一个人 <strong>一次只能买一张票</strong> ，如果需要购买更多票，他必须走到&nbsp; <strong>队尾</strong> 重新排队（<strong>瞬间 </strong>发生，不计时间）。如果一个人没有剩下需要买的票，那他将会 <strong>离开</strong> 队伍。</p>\n\n<p>返回位于位置 <code>k</code>（下标从 <strong>0</strong> 开始）的人完成买票需要的时间（以秒为单位）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>tickets = [2,3,2], k = 2\n<strong>输出：</strong>6\n<strong>解释：</strong> \n- 第一轮，队伍中的每个人都买到一张票，队伍变为 [1, 2, 1] 。\n- 第二轮，队伍中的每个都又都买到一张票，队伍变为 [0, 1, 0] 。\n位置 2 的人成功买到 2 张票，用掉 3 + 3 = 6 秒。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>tickets = [5,1,1,1], k = 0\n<strong>输出：</strong>8\n<strong>解释：</strong>\n- 第一轮，队伍中的每个人都买到一张票，队伍变为 [4, 0, 0, 0] 。\n- 接下来的 4 轮，只有位置 0 的人在买票。\n位置 0 的人成功买到 5 张票，用掉 4 + 1 + 1 + 1 + 1 = 8 秒。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == tickets.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= tickets[i] &lt;= 100</code></li>\n\t<li><code>0 &lt;= k &lt; n</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2074.反转偶数长度组的节点",
        "hardRate": "MEDIUM",
        "passRate": "45.78%",
        "problemsUrl": "https://leetcode.cn/problems/reverse-nodes-in-even-length-groups/",
        "solutionsUrl": "https://leetcode.cn/problems/reverse-nodes-in-even-length-groups/solution",
        "problemsDesc": "<p>给你一个链表的头节点 <code>head</code> 。</p>\n\n<p>链表中的节点 <strong>按顺序</strong> 划分成若干 <strong>非空</strong> 组，这些非空组的长度构成一个自然数序列（<code>1, 2, 3, 4, ...</code>）。一个组的 <strong>长度</strong> 就是组中分配到的节点数目。换句话说：</p>\n\n<ul>\n\t<li>节点 <code>1</code> 分配给第一组</li>\n\t<li>节点 <code>2</code> 和 <code>3</code> 分配给第二组</li>\n\t<li>节点 <code>4</code>、<code>5</code> 和 <code>6</code> 分配给第三组，以此类推</li>\n</ul>\n\n<p>注意，最后一组的长度可能小于或者等于 <code>1 + 倒数第二组的长度</code> 。</p>\n\n<p><strong>反转</strong> 每个 <strong>偶数</strong> 长度组中的节点，并返回修改后链表的头节点 <code>head</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/25/eg1.png\" style=\"width: 699px; height: 124px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [5,2,6,3,9,1,7,3,8,4]\n<strong>输出：</strong>[5,6,2,3,9,1,4,8,3,7]\n<strong>解释：</strong>\n- 第一组长度为 1 ，奇数，没有发生反转。\n- 第二组长度为 2 ，偶数，节点反转。\n- 第三组长度为 3 ，奇数，没有发生反转。\n- 最后一组长度为 4 ，偶数，节点反转。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/25/eg2.png\" style=\"width: 284px; height: 114px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,1,0,6]\n<strong>输出：</strong>[1,0,1,6]\n<strong>解释：</strong>\n- 第一组长度为 1 ，没有发生反转。\n- 第二组长度为 2 ，节点反转。\n- 最后一组长度为 1 ，没有发生反转。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/28/eg3.png\" style=\"width: 139px; height: 114px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [2,1]\n<strong>输出：</strong>[2,1]\n<strong>解释：</strong>\n- 第一组长度为 1 ，没有发生反转。\n- 最后一组长度为 1 ，没有发生反转。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>链表中节点数目范围是 <code>[1, 10<sup>5</sup>]</code></li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2075.解码斜向换位密码",
        "hardRate": "MEDIUM",
        "passRate": "47.00%",
        "problemsUrl": "https://leetcode.cn/problems/decode-the-slanted-ciphertext/",
        "solutionsUrl": "https://leetcode.cn/problems/decode-the-slanted-ciphertext/solution",
        "problemsDesc": "<p>字符串 <code>originalText</code> 使用 <strong>斜向换位密码</strong> ，经由 <strong>行数固定</strong> 为 <code>rows</code> 的矩阵辅助，加密得到一个字符串 <code>encodedText</code> 。</p>\n\n<p><code>originalText</code> 先按从左上到右下的方式放置到矩阵中。</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/07/exa11.png\" style=\"width: 300px; height: 185px;\" />\n<p>先填充蓝色单元格，接着是红色单元格，然后是黄色单元格，以此类推，直到到达 <code>originalText</code> 末尾。箭头指示顺序即为单元格填充顺序。所有空单元格用 <code>' '</code> 进行填充。矩阵的列数需满足：用 <code>originalText</code> 填充之后，最右侧列 <strong>不为空</strong> 。</p>\n\n<p>接着按行将字符附加到矩阵中，构造&nbsp;<code>encodedText</code> 。</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/07/exa12.png\" style=\"width: 300px; height: 200px;\" />\n<p>先把蓝色单元格中的字符附加到 <code>encodedText</code> 中，接着是红色单元格，最后是黄色单元格。箭头指示单元格访问顺序。</p>\n\n<p>例如，如果 <code>originalText = \"cipher\"</code> 且 <code>rows = 3</code> ，那么我们可以按下述方法将其编码：</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/25/desc2.png\" style=\"width: 281px; height: 211px;\" />\n<p>蓝色箭头标识 <code>originalText</code> 是如何放入矩阵中的，红色箭头标识形成 <code>encodedText</code> 的顺序。在上述例子中，<code>encodedText = \"ch&nbsp; &nbsp;ie&nbsp; &nbsp;pr\"</code> 。</p>\n\n<p>给你编码后的字符串 <code>encodedText</code> 和矩阵的行数 <code>rows</code> ，返回源字符串 <code>originalText</code> 。</p>\n\n<p><strong>注意：</strong><code>originalText</code> <strong>不</strong> 含任何尾随空格 <code>' '</code> 。生成的测试用例满足 <strong>仅存在一个</strong> 可能的 <code>originalText</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>encodedText = \"ch   ie   pr\", rows = 3\n<strong>输出：</strong>\"cipher\"\n<strong>解释：</strong>此示例与问题描述中的例子相同。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/26/exam1.png\" style=\"width: 250px; height: 168px;\" /></p>\n\n<pre>\n<strong>输入：</strong>encodedText = \"iveo    eed   l te   olc\", rows = 4\n<strong>输出：</strong>\"i love leetcode\"\n<strong>解释：</strong>上图标识用于编码 originalText 的矩阵。 \n蓝色箭头展示如何从 encodedText 找到 originalText 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/26/eg2.png\" style=\"width: 300px; height: 51px;\" /></p>\n\n<pre>\n<strong>输入：</strong>encodedText = \"coding\", rows = 1\n<strong>输出：</strong>\"coding\"\n<strong>解释：</strong>由于只有 1 行，所以 originalText 和 encodedText 是相同的。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/26/exam3.png\" style=\"width: 150px; height: 101px;\" />\n<pre>\n<strong>输入：</strong>encodedText = \" b  ac\", rows = 2\n<strong>输出：</strong>\" abc\"\n<strong>解释：</strong>originalText 不能含尾随空格，但它可能会有一个或者多个前置空格。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= encodedText.length &lt;= 10<sup>6</sup></code></li>\n\t<li><code>encodedText</code> 仅由小写英文字母和 <code>' '</code> 组成</li>\n\t<li><code>encodedText</code> 是对某个 <strong>不含</strong> 尾随空格的 <code>originalText</code> 的一个有效编码</li>\n\t<li><code>1 &lt;= rows &lt;= 1000</code></li>\n\t<li>生成的测试用例满足 <strong>仅存在一个</strong> 可能的 <code>originalText</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2076.处理含限制条件的好友请求",
        "hardRate": "HARD",
        "passRate": "50.94%",
        "problemsUrl": "https://leetcode.cn/problems/process-restricted-friend-requests/",
        "solutionsUrl": "https://leetcode.cn/problems/process-restricted-friend-requests/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> ，表示网络上的用户数目。每个用户按从 <code>0</code> 到 <code>n - 1</code> 进行编号。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>restrictions</code> ，其中 <code>restrictions[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 意味着用户 <code>x<sub>i</sub></code> 和用户 <code>y<sub>i</sub></code> <strong>不能</strong> 成为 <strong>朋友</strong> ，不管是 <strong>直接</strong> 还是通过其他用户 <strong>间接</strong> 。</p>\n\n<p>最初，用户里没有人是其他用户的朋友。给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>requests</code> 表示好友请求的列表，其中 <code>requests[j] = [u<sub>j</sub>, v<sub>j</sub>]</code> 是用户 <code>u<sub>j</sub></code> 和用户 <code>v<sub>j</sub></code> 之间的一条好友请求。</p>\n\n<p>如果 <code>u<sub>j</sub></code> 和 <code>v<sub>j</sub></code> 可以成为 <strong>朋友</strong> ，那么好友请求将会 <strong>成功</strong> 。每个好友请求都会按列表中给出的顺序进行处理（即，<code>requests[j]</code> 会在 <code>requests[j + 1]</code> 前）。一旦请求成功，那么对所有未来的好友请求而言， <code>u<sub>j</sub></code> 和 <code>v<sub>j</sub></code> 将会 <strong>成为直接朋友 。</strong></p>\n\n<p>返回一个 <strong>布尔数组</strong> <code>result</code> ，其中元素遵循此规则：如果第 <code>j</code> 个好友请求 <strong>成功</strong><em> </em>，那么 <code>result[j]</code><em> </em>就是<em> </em><code>true</code><em> </em>；否则，为<em> </em><code>false</code> 。</p>\n\n<p><strong>注意：</strong>如果 <code>u<sub>j</sub></code> 和 <code>v<sub>j</sub></code> 已经是直接朋友，那么他们之间的请求将仍然&nbsp;<strong>成功</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3, restrictions = [[0,1]], requests = [[0,2],[2,1]]\n<strong>输出：</strong>[true,false]\n<strong>解释：\n</strong>请求 0 ：用户 0 和 用户 2 可以成为朋友，所以他们成为直接朋友。 \n请求 1 ：用户 2 和 用户 1 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (1--2--0) 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 3, restrictions = [[0,1]], requests = [[1,2],[0,2]]\n<strong>输出：</strong>[true,false]\n<strong>解释：</strong>\n请求 0 ：用户 1 和 用户 2 可以成为朋友，所以他们成为直接朋友。 \n请求 1 ：用户 0 和 用户 2 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (0--2--1) 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 5, restrictions = [[0,1],[1,2],[2,3]], requests = [[0,4],[1,2],[3,1],[3,4]]\n<strong>输出：</strong>[true,false,true,false]\n<strong>解释：\n</strong>请求 0 ：用户 0 和 用户 4 可以成为朋友，所以他们成为直接朋友。 \n请求 1 ：用户 1 和 用户 2 不能成为朋友，因为他们之间存在限制。\n请求 2 ：用户 3 和 用户 1 可以成为朋友，所以他们成为直接朋友。 \n请求 3 ：用户 3 和 用户 4 不能成为朋友，因为这会使 用户 0 和 用户 1 成为间接朋友 (0--4--3--1) 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 1000</code></li>\n\t<li><code>0 &lt;= restrictions.length &lt;= 1000</code></li>\n\t<li><code>restrictions[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>1 &lt;= requests.length &lt;= 1000</code></li>\n\t<li><code>requests[j].length == 2</code></li>\n\t<li><code>0 &lt;= u<sub>j</sub>, v<sub>j</sub> &lt;= n - 1</code></li>\n\t<li><code>u<sub>j</sub> != v<sub>j</sub></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2077.殊途同归",
        "hardRate": "MEDIUM",
        "passRate": "62.99%",
        "problemsUrl": "https://leetcode.cn/problems/paths-in-maze-that-lead-to-same-room/",
        "solutionsUrl": "https://leetcode.cn/problems/paths-in-maze-that-lead-to-same-room/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2078.两栋颜色不同且距离最远的房子",
        "hardRate": "EASY",
        "passRate": "72.39%",
        "problemsUrl": "https://leetcode.cn/problems/two-furthest-houses-with-different-colors/",
        "solutionsUrl": "https://leetcode.cn/problems/two-furthest-houses-with-different-colors/solution",
        "problemsDesc": "<p>街上有 <code>n</code> 栋房子整齐地排成一列，每栋房子都粉刷上了漂亮的颜色。给你一个下标从 <strong>0</strong> 开始且长度为 <code>n</code> 的整数数组 <code>colors</code> ，其中 <code>colors[i]</code> 表示第&nbsp; <code>i</code> 栋房子的颜色。</p>\n\n<p>返回 <strong>两栋</strong> 颜色 <strong>不同</strong> 房子之间的 <strong>最大</strong> 距离。</p>\n\n<p>第 <code>i</code> 栋房子和第 <code>j</code> 栋房子之间的距离是 <code>abs(i - j)</code> ，其中 <code>abs(x)</code> 是 <code>x</code> 的绝对值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/31/eg1.png\" style=\"width: 610px; height: 84px;\" /></p>\n\n<pre>\n<strong>输入：</strong>colors = [<strong><em>1</em></strong>,1,1,<em><strong>6</strong></em>,1,1,1]\n<strong>输出：</strong>3\n<strong>解释：</strong>上图中，颜色 1 标识成蓝色，颜色 6 标识成红色。\n两栋颜色不同且距离最远的房子是房子 0 和房子 3 。\n房子 0 的颜色是颜色 1 ，房子 3 的颜色是颜色 6 。两栋房子之间的距离是 abs(0 - 3) = 3 。\n注意，房子 3 和房子 6 也可以产生最佳答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/31/eg2.png\" style=\"width: 426px; height: 84px;\" /></p>\n\n<pre>\n<strong>输入：</strong>colors = [<em><strong>1</strong></em>,8,3,8,<em><strong>3</strong></em>]\n<strong>输出：</strong>4\n<strong>解释：</strong>上图中，颜色 1 标识成蓝色，颜色 8 标识成黄色，颜色 3 标识成绿色。\n两栋颜色不同且距离最远的房子是房子 0 和房子 4 。\n房子 0 的颜色是颜色 1 ，房子 4 的颜色是颜色 3 。两栋房子之间的距离是 abs(0 - 4) = 4 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>colors = [<em><strong>0</strong></em>,<em><strong>1</strong></em>]\n<strong>输出：</strong>1\n<strong>解释：</strong>两栋颜色不同且距离最远的房子是房子 0 和房子 1 。\n房子 0 的颜色是颜色 0 ，房子 1 的颜色是颜色 1 。两栋房子之间的距离是 abs(0 - 1) = 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n ==&nbsp;colors.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 100</code></li>\n\t<li><code>0 &lt;= colors[i] &lt;= 100</code></li>\n\t<li>生成的测试数据满足 <strong>至少 </strong>存在 2 栋颜色不同的房子</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2079.给植物浇水",
        "hardRate": "MEDIUM",
        "passRate": "77.67%",
        "problemsUrl": "https://leetcode.cn/problems/watering-plants/",
        "solutionsUrl": "https://leetcode.cn/problems/watering-plants/solution",
        "problemsDesc": "<p>你打算用一个水罐给花园里的 <code>n</code> 株植物浇水。植物排成一行，从左到右进行标记，编号从 <code>0</code> 到 <code>n - 1</code> 。其中，第 <code>i</code> 株植物的位置是 <code>x = i</code> 。<code>x = -1</code>&nbsp;处有一条河，你可以在那里重新灌满你的水罐。</p>\n\n<p>每一株植物都需要浇特定量的水。你将会按下面描述的方式完成浇水：</p>\n\n<ul>\n\t<li>按从左到右的顺序给植物浇水。</li>\n\t<li>在给当前植物浇完水之后，如果你没有足够的水 <strong>完全</strong> 浇灌下一株植物，那么你就需要返回河边重新装满水罐。</li>\n\t<li>你 <strong>不能</strong> 提前重新灌满水罐。</li>\n</ul>\n\n<p>最初，你在河边（也就是，<code>x = -1</code>），在 x 轴上每移动 <strong>一个单位</strong>&nbsp;都需要 <strong>一步</strong> 。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>plants</code> ，数组由 <code>n</code> 个整数组成。其中，<code>plants[i]</code> 为第 <code>i</code> 株植物需要的水量。另有一个整数 <code>capacity</code> 表示水罐的容量，返回浇灌所有植物需要的 <strong>步数</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>plants = [2,2,3,3], capacity = 5\n<strong>输出：</strong>14\n<strong>解释：</strong>从河边开始，此时水罐是装满的：\n- 走到植物 0 (1 步) ，浇水。水罐中还有 3 单位的水。\n- 走到植物 1 (1 步) ，浇水。水罐中还有 1 单位的水。\n- 由于不能完全浇灌植物 2 ，回到河边取水 (2 步)。\n- 走到植物 2 (3 步) ，浇水。水罐中还有 2 单位的水。\n- 由于不能完全浇灌植物 3 ，回到河边取水 (3 步)。\n- 走到植物 3 (4 步) ，浇水。\n需要的步数是 = 1 + 1 + 2 + 3 + 3 + 4 = 14 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>plants = [1,1,1,4,2,3], capacity = 4\n<strong>输出：</strong>30\n<strong>解释：</strong>从河边开始，此时水罐是装满的：\n- 走到植物 0，1，2 (3 步) ，浇水。回到河边取水 (3 步)。\n- 走到植物 3 (4 步) ，浇水。回到河边取水 (4 步)。\n- 走到植物 4 (5 步) ，浇水。回到河边取水 (5 步)。\n- 走到植物 5 (6 步) ，浇水。\n需要的步数是 = 3 + 3 + 4 + 4 + 5 + 5 + 6 = 30 。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>plants = [7,7,7,7,7,7,7], capacity = 8\n<strong>输出：</strong>49\n<strong>解释：</strong>每次浇水都需要重新灌满水罐。\n需要的步数是 = 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5 + 6 + 6 + 7 = 49 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == plants.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= plants[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>max(plants[i]) &lt;= capacity &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2080.区间内查询数字的频率",
        "hardRate": "MEDIUM",
        "passRate": "31.42%",
        "problemsUrl": "https://leetcode.cn/problems/range-frequency-queries/",
        "solutionsUrl": "https://leetcode.cn/problems/range-frequency-queries/solution",
        "problemsDesc": "<p>请你设计一个数据结构，它能求出给定子数组内一个给定值的 <strong>频率</strong>&nbsp;。</p>\n\n<p>子数组中一个值的 <strong>频率</strong>&nbsp;指的是这个子数组中这个值的出现次数。</p>\n\n<p>请你实现&nbsp;<code>RangeFreqQuery</code>&nbsp;类：</p>\n\n<ul>\n\t<li><code>RangeFreqQuery(int[] arr)</code>&nbsp;用下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>arr</code>&nbsp;构造一个类的实例。</li>\n\t<li><code>int query(int left, int right, int value)</code>&nbsp;返回子数组&nbsp;<code>arr[left...right]</code>&nbsp;中&nbsp;<code>value</code>&nbsp;的&nbsp;<strong>频率</strong>&nbsp;。</li>\n</ul>\n\n<p>一个 <strong>子数组</strong> 指的是数组中一段连续的元素。<code>arr[left...right]</code>&nbsp;指的是 <code>nums</code>&nbsp;中包含下标 <code>left</code>&nbsp;和 <code>right</code>&nbsp;<strong>在内</strong>&nbsp;的中间一段连续元素。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>\n[\"RangeFreqQuery\", \"query\", \"query\"]\n[[[12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]], [1, 2, 4], [0, 11, 33]]\n<strong>输出：</strong>\n[null, 1, 2]\n\n<strong>解释：</strong>\nRangeFreqQuery rangeFreqQuery = new RangeFreqQuery([12, 33, 4, 56, 22, 2, 34, 33, 22, 12, 34, 56]);\nrangeFreqQuery.query(1, 2, 4); // 返回 1 。4 在子数组 [33, 4] 中出现 1 次。\nrangeFreqQuery.query(0, 11, 33); // 返回 2 。33 在整个子数组中出现 2 次。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= arr[i], value &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= left &lt;= right &lt; arr.length</code></li>\n\t<li>调用&nbsp;<code>query</code>&nbsp;不超过&nbsp;<code>10<sup>5</sup></code>&nbsp;次。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2081.k 镜像数字的和",
        "hardRate": "HARD",
        "passRate": "43.56%",
        "problemsUrl": "https://leetcode.cn/problems/sum-of-k-mirror-numbers/",
        "solutionsUrl": "https://leetcode.cn/problems/sum-of-k-mirror-numbers/solution",
        "problemsDesc": "<p>一个 <strong>k 镜像数字</strong>&nbsp;指的是一个在十进制和 k 进制下从前往后读和从后往前读都一样的&nbsp;<strong>没有前导 0</strong>&nbsp;的&nbsp;<strong>正</strong>&nbsp;整数。</p>\n\n<ul>\n\t<li>比方说，<code>9</code>&nbsp;是一个 2 镜像数字。<code>9</code>&nbsp;在十进制下为&nbsp;<code>9</code>&nbsp;，二进制下为&nbsp;<code>1001</code>&nbsp;，两者从前往后读和从后往前读都一样。</li>\n\t<li>相反地，<code>4</code>&nbsp;不是一个 2 镜像数字。<code>4</code>&nbsp;在二进制下为&nbsp;<code>100</code>&nbsp;，从前往后和从后往前读不相同。</li>\n</ul>\n\n<p>给你进制&nbsp;<code>k</code>&nbsp;和一个数字&nbsp;<code>n</code>&nbsp;，请你返回 k 镜像数字中 <strong>最小</strong> 的 <code>n</code>&nbsp;个数 <strong>之和</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<pre><b>输入：</b>k = 2, n = 5\n<b>输出：</b>25\n<strong>解释：\n</strong>最小的 5 个 2 镜像数字和它们的二进制表示如下：\n  十进制       二进制\n    1          1\n    3          11\n    5          101\n    7          111\n    9          1001\n它们的和为 1 + 3 + 5 + 7 + 9 = 25 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>k = 3, n = 7\n<b>输出：</b>499\n<strong>解释：\n</strong>7 个最小的 3 镜像数字和它们的三进制表示如下：\n  十进制       三进制\n    1          1\n    2          2\n    4          11\n    8          22\n    121        11111\n    151        12121\n    212        21212\n它们的和为 1 + 2 + 4 + 8 + 121 + 151 + 212 = 499 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>k = 7, n = 17\n<b>输出：</b>20379000\n<b>解释：</b>17 个最小的 7 镜像数字分别为：\n1, 2, 3, 4, 5, 6, 8, 121, 171, 242, 292, 16561, 65656, 2137312, 4602064, 6597956, 6958596\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= k &lt;= 9</code></li>\n\t<li><code>1 &lt;= n &lt;= 30</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2082.富有客户的数量",
        "hardRate": "EASY",
        "passRate": "74.16%",
        "problemsUrl": "https://leetcode.cn/problems/the-number-of-rich-customers/",
        "solutionsUrl": "https://leetcode.cn/problems/the-number-of-rich-customers/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2083.求以相同字母开头和结尾的子串总数",
        "hardRate": "MEDIUM",
        "passRate": "60.74%",
        "problemsUrl": "https://leetcode.cn/problems/substrings-that-begin-and-end-with-the-same-letter/",
        "solutionsUrl": "https://leetcode.cn/problems/substrings-that-begin-and-end-with-the-same-letter/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2084.为订单类型为 0 的客户删除类型为 1 的订单",
        "hardRate": "MEDIUM",
        "passRate": "82.53%",
        "problemsUrl": "https://leetcode.cn/problems/drop-type-1-orders-for-customers-with-type-0-orders/",
        "solutionsUrl": "https://leetcode.cn/problems/drop-type-1-orders-for-customers-with-type-0-orders/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2085.统计出现过一次的公共字符串",
        "hardRate": "EASY",
        "passRate": "71.36%",
        "problemsUrl": "https://leetcode.cn/problems/count-common-words-with-one-occurrence/",
        "solutionsUrl": "https://leetcode.cn/problems/count-common-words-with-one-occurrence/solution",
        "problemsDesc": "<p>给你两个字符串数组&nbsp;<code>words1</code>&nbsp;和&nbsp;<code>words2</code>&nbsp;，请你返回在两个字符串数组中 <strong>都恰好出现一次</strong>&nbsp;的字符串的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>words1 = [\"leetcode\",\"is\",\"amazing\",\"as\",\"is\"], words2 = [\"amazing\",\"leetcode\",\"is\"]\n<b>输出：</b>2\n<strong>解释：</strong>\n- \"leetcode\" 在两个数组中都恰好出现一次，计入答案。\n- \"amazing\" 在两个数组中都恰好出现一次，计入答案。\n- \"is\" 在两个数组中都出现过，但在 words1 中出现了 2 次，不计入答案。\n- \"as\" 在 words1 中出现了一次，但是在 words2 中没有出现过，不计入答案。\n所以，有 2 个字符串在两个数组中都恰好出现了一次。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>words1 = [\"b\",\"bb\",\"bbb\"], words2 = [\"a\",\"aa\",\"aaa\"]\n<b>输出：</b>0\n<b>解释：</b>没有字符串在两个数组中都恰好出现一次。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>words1 = [\"a\",\"ab\"], words2 = [\"a\",\"a\",\"a\",\"ab\"]\n<b>输出：</b>1\n<b>解释：</b>唯一在两个数组中都出现一次的字符串是 \"ab\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words1.length, words2.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words1[i].length, words2[j].length &lt;= 30</code></li>\n\t<li><code>words1[i]</code> 和&nbsp;<code>words2[j]</code>&nbsp;都只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2086.从房屋收集雨水需要的最少水桶数",
        "hardRate": "MEDIUM",
        "passRate": "46.77%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-food-buckets-to-feed-the-hamsters/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-food-buckets-to-feed-the-hamsters/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>street</code>&nbsp;。<code>street</code>&nbsp;中每个字符要么是表示房屋的&nbsp;<code>'H'</code> ，要么是表示空位的&nbsp;<code>'.'</code>&nbsp;。</p>\n\n<p>你可以在 <strong>空位</strong>&nbsp;放置水桶，从相邻的房屋收集雨水。位置在 <code>i - 1</code>&nbsp;<strong>或者</strong> <code>i + 1</code>&nbsp;的水桶可以收集位置为 <code>i</code>&nbsp;处房屋的雨水。一个水桶如果相邻两个位置都有房屋，那么它可以收集 <strong>两个</strong> 房屋的雨水。</p>\n\n<p>在确保 <strong>每个</strong>&nbsp;房屋旁边都 <strong>至少</strong>&nbsp;有一个水桶的前提下，请你返回需要的 <strong>最少</strong>&nbsp;水桶数。如果无解请返回 <code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>street = \"H..H\"\n<b>输出：</b>2\n<strong>解释：</strong>\n我们可以在下标为 1 和 2 处放水桶。\n\"H..H\" -&gt; \"HBBH\"（'B' 表示放置水桶）。\n下标为 0 处的房屋右边有水桶，下标为 3 处的房屋左边有水桶。\n所以每个房屋旁边都至少有一个水桶收集雨水。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>street = \".H.H.\"\n<b>输出：</b>1\n<strong>解释：</strong>\n我们可以在下标为 2 处放置一个水桶。\n\".H.H.\" -&gt; \".HBH.\"（'B' 表示放置水桶）。\n下标为 1 处的房屋右边有水桶，下标为 3 处的房屋左边有水桶。\n所以每个房屋旁边都至少有一个水桶收集雨水。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>street = \".HHH.\"\n<b>输出：</b>-1\n<strong>解释：</strong>\n没有空位可以放置水桶收集下标为 2 处的雨水。\n所以没有办法收集所有房屋的雨水。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><b>输入：</b>street = \"H\"\n<b>输出：</b>-1\n<strong>解释：</strong>\n没有空位放置水桶。\n所以没有办法收集所有房屋的雨水。\n</pre>\n\n<p><strong>示例 5：</strong></p>\n\n<pre><b>输入：</b>street = \".\"\n<b>输出：</b>0\n<strong>解释：</strong>\n没有房屋需要收集雨水。\n所以需要 0 个水桶。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= street.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>street[i]</code>&nbsp;要么是&nbsp;<code>'H'</code>&nbsp;，要么是&nbsp;<code>'.'</code> 。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2087.网格图中机器人回家的最小代价",
        "hardRate": "MEDIUM",
        "passRate": "50.15%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>m x n</code>&nbsp;的网格图，其中&nbsp;<code>(0, 0)</code>&nbsp;是最左上角的格子，<code>(m - 1, n - 1)</code>&nbsp;是最右下角的格子。给你一个整数数组&nbsp;<code>startPos</code>&nbsp;，<code>startPos = [start<sub>row</sub>, start<sub>col</sub>]</code>&nbsp;表示 <strong>初始</strong>&nbsp;有一个 <strong>机器人</strong>&nbsp;在格子&nbsp;<code>(start<sub>row</sub>, start<sub>col</sub>)</code>&nbsp;处。同时给你一个整数数组&nbsp;<code>homePos</code>&nbsp;，<code>homePos = [home<sub>row</sub>, home<sub>col</sub>]</code>&nbsp;表示机器人的 <strong>家</strong>&nbsp;在格子&nbsp;<code>(home<sub>row</sub>, home<sub>col</sub>)</code>&nbsp;处。</p>\n\n<p>机器人需要回家。每一步它可以往四个方向移动：<strong>上</strong>，<strong>下</strong>，<strong>左</strong>，<strong>右</strong>，同时机器人不能移出边界。每一步移动都有一定代价。再给你两个下标从&nbsp;<strong>0</strong>&nbsp;开始的额整数数组：长度为&nbsp;<code>m</code>&nbsp;的数组&nbsp;<code>rowCosts</code> &nbsp;和长度为 <code>n</code>&nbsp;的数组&nbsp;<code>colCosts</code>&nbsp;。</p>\n\n<ul>\n\t<li>如果机器人往 <strong>上</strong>&nbsp;或者往 <strong>下</strong>&nbsp;移动到第 <code>r</code>&nbsp;<strong>行</strong>&nbsp;的格子，那么代价为&nbsp;<code>rowCosts[r]</code>&nbsp;。</li>\n\t<li>如果机器人往 <strong>左</strong>&nbsp;或者往 <strong>右</strong>&nbsp;移动到第 <code>c</code>&nbsp;<strong>列</strong> 的格子，那么代价为&nbsp;<code>colCosts[c]</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回机器人回家需要的 <strong>最小总代价</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/11/eg-1.png\" style=\"width: 282px; height: 217px;\"></p>\n\n<pre><strong>输入：</strong>startPos = [1, 0], homePos = [2, 3], rowCosts = [5, 4, 3], colCosts = [8, 2, 6, 7]\n<b>输出：</b>18\n<b>解释：</b>一个最优路径为：\n从 (1, 0) 开始\n-&gt; 往下走到 (<em><strong>2</strong></em>, 0) 。代价为 rowCosts[2] = 3 。\n-&gt; 往右走到 (2, <em><strong>1</strong></em>) 。代价为 colCosts[1] = 2 。\n-&gt; 往右走到 (2, <em><strong>2</strong></em>) 。代价为 colCosts[2] = 6 。\n-&gt; 往右走到 (2, <em><strong>3</strong></em>) 。代价为 colCosts[3] = 7 。\n总代价为 3 + 2 + 6 + 7 = 18</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>startPos = [0, 0], homePos = [0, 0], rowCosts = [5], colCosts = [26]\n<b>输出：</b>0\n<b>解释：</b>机器人已经在家了，所以不需要移动。总代价为 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == rowCosts.length</code></li>\n\t<li><code>n == colCosts.length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= rowCosts[r], colCosts[c] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>startPos.length == 2</code></li>\n\t<li><code>homePos.length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>row</sub>, home<sub>row</sub> &lt; m</code></li>\n\t<li><code>0 &lt;= start<sub>col</sub>, home<sub>col</sub> &lt; n</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2088.统计农场中肥沃金字塔的数目",
        "hardRate": "HARD",
        "passRate": "63.42%",
        "problemsUrl": "https://leetcode.cn/problems/count-fertile-pyramids-in-a-land/",
        "solutionsUrl": "https://leetcode.cn/problems/count-fertile-pyramids-in-a-land/solution",
        "problemsDesc": "<p>有一个 <strong>矩形网格</strong>&nbsp;状的农场，划分为&nbsp;<code>m</code>&nbsp;行&nbsp;<code>n</code>&nbsp;列的单元格。每个格子要么是 <strong>肥沃的</strong>&nbsp;（用 <code>1</code>&nbsp;表示），要么是 <strong>贫瘠</strong>&nbsp;的（用 <code>0</code>&nbsp;表示）。网格图以外的所有与格子都视为贫瘠的。</p>\n\n<p>农场中的&nbsp;<strong>金字塔</strong>&nbsp;区域定义如下：</p>\n\n<ol>\n\t<li>区域内格子数目 <strong>大于&nbsp;</strong><code>1</code>&nbsp;且所有格子都是 <strong>肥沃的</strong>&nbsp;。</li>\n\t<li>金字塔 <strong>顶端</strong>&nbsp;是这个金字塔 <strong>最上方</strong>&nbsp;的格子。金字塔的高度是它所覆盖的行数。令&nbsp;<code>(r, c)</code>&nbsp;为金字塔的顶端且高度为 <code>h</code>&nbsp;，那么金字塔区域内包含的任一格子&nbsp;<code>(i, j)</code>&nbsp;需满足&nbsp;<code>r &lt;= i &lt;= r + h - 1</code>&nbsp;<strong>且</strong>&nbsp;<code>c - (i - r) &lt;= j &lt;= c + (i - r)</code>&nbsp;。</li>\n</ol>\n\n<p>一个 <strong>倒金字塔</strong>&nbsp;类似定义如下：</p>\n\n<ol>\n\t<li>区域内格子数目 <strong>大于</strong>&nbsp;<code>1</code>&nbsp;且所有格子都是 <b>肥沃的</b>&nbsp;。</li>\n\t<li>倒金字塔的 <strong>顶端</strong>&nbsp;是这个倒金字塔 <strong>最下方</strong>&nbsp;的格子。倒金字塔的高度是它所覆盖的行数。令&nbsp;<code>(r, c)</code>&nbsp;为金字塔的顶端且高度为 <code>h</code>&nbsp;，那么金字塔区域内包含的任一格子&nbsp;<code>(i, j)</code>&nbsp;需满足&nbsp;<code>r - h + 1 &lt;= i &lt;= r</code> <strong>且</strong> <code>c - (r - i) &lt;= j &lt;= c + (r - i)</code>&nbsp;。</li>\n</ol>\n\n<p>下图展示了部分符合定义和不符合定义的金字塔区域。黑色区域表示肥沃的格子。</p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/11/08/image.png\" style=\"width: 700px; height: 156px;\"></p>\n\n<p>给你一个下标从 <strong>0</strong>&nbsp;开始且大小为 <code>m x n</code>&nbsp;的二进制矩阵&nbsp;<code>grid</code>&nbsp;，它表示农场，请你返回 <code>grid</code>&nbsp;中金字塔和倒金字塔的&nbsp;<strong>总数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg11.png\" style=\"width: 200px; height: 102px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/exa12.png\" style=\"width: 200px; height: 102px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/exa13.png\" style=\"width: 200px; height: 102px;\"></p>\n\n<pre><b>输入：</b>grid = [[0,1,1,0],[1,1,1,1]]\n<b>输出：</b>2\n<strong>解释：</strong>\n2 个可能的金字塔区域分别如上图蓝色和红色区域所示。\n这个网格图中没有倒金字塔区域。\n所以金字塔区域总数为 2 + 0 = 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg21.png\" style=\"width: 180px; height: 122px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/exa22.png\" style=\"width: 180px; height: 122px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/exa23.png\" style=\"width: 180px; height: 122px;\"></p>\n\n<pre><b>输入：</b>grid = [[1,1,1],[1,1,1]]\n<b>输出：</b>2\n<strong>解释：</strong>\n金字塔区域如上图蓝色区域所示，倒金字塔如上图红色区域所示。\n所以金字塔区域总数目为 1 + 1 = 2 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg3.png\" style=\"width: 149px; height: 150px;\"></p>\n\n<pre><b>输入：</b>grid = [[1,0,1],[0,0,0],[1,0,1]]\n<b>输出：</b>0\n<strong>解释：</strong>\n网格图中没有任何金字塔或倒金字塔区域。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg41.png\" style=\"width: 180px; height: 144px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg42.png\" style=\"width: 180px; height: 144px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg43.png\" style=\"width: 180px; height: 144px;\">&nbsp;<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/10/23/eg44.png\" style=\"width: 180px; height: 144px;\"></p>\n\n<pre><strong>输入：</strong>grid = [[1,1,1,1,0],[1,1,1,1,1],[1,1,1,1,1],[0,1,0,0,1]]\n<b>输出：</b>13\n<strong>解释：</strong>\n有 7 个金字塔区域。上图第二和第三张图中展示了它们中的 3 个。\n有 6 个倒金字塔区域。上图中最后一张图展示了它们中的 2 个。\n所以金字塔区域总数目为 7 + 6 = 13.\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 1000</code></li>\n\t<li><code>1 &lt;= m * n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>grid[i][j]</code>&nbsp;要么是&nbsp;<code>0</code>&nbsp;，要么是&nbsp;<code>1</code> 。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2089.找出数组排序后的目标下标",
        "hardRate": "EASY",
        "passRate": "78.37%",
        "problemsUrl": "https://leetcode.cn/problems/find-target-indices-after-sorting-array/",
        "solutionsUrl": "https://leetcode.cn/problems/find-target-indices-after-sorting-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 以及一个目标元素 <code>target</code> 。</p>\n\n<p><strong>目标下标</strong> 是一个满足&nbsp;<code>nums[i] == target</code> 的下标 <code>i</code> 。</p>\n\n<p>将 <code>nums</code> 按 <strong>非递减</strong> 顺序排序后，返回由 <code>nums</code> 中目标下标组成的列表。如果不存在目标下标，返回一个 <strong>空</strong> 列表。返回的列表必须按 <strong>递增</strong> 顺序排列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 2\n<strong>输出：</strong>[1,2]\n<strong>解释：</strong>排序后，nums 变为 [1,<em><strong>2</strong></em>,<em><strong>2</strong></em>,3,5] 。\n满足 nums[i] == 2 的下标是 1 和 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 3\n<strong>输出：</strong>[3]\n<strong>解释：</strong>排序后，nums 变为 [1,2,2,<em><strong>3</strong></em>,5] 。\n满足 nums[i] == 3 的下标是 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 5\n<strong>输出：</strong>[4]\n<strong>解释：</strong>排序后，nums 变为 [1,2,2,3,<em><strong>5</strong></em>] 。\n满足 nums[i] == 5 的下标是 4 。\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,2,5,2,3], target = 4\n<strong>输出：</strong>[]\n<strong>解释：</strong>nums 中不含值为 4 的元素。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i], target &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2090.半径为 k 的子数组平均值",
        "hardRate": "MEDIUM",
        "passRate": "37.56%",
        "problemsUrl": "https://leetcode.cn/problems/k-radius-subarray-averages/",
        "solutionsUrl": "https://leetcode.cn/problems/k-radius-subarray-averages/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组中有 <code>n</code> 个整数，另给你一个整数 <code>k</code> 。</p>\n\n<p><strong>半径为 k 的子数组平均值</strong> 是指：<code>nums</code> 中一个以下标 <code>i</code> 为 <strong>中心</strong> 且 <strong>半径</strong> 为 <code>k</code> 的子数组中所有元素的平均值，即下标在&nbsp;<code>i - k</code> 和 <code>i + k</code> 范围（<strong>含</strong> <code>i - k</code> 和 <code>i + k</code>）内所有元素的平均值。如果在下标 <code>i</code> 前或后不足 <code>k</code> 个元素，那么<strong> 半径为 k 的子数组平均值 </strong>是 <code>-1</code> 。</p>\n\n<p>构建并返回一个长度为 <code>n</code> 的数组<em> </em><code>avgs</code><em> </em>，其中<em> </em><code>avgs[i]</code><em> </em>是以下标 <code>i</code> 为中心的子数组的<strong> 半径为 k 的子数组平均值 </strong>。</p>\n\n<p><code>x</code> 个元素的 <strong>平均值</strong> 是 <code>x</code> 个元素相加之和除以 <code>x</code> ，此时使用截断式 <strong>整数除法</strong> ，即需要去掉结果的小数部分。</p>\n\n<ul>\n\t<li>例如，四个元素 <code>2</code>、<code>3</code>、<code>1</code> 和 <code>5</code> 的平均值是 <code>(2 + 3 + 1 + 5) / 4 = 11 / 4 = 2.75</code>，截断后得到 <code>2</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/07/eg1.png\" style=\"width: 343px; height: 119px;\" /></p>\n\n<pre>\n<strong>输入：</strong>nums = [7,4,3,9,1,8,5,2,6], k = 3\n<strong>输出：</strong>[-1,-1,-1,5,4,4,-1,-1,-1]\n<strong>解释：</strong>\n- avg[0]、avg[1] 和 avg[2] 是 -1 ，因为在这几个下标前的元素数量都不足 k 个。\n- 中心为下标 3 且半径为 3 的子数组的元素总和是：7 + 4 + 3 + 9 + 1 + 8 + 5 = 37 。\n  使用截断式 <strong>整数除法</strong>，avg[3] = 37 / 7 = 5 。\n- 中心为下标 4 的子数组，avg[4] = (4 + 3 + 9 + 1 + 8 + 5 + 2) / 7 = 4 。\n- 中心为下标 5 的子数组，avg[5] = (3 + 9 + 1 + 8 + 5 + 2 + 6) / 7 = 4 。\n- avg[6]、avg[7] 和 avg[8] 是 -1 ，因为在这几个下标后的元素数量都不足 k 个。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [100000], k = 0\n<strong>输出：</strong>[100000]\n<strong>解释：</strong>\n- 中心为下标 0 且半径 0 的子数组的元素总和是：100000 。\n  avg[0] = 100000 / 1 = 100000 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [8], k = 100000\n<strong>输出：</strong>[-1]\n<strong>解释：</strong>\n- avg[0] 是 -1 ，因为在下标 0 前后的元素数量均不足 k 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2091.从数组中移除最大值和最小值",
        "hardRate": "MEDIUM",
        "passRate": "56.54%",
        "problemsUrl": "https://leetcode.cn/problems/removing-minimum-and-maximum-from-array/",
        "solutionsUrl": "https://leetcode.cn/problems/removing-minimum-and-maximum-from-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组由若干 <strong>互不相同</strong> 的整数组成。</p>\n\n<p><code>nums</code> 中有一个值最小的元素和一个值最大的元素。分别称为 <strong>最小值</strong> 和 <strong>最大值</strong> 。你的目标是从数组中移除这两个元素。</p>\n\n<p>一次 <strong>删除</strong> 操作定义为从数组的 <strong>前面</strong> 移除一个元素或从数组的 <strong>后面</strong> 移除一个元素。</p>\n\n<p>返回将数组中最小值和最大值 <strong>都</strong> 移除需要的最小删除次数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,<em><strong>10</strong></em>,7,5,4,<em><strong>1</strong></em>,8,6]\n<strong>输出：</strong>5\n<strong>解释：</strong>\n数组中的最小元素是 nums[5] ，值为 1 。\n数组中的最大元素是 nums[1] ，值为 10 。\n将最大值和最小值都移除需要从数组前面移除 2 个元素，从数组后面移除 3 个元素。\n结果是 2 + 3 = 5 ，这是所有可能情况中的最小删除次数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,<em><strong>-4</strong></em>,<em><strong>19</strong></em>,1,8,-2,-3,5]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n数组中的最小元素是 nums[1] ，值为 -4 。\n数组中的最大元素是 nums[2] ，值为 19 。\n将最大值和最小值都移除需要从数组前面移除 3 个元素。\n结果是 3 ，这是所有可能情况中的最小删除次数。 \n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [<em><strong>101</strong></em>]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n数组中只有这一个元素，那么它既是数组中的最小值又是数组中的最大值。\n移除它只需要 1 次删除操作。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums</code> 中的整数 <strong>互不相同</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2092.找出知晓秘密的所有专家",
        "hardRate": "HARD",
        "passRate": "29.10%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-people-with-secret/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-people-with-secret/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> ，表示有 <code>n</code> 个专家从 <code>0</code> 到 <code>n - 1</code> 编号。另外给你一个下标从 0 开始的二维整数数组 <code>meetings</code> ，其中 <code>meetings[i] = [x<sub>i</sub>, y<sub>i</sub>, time<sub>i</sub>]</code> 表示专家 <code>x<sub>i</sub></code> 和专家 <code>y<sub>i</sub></code> 在时间 <code>time<sub>i</sub></code> 要开一场会。一个专家可以同时参加 <strong>多场会议</strong> 。最后，给你一个整数 <code>firstPerson</code> 。</p>\n\n<p>专家 <code>0</code> 有一个 <strong>秘密</strong> ，最初，他在时间&nbsp;<code>0</code> 将这个秘密分享给了专家 <code>firstPerson</code> 。接着，这个秘密会在每次有知晓这个秘密的专家参加会议时进行传播。更正式的表达是，每次会议，如果专家 <code>x<sub>i</sub></code> 在时间 <code>time<sub>i</sub></code> 时知晓这个秘密，那么他将会与专家 <code>y<sub>i</sub></code> 分享这个秘密，反之亦然。</p>\n\n<p>秘密共享是 <strong>瞬时发生</strong> 的。也就是说，在同一时间，一个专家不光可以接收到秘密，还能在其他会议上与其他专家分享。</p>\n\n<p>在所有会议都结束之后，返回所有知晓这个秘密的专家列表。你可以按 <strong>任何顺序</strong> 返回答案。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 6, meetings = [[1,2,5],[2,3,8],[1,5,10]], firstPerson = 1\n<strong>输出：</strong>[0,1,2,3,5]\n<strong>解释：\n</strong>时间 0 ，专家 0 将秘密与专家 1 共享。\n时间 5 ，专家 1 将秘密与专家 2 共享。\n时间 8 ，专家 2 将秘密与专家 3 共享。\n时间 10 ，专家 1 将秘密与专家 5 共享。\n因此，在所有会议结束后，专家 0、1、2、3 和 5 都将知晓这个秘密。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 4, meetings = [[3,1,3],[1,2,2],[0,3,3]], firstPerson = 3\n<strong>输出：</strong>[0,1,3]\n<strong>解释：</strong>\n时间 0 ，专家 0 将秘密与专家 3 共享。\n时间 2 ，专家 1 与专家 2 都不知晓这个秘密。\n时间 3 ，专家 3 将秘密与专家 0 和专家 1 共享。\n因此，在所有会议结束后，专家 0、1 和 3 都将知晓这个秘密。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 5, meetings = [[3,4,2],[1,2,1],[2,3,1]], firstPerson = 1\n<strong>输出：</strong>[0,1,2,3,4]\n<strong>解释：</strong>\n时间 0 ，专家 0 将秘密与专家 1 共享。\n时间 1 ，专家 1 将秘密与专家 2 共享，专家 2 将秘密与专家 3 共享。\n注意，专家 2 可以在收到秘密的同一时间分享此秘密。\n时间 2 ，专家 3 将秘密与专家 4 共享。\n因此，在所有会议结束后，专家 0、1、2、3 和 4 都将知晓这个秘密。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 3</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i </sub>&lt;= n - 1</code></li>\n\t<li><code>x<sub>i</sub> != y<sub>i</sub></code></li>\n\t<li><code>1 &lt;= time<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= firstPerson &lt;= n - 1</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2093.前往目标城市的最小费用",
        "hardRate": "MEDIUM",
        "passRate": "58.79%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-to-reach-city-with-discounts/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-to-reach-city-with-discounts/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2094.找出 3 位偶数",
        "hardRate": "EASY",
        "passRate": "55.75%",
        "problemsUrl": "https://leetcode.cn/problems/finding-3-digit-even-numbers/",
        "solutionsUrl": "https://leetcode.cn/problems/finding-3-digit-even-numbers/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>digits</code> ，其中每个元素是一个数字（<code>0 - 9</code>）。数组中可能存在重复元素。</p>\n\n<p>你需要找出 <strong>所有</strong> 满足下述条件且 <strong>互不相同</strong> 的整数：</p>\n\n<ul>\n\t<li>该整数由 <code>digits</code> 中的三个元素按 <strong>任意</strong> 顺序 <strong>依次连接</strong> 组成。</li>\n\t<li>该整数不含 <strong>前导零</strong></li>\n\t<li>该整数是一个 <strong>偶数</strong></li>\n</ul>\n\n<p>例如，给定的 <code>digits</code> 是 <code>[1, 2, 3]</code> ，整数 <code>132</code> 和 <code>312</code> 满足上面列出的全部条件。</p>\n\n<p>将找出的所有互不相同的整数按 <strong>递增顺序</strong> 排列，并以数组形式返回<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = [2,1,3,0]\n<strong>输出：</strong>[102,120,130,132,210,230,302,310,312,320]\n<strong>解释：</strong>\n所有满足题目条件的整数都在输出数组中列出。 \n注意，答案数组中不含有 <strong>奇数</strong> 或带 <strong>前导零</strong> 的整数。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = [2,2,8,8,2]\n<strong>输出：</strong>[222,228,282,288,822,828,882]\n<strong>解释：</strong>\n同样的数字（0 - 9）在构造整数时可以重复多次，重复次数最多与其在 <code>digits</code> 中出现的次数一样。 \n在这个例子中，数字 8 在构造 288、828 和 882 时都重复了两次。 \n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>digits = [3,7,5]\n<strong>输出：</strong>[]\n<strong>解释：</strong>\n使用给定的 digits 无法构造偶数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;=&nbsp;digits.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= digits[i] &lt;= 9</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2095.删除链表的中间节点",
        "hardRate": "MEDIUM",
        "passRate": "57.40%",
        "problemsUrl": "https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/",
        "solutionsUrl": "https://leetcode.cn/problems/delete-the-middle-node-of-a-linked-list/solution",
        "problemsDesc": "<p>给你一个链表的头节点 <code>head</code> 。<strong>删除</strong> 链表的 <strong>中间节点</strong> ，并返回修改后的链表的头节点 <code>head</code> 。</p>\n\n<p>长度为 <code>n</code> 链表的中间节点是从头数起第 <code>⌊n / 2⌋</code> 个节点（下标从 <strong>0</strong> 开始），其中 <code>⌊x⌋</code> 表示小于或等于 <code>x</code> 的最大整数。</p>\n\n<ul>\n\t<li>对于 <code>n</code> = <code>1</code>、<code>2</code>、<code>3</code>、<code>4</code> 和 <code>5</code> 的情况，中间节点的下标分别是 <code>0</code>、<code>1</code>、<code>1</code>、<code>2</code> 和 <code>2</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg1drawio.png\" style=\"width: 500px; height: 77px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,3,4,7,1,2,6]\n<strong>输出：</strong>[1,3,4,1,2,6]\n<strong>解释：</strong>\n上图表示给出的链表。节点的下标分别标注在每个节点的下方。\n由于 n = 7 ，值为 7 的节点 3 是中间节点，用红色标注。\n返回结果为移除节点后的新链表。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg2drawio.png\" style=\"width: 250px; height: 43px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [1,2,3,4]\n<strong>输出：</strong>[1,2,4]\n<strong>解释：</strong>\n上图表示给出的链表。\n对于 n = 4 ，值为 3 的节点 2 是中间节点，用红色标注。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/16/eg3drawio.png\" style=\"width: 150px; height: 58px;\" /></p>\n\n<pre>\n<strong>输入：</strong>head = [2,1]\n<strong>输出：</strong>[2]\n<strong>解释：</strong>\n上图表示给出的链表。\n对于 n = 2 ，值为 1 的节点 1 是中间节点，用红色标注。\n值为 2 的节点 0 是移除节点 1 后剩下的唯一一个节点。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>链表中节点的数目在范围 <code>[1, 10<sup>5</sup>]</code> 内</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2096.从二叉树一个节点到另一个节点每一步的方向",
        "hardRate": "MEDIUM",
        "passRate": "44.59%",
        "problemsUrl": "https://leetcode.cn/problems/step-by-step-directions-from-a-binary-tree-node-to-another/",
        "solutionsUrl": "https://leetcode.cn/problems/step-by-step-directions-from-a-binary-tree-node-to-another/solution",
        "problemsDesc": "<p>给你一棵 <strong>二叉树</strong>&nbsp;的根节点&nbsp;<code>root</code>&nbsp;，这棵二叉树总共有&nbsp;<code>n</code>&nbsp;个节点。每个节点的值为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;中的一个整数，且互不相同。给你一个整数&nbsp;<code>startValue</code>&nbsp;，表示起点节点 <code>s</code>&nbsp;的值，和另一个不同的整数&nbsp;<code>destValue</code>&nbsp;，表示终点节点&nbsp;<code>t</code>&nbsp;的值。</p>\n\n<p>请找到从节点&nbsp;<code>s</code>&nbsp;到节点 <code>t</code>&nbsp;的 <strong>最短路径</strong>&nbsp;，并以字符串的形式返回每一步的方向。每一步用 <strong>大写</strong>&nbsp;字母&nbsp;<code>'L'</code>&nbsp;，<code>'R'</code>&nbsp;和&nbsp;<code>'U'</code>&nbsp;分别表示一种方向：</p>\n\n<ul>\n\t<li><code>'L'</code>&nbsp;表示从一个节点前往它的 <strong>左孩子</strong>&nbsp;节点。</li>\n\t<li><code>'R'</code>&nbsp;表示从一个节点前往它的 <strong>右孩子</strong>&nbsp;节点。</li>\n\t<li><code>'U'</code>&nbsp;表示从一个节点前往它的 <strong>父</strong>&nbsp;节点。</li>\n</ul>\n\n<p>请你返回从 <code>s</code>&nbsp;到 <code>t</code>&nbsp;<strong>最短路径</strong>&nbsp;每一步的方向。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/15/eg1.png\" style=\"width: 214px; height: 163px;\"></p>\n\n<pre><b>输入：</b>root = [5,1,2,3,null,6,4], startValue = 3, destValue = 6\n<b>输出：</b>\"UURL\"\n<b>解释：</b>最短路径为：3 → 1 → 5 → 2 → 6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/11/15/eg2.png\" style=\"width: 74px; height: 102px;\"></p>\n\n<pre><b>输入：</b>root = [2,1], startValue = 2, destValue = 1\n<b>输出：</b>\"L\"\n<b>解释：</b>最短路径为：2 → 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点数目为&nbsp;<code>n</code>&nbsp;。</li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= n</code></li>\n\t<li>树中所有节点的值 <strong>互不相同</strong>&nbsp;。</li>\n\t<li><code>1 &lt;= startValue, destValue &lt;= n</code></li>\n\t<li><code>startValue != destValue</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2097.合法重新排列数对",
        "hardRate": "HARD",
        "passRate": "37.97%",
        "problemsUrl": "https://leetcode.cn/problems/valid-arrangement-of-pairs/",
        "solutionsUrl": "https://leetcode.cn/problems/valid-arrangement-of-pairs/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>pairs</code>&nbsp;，其中&nbsp;<code>pairs[i] = [start<sub>i</sub>, end<sub>i</sub>]</code>&nbsp;。如果 <code>pairs</code>&nbsp;的一个重新排列，满足对每一个下标 <code>i</code> （&nbsp;<code>1 &lt;= i &lt; pairs.length</code>&nbsp;）都有&nbsp;<code>end<sub>i-1</sub> == start<sub>i</sub></code><sub> </sub>，那么我们就认为这个重新排列是&nbsp;<code>pairs</code> 的一个 <strong>合法重新排列</strong> 。</p>\n\n<p>请你返回 <strong>任意一个</strong>&nbsp;<code>pairs</code> 的合法重新排列。</p>\n\n<p><b>注意：</b>数据保证至少存在一个 <code>pairs</code>&nbsp;的合法重新排列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>pairs = [[5,1],[4,5],[11,9],[9,4]]\n<b>输出：</b>[[11,9],[9,4],[4,5],[5,1]]\n<strong>解释：\n</strong>输出的是一个合法重新排列，因为每一个 end<sub>i-1</sub> 都等于 start<sub>i</sub>&nbsp;。\nend<sub>0</sub> = 9 == 9 = start<sub>1</sub> \nend<sub>1</sub> = 4 == 4 = start<sub>2</sub>\nend<sub>2</sub> = 5 == 5 = start<sub>3</sub>\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>pairs = [[1,3],[3,2],[2,1]]\n<b>输出：</b>[[1,3],[3,2],[2,1]]\n<strong>解释：</strong>\n输出的是一个合法重新排列，因为每一个 end<sub>i-1</sub> 都等于 start<sub>i</sub>&nbsp;。\nend<sub>0</sub> = 3 == 3 = start<sub>1</sub>\nend<sub>1</sub> = 2 == 2 = start<sub>2</sub>\n重新排列后的数组 [[2,1],[1,3],[3,2]] 和 [[3,2],[2,1],[1,3]] 都是合法的。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>pairs = [[1,2],[1,3],[2,1]]\n<b>输出：</b>[[1,2],[2,1],[1,3]]\n<strong>解释：</strong>\n输出的是一个合法重新排列，因为每一个 end<sub>i-1</sub> 都等于 start<sub>i</sub>&nbsp;。\nend<sub>0</sub> = 2 == 2 = start<sub>1</sub>\nend<sub>1</sub> = 1 == 1 = start<sub>2</sub>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>pairs[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub>, end<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>start<sub>i</sub> != end<sub>i</sub></code></li>\n\t<li><code>pairs</code>&nbsp;中不存在一模一样的数对。</li>\n\t<li>至少 <strong>存在</strong> 一个合法的&nbsp;<code>pairs</code>&nbsp;重新排列。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2098.长度为 K 的最大偶数和子序列",
        "hardRate": "MEDIUM",
        "passRate": "35.45%",
        "problemsUrl": "https://leetcode.cn/problems/subsequence-of-size-k-with-the-largest-even-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/subsequence-of-size-k-with-the-largest-even-sum/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2099.找到和最大的长度为 K 的子序列",
        "hardRate": "EASY",
        "passRate": "48.33%",
        "problemsUrl": "https://leetcode.cn/problems/find-subsequence-of-length-k-with-the-largest-sum/",
        "solutionsUrl": "https://leetcode.cn/problems/find-subsequence-of-length-k-with-the-largest-sum/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。你需要找到&nbsp;<code>nums</code>&nbsp;中长度为 <code>k</code>&nbsp;的 <strong>子序列</strong>&nbsp;，且这个子序列的&nbsp;<strong>和最大&nbsp;</strong>。</p>\n\n<p>请你返回 <strong>任意</strong> 一个长度为&nbsp;<code>k</code>&nbsp;的整数子序列。</p>\n\n<p><strong>子序列</strong>&nbsp;定义为从一个数组里删除一些元素后，不改变剩下元素的顺序得到的数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [2,1,3,3], k = 2\n<b>输出：</b>[3,3]\n<strong>解释：</strong>\n子序列有最大和：3 + 3 = 6 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [-1,-2,3,4], k = 3\n<b>输出：</b>[-1,3,4]\n<b>解释：</b>\n子序列有最大和：-1 + 3 + 4 = 6 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [3,4,3,3], k = 2\n<b>输出：</b>[3,4]\n<strong>解释：</strong>\n子序列有最大和：3 + 4 = 7 。\n另一个可行的子序列为 [4, 3] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-10<sup>5</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2100.适合打劫银行的日子",
        "hardRate": "MEDIUM",
        "passRate": "48.68%",
        "problemsUrl": "https://leetcode.cn/problems/find-good-days-to-rob-the-bank/",
        "solutionsUrl": "https://leetcode.cn/problems/find-good-days-to-rob-the-bank/solution",
        "problemsDesc": "<p>你和一群强盗准备打劫银行。给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>security</code>&nbsp;，其中&nbsp;<code>security[i]</code>&nbsp;是第 <code>i</code>&nbsp;天执勤警卫的数量。日子从 <code>0</code>&nbsp;开始编号。同时给你一个整数&nbsp;<code>time</code>&nbsp;。</p>\n\n<p>如果第 <code>i</code>&nbsp;天满足以下所有条件，我们称它为一个适合打劫银行的日子：</p>\n\n<ul>\n\t<li>第 <code>i</code>&nbsp;天前和后都分别至少有 <code>time</code>&nbsp;天。</li>\n\t<li>第 <code>i</code>&nbsp;天前连续 <code>time</code>&nbsp;天警卫数目都是非递增的。</li>\n\t<li>第 <code>i</code>&nbsp;天后连续 <code>time</code>&nbsp;天警卫数目都是非递减的。</li>\n</ul>\n\n<p>更正式的，第 <code>i</code> 天是一个合适打劫银行的日子当且仅当：<code>security[i - time] &gt;= security[i - time + 1] &gt;= ... &gt;= security[i] &lt;= ... &lt;= security[i + time - 1] &lt;= security[i + time]</code>.</p>\n\n<p>请你返回一个数组，包含 <strong>所有</strong> 适合打劫银行的日子（下标从 <strong>0</strong>&nbsp;开始）。返回的日子可以 <strong>任意</strong>&nbsp;顺序排列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>security = [5,3,3,3,5,6,2], time = 2\n<b>输出：</b>[2,3]\n<strong>解释：</strong>\n第 2 天，我们有 security[0] &gt;= security[1] &gt;= security[2] &lt;= security[3] &lt;= security[4] 。\n第 3 天，我们有 security[1] &gt;= security[2] &gt;= security[3] &lt;= security[4] &lt;= security[5] 。\n没有其他日子符合这个条件，所以日子 2 和 3 是适合打劫银行的日子。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>security = [1,1,1,1,1], time = 0\n<b>输出：</b>[0,1,2,3,4]\n<strong>解释：</strong>\n因为 time 等于 0 ，所以每一天都是适合打劫银行的日子，所以返回每一天。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>security = [1,2,3,4,5,6], time = 2\n<b>输出：</b>[]\n<strong>解释：</strong>\n没有任何一天的前 2 天警卫数目是非递增的。\n所以没有适合打劫银行的日子，返回空数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= security.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= security[i], time &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    }
]