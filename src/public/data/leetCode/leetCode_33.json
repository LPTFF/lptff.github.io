[
    {
        "problemsName": " 2401.最长优雅子数组",
        "hardRate": "MEDIUM",
        "passRate": "49.65%",
        "problemsUrl": "https://leetcode.cn/problems/longest-nice-subarray/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-nice-subarray/solution",
        "problemsDesc": "<p>给你一个由 <strong>正</strong> 整数组成的数组 <code>nums</code> 。</p>\n\n<p>如果&nbsp;<code>nums</code> 的子数组中位于 <strong>不同</strong> 位置的每对元素按位 <strong>与（AND）</strong>运算的结果等于 <code>0</code> ，则称该子数组为 <strong>优雅</strong> 子数组。</p>\n\n<p>返回 <strong>最长</strong> 的优雅子数组的长度。</p>\n\n<p><strong>子数组</strong> 是数组中的一个 <strong>连续</strong> 部分。</p>\n\n<p><strong>注意：</strong>长度为 <code>1</code> 的子数组始终视作优雅子数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,8,48,10]\n<strong>输出：</strong>3\n<strong>解释：</strong>最长的优雅子数组是 [3,8,48] 。子数组满足题目条件：\n- 3 AND 8 = 0\n- 3 AND 48 = 0\n- 8 AND 48 = 0\n可以证明不存在更长的优雅子数组，所以返回 3 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,1,5,11,13]\n<strong>输出：</strong>1\n<strong>解释：</strong>最长的优雅子数组长度为 1 ，任何长度为 1 的子数组都满足题目条件。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2402.会议室 III",
        "hardRate": "HARD",
        "passRate": "32.59%",
        "problemsUrl": "https://leetcode.cn/problems/meeting-rooms-iii/",
        "solutionsUrl": "https://leetcode.cn/problems/meeting-rooms-iii/solution",
        "problemsDesc": "<p>给你一个整数 <code>n</code> ，共有编号从 <code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个会议室。</p>\n\n<p>给你一个二维整数数组 <code>meetings</code> ，其中 <code>meetings[i] = [start<sub>i</sub>, end<sub>i</sub>]</code> 表示一场会议将会在 <strong>半闭</strong> 时间区间 <code>[start<sub>i</sub>, end<sub>i</sub>)</code> 举办。所有 <code>start<sub>i</sub></code> 的值 <strong>互不相同</strong> 。</p>\n\n<p>会议将会按以下方式分配给会议室：</p>\n\n<ol>\n\t<li>每场会议都会在未占用且编号 <strong>最小</strong> 的会议室举办。</li>\n\t<li>如果没有可用的会议室，会议将会延期，直到存在空闲的会议室。延期会议的持续时间和原会议持续时间 <strong>相同</strong> 。</li>\n\t<li>当会议室处于未占用状态时，将会优先提供给原 <strong>开始</strong> 时间更早的会议。</li>\n</ol>\n\n<p>返回举办最多次会议的房间 <strong>编号</strong> 。如果存在多个房间满足此条件，则返回编号 <strong>最小</strong> 的房间。</p>\n\n<p><strong>半闭区间 </strong><code>[a, b)</code> 是 <code>a</code> 和 <code>b</code> 之间的区间，<strong>包括</strong> <code>a</code> 但<strong> 不包括</strong> <code>b</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 2, meetings = [[0,10],[1,5],[2,7],[3,4]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n- 在时间 0 ，两个会议室都未占用，第一场会议在会议室 0 举办。\n- 在时间 1 ，只有会议室 1 未占用，第二场会议在会议室 1 举办。\n- 在时间 2 ，两个会议室都被占用，第三场会议延期举办。\n- 在时间 3 ，两个会议室都被占用，第四场会议延期举办。\n- 在时间 5 ，会议室 1 的会议结束。第三场会议在会议室 1 举办，时间周期为 [5,10) 。\n- 在时间 10 ，两个会议室的会议都结束。第四场会议在会议室 0 举办，时间周期为 [10,11) 。\n会议室 0 和会议室 1 都举办了 2 场会议，所以返回 0 。 \n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 3, meetings = [[1,20],[2,10],[3,5],[4,9],[6,8]]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n- 在时间 1 ，所有三个会议室都未占用，第一场会议在会议室 0 举办。\n- 在时间 2 ，会议室 1 和 2 未占用，第二场会议在会议室 1 举办。\n- 在时间 3 ，只有会议室 2 未占用，第三场会议在会议室 2 举办。\n- 在时间 4 ，所有三个会议室都被占用，第四场会议延期举办。 \n- 在时间 5 ，会议室 2 的会议结束。第四场会议在会议室 2 举办，时间周期为 [5,10) 。\n- 在时间 6 ，所有三个会议室都被占用，第五场会议延期举办。 \n- 在时间 10 ，会议室 1 和 2 的会议结束。第五场会议在会议室 1 举办，时间周期为 [10,12) 。 \n会议室 1 和会议室 2 都举办了 2 场会议，所以返回 1 。 \n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li><code>1 &lt;= meetings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>meetings[i].length == 2</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>start<sub>i</sub></code> 的所有值 <strong>互不相同</strong></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2403.杀死所有怪物的最短时间",
        "hardRate": "HARD",
        "passRate": "70.18%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-time-to-kill-all-monsters/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-time-to-kill-all-monsters/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2404.出现最频繁的偶数元素",
        "hardRate": "EASY",
        "passRate": "58.32%",
        "problemsUrl": "https://leetcode.cn/problems/most-frequent-even-element/",
        "solutionsUrl": "https://leetcode.cn/problems/most-frequent-even-element/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> ，返回出现最频繁的偶数元素。</p>\n\n<p>如果存在多个满足条件的元素，只需要返回 <strong>最小</strong> 的一个。如果不存在这样的元素，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [0,1,2,2,4,4,1]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n数组中的偶数元素为 0、2 和 4 ，在这些元素中，2 和 4 出现次数最多。\n返回最小的那个，即返回 2 。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [4,4,4,9,2,4]\n<strong>输出：</strong>4\n<strong>解释：</strong>4 是出现最频繁的偶数元素。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>nums = [29,47,21,41,13,37,25,7]\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在偶数元素。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2405.子字符串的最优划分",
        "hardRate": "MEDIUM",
        "passRate": "74.82%",
        "problemsUrl": "https://leetcode.cn/problems/optimal-partition-of-string/",
        "solutionsUrl": "https://leetcode.cn/problems/optimal-partition-of-string/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> ，请你将该字符串划分成一个或多个 <strong>子字符串</strong> ，并满足每个子字符串中的字符都是 <strong>唯一</strong> 的。也就是说，在单个子字符串中，字母的出现次数都不超过 <strong>一次</strong> 。</p>\n\n<p>满足题目要求的情况下，返回 <strong>最少</strong> 需要划分多少个子字符串<em>。</em></p>\n\n<p>注意，划分后，原字符串中的每个字符都应该恰好属于一个子字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abacaba\"\n<strong>输出：</strong>4\n<strong>解释：</strong>\n两种可行的划分方法分别是 (\"a\",\"ba\",\"cab\",\"a\") 和 (\"ab\",\"a\",\"ca\",\"ba\") 。\n可以证明最少需要划分 4 个子字符串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"ssssss\"\n<strong>输出：</strong>6\n<strong>解释：\n</strong>只存在一种可行的划分方法 (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\") 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2406.将区间分为最少组数",
        "hardRate": "MEDIUM",
        "passRate": "44.70%",
        "problemsUrl": "https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/",
        "solutionsUrl": "https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/solution",
        "problemsDesc": "<p>给你一个二维整数数组&nbsp;<code>intervals</code>&nbsp;，其中&nbsp;<code>intervals[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>&nbsp;表示 <strong>闭</strong>&nbsp;区间&nbsp;<code>[left<sub>i</sub>, right<sub>i</sub>]</code>&nbsp;。</p>\n\n<p>你需要将&nbsp;<code>intervals</code> 划分为一个或者多个区间&nbsp;<strong>组</strong>&nbsp;，每个区间 <b>只</b>&nbsp;属于一个组，且同一个组中任意两个区间 <strong>不相交</strong>&nbsp;。</p>\n\n<p>请你返回 <strong>最少</strong>&nbsp;需要划分成多少个组。</p>\n\n<p>如果两个区间覆盖的范围有重叠（即至少有一个公共数字），那么我们称这两个区间是 <strong>相交</strong>&nbsp;的。比方说区间&nbsp;<code>[1, 5]</code> 和&nbsp;<code>[5, 8]</code>&nbsp;相交。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>intervals = [[5,10],[6,8],[1,5],[2,3],[1,10]]\n<b>输出：</b>3\n<b>解释：</b>我们可以将区间划分为如下的区间组：\n- 第 1 组：[1, 5] ，[6, 8] 。\n- 第 2 组：[2, 3] ，[5, 10] 。\n- 第 3 组：[1, 10] 。\n可以证明无法将区间划分为少于 3 个组。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>intervals = [[1,3],[5,6],[8,10],[11,13]]\n<b>输出：</b>1\n<b>解释：</b>所有区间互不相交，所以我们可以把它们全部放在一个组内。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= intervals.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>intervals[i].length == 2</code></li>\n\t<li><code>1 &lt;= left<sub>i</sub> &lt;= right<sub>i</sub> &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2407.最长递增子序列 II",
        "hardRate": "HARD",
        "passRate": "30.66%",
        "problemsUrl": "https://leetcode.cn/problems/longest-increasing-subsequence-ii/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-increasing-subsequence-ii/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。</p>\n\n<p>找到&nbsp;<code>nums</code>&nbsp;中满足以下要求的最长子序列：</p>\n\n<ul>\n\t<li>子序列 <strong>严格递增</strong></li>\n\t<li>子序列中相邻元素的差值 <strong>不超过</strong>&nbsp;<code>k</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回满足上述要求的 <strong>最长子序列</strong>&nbsp;的长度。</p>\n\n<p><strong>子序列</strong>&nbsp;是从一个数组中删除部分元素后，剩余元素不改变顺序得到的数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [4,2,1,4,3,4,5,8,15], k = 3\n<b>输出：</b>5\n<strong>解释：</strong>\n满足要求的最长子序列是 [1,3,4,5,8] 。\n子序列长度为 5 ，所以我们返回 5 。\n注意子序列 [1,3,4,5,8,15] 不满足要求，因为 15 - 8 = 7 大于 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [7,4,5,1,8,12,4,7], k = 5\n<b>输出：</b>4\n<strong>解释：</strong>\n满足要求的最长子序列是 [4,5,8,12] 。\n子序列长度为 4 ，所以我们返回 4 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [1,5], k = 1\n<b>输出：</b>1\n<strong>解释：</strong>\n满足要求的最长子序列是 [1] 。\n子序列长度为 1 ，所以我们返回 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2408.设计 SQL",
        "hardRate": "MEDIUM",
        "passRate": "64.04%",
        "problemsUrl": "https://leetcode.cn/problems/design-sql/",
        "solutionsUrl": "https://leetcode.cn/problems/design-sql/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2409.统计共同度过的日子数",
        "hardRate": "EASY",
        "passRate": "55.95%",
        "problemsUrl": "https://leetcode.cn/problems/count-days-spent-together/",
        "solutionsUrl": "https://leetcode.cn/problems/count-days-spent-together/solution",
        "problemsDesc": "<p>Alice 和 Bob 计划分别去罗马开会。</p>\n\n<p>给你四个字符串&nbsp;<code>arriveAlice</code>&nbsp;，<code>leaveAlice</code>&nbsp;，<code>arriveBob</code>&nbsp;和&nbsp;<code>leaveBob</code>&nbsp;。Alice 会在日期&nbsp;<code>arriveAlice</code>&nbsp;到&nbsp;<code>leaveAlice</code>&nbsp;之间在城市里（<strong>日期为闭区间</strong>），而 Bob 在日期&nbsp;<code>arriveBob</code>&nbsp;到&nbsp;<code>leaveBob</code>&nbsp;之间在城市里（<strong>日期为闭区间</strong>）。每个字符串都包含 5 个字符，格式为&nbsp;<code>\"MM-DD\"</code>&nbsp;，对应着一个日期的月和日。</p>\n\n<p>请你返回 Alice和 Bob 同时在罗马的天数。</p>\n\n<p>你可以假设所有日期都在 <strong>同一个</strong>&nbsp;自然年，而且 <strong>不是</strong>&nbsp;闰年。每个月份的天数分别为：<code>[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>arriveAlice = \"08-15\", leaveAlice = \"08-18\", arriveBob = \"08-16\", leaveBob = \"08-19\"\n<b>输出：</b>3\n<b>解释：</b>Alice 从 8 月 15 号到 8 月 18 号在罗马。Bob 从 8 月 16 号到 8 月 19 号在罗马，他们同时在罗马的日期为 8 月 16、17 和 18 号。所以答案为 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>arriveAlice = \"10-01\", leaveAlice = \"10-31\", arriveBob = \"11-01\", leaveBob = \"12-31\"\n<b>输出：</b>0\n<b>解释：</b>Alice 和 Bob 没有同时在罗马的日子，所以我们返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>所有日期的格式均为&nbsp;<code>\"MM-DD\"</code>&nbsp;。</li>\n\t<li>Alice 和 Bob 的到达日期都 <strong>早于或等于</strong> 他们的离开日期。</li>\n\t<li>题目测试用例所给出的日期均为 <strong>非闰年</strong> 的有效日期。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2410.运动员和训练师的最大匹配数",
        "hardRate": "MEDIUM",
        "passRate": "64.83%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-matching-of-players-with-trainers/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-matching-of-players-with-trainers/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>players</code>&nbsp;，其中&nbsp;<code>players[i]</code>&nbsp;表示第 <code>i</code>&nbsp;名运动员的 <strong>能力</strong>&nbsp;值，同时给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>trainers</code>&nbsp;，其中&nbsp;<code>trainers[j]</code>&nbsp;表示第 <code>j</code>&nbsp;名训练师的 <strong>训练能力值</strong>&nbsp;。</p>\n\n<p>如果第 <code>i</code>&nbsp;名运动员的能力值 <strong>小于等于</strong>&nbsp;第 <code>j</code>&nbsp;名训练师的能力值，那么第&nbsp;<code>i</code>&nbsp;名运动员可以 <strong>匹配</strong>&nbsp;第&nbsp;<code>j</code>&nbsp;名训练师。除此以外，每名运动员至多可以匹配一位训练师，每位训练师最多可以匹配一位运动员。</p>\n\n<p>请你返回满足上述要求&nbsp;<code>players</code>&nbsp;和 <code>trainers</code>&nbsp;的 <strong>最大</strong> 匹配数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>players = [4,7,9], trainers = [8,2,5,8]\n<b>输出：</b>2\n<b>解释：</b>\n得到两个匹配的一种方案是：\n- players[0] 与 trainers[0] 匹配，因为 4 &lt;= 8 。\n- players[1] 与 trainers[3] 匹配，因为 7 &lt;= 8 。\n可以证明 2 是可以形成的最大匹配数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>players = [1,1,1], trainers = [10]\n<b>输出：</b>1\n<b>解释：</b>\n训练师可以匹配所有 3 个运动员\n每个运动员至多只能匹配一个训练师，所以最大答案是 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= players.length, trainers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= players[i], trainers[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2411.按位或最大的最小子数组长度",
        "hardRate": "MEDIUM",
        "passRate": "43.35%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-subarrays-with-maximum-bitwise-or/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，数组中所有数字均为非负整数。对于&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;之间的每一个下标 <code>i</code>&nbsp;，你需要找出&nbsp;<code>nums</code>&nbsp;中一个 <strong>最小</strong> 非空子数组，它的起始位置为&nbsp;<code>i</code>&nbsp;（包含这个位置），同时有&nbsp;<strong>最大</strong>&nbsp;的 <strong>按位或</strong><b>运算值</b>&nbsp;。</p>\n\n<ul>\n\t<li>换言之，令&nbsp;<code>B<sub>ij</sub></code>&nbsp;表示子数组&nbsp;<code>nums[i...j]</code>&nbsp;的按位或运算的结果，你需要找到一个起始位置为&nbsp;<code>i</code>&nbsp;的最小子数组，这个子数组的按位或运算的结果等于&nbsp;<code>max(B<sub>ik</sub>)</code>&nbsp;，其中&nbsp;<code>i &lt;= k &lt;= n - 1</code>&nbsp;。</li>\n</ul>\n\n<p>一个数组的按位或运算值是这个数组里所有数字按位或运算的结果。</p>\n\n<p>请你返回一个大小为 <code>n</code>&nbsp;的整数数组<em>&nbsp;</em><code>answer</code>，其中<em>&nbsp;</em><code>answer[i]</code>是开始位置为&nbsp;<code>i</code>&nbsp;，按位或运算结果最大，且&nbsp;<strong>最短</strong>&nbsp;子数组的长度。</p>\n\n<p><strong>子数组</strong>&nbsp;是数组里一段连续非空元素组成的序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [1,0,2,1,3]\n<b>输出：</b>[3,3,2,2,1]\n<strong>解释：</strong>\n任何位置开始，最大按位或运算的结果都是 3 。\n- 下标 0 处，能得到结果 3 的最短子数组是 [1,0,2] 。\n- 下标 1 处，能得到结果 3 的最短子数组是 [0,2,1] 。\n- 下标 2 处，能得到结果 3 的最短子数组是 [2,1] 。\n- 下标 3 处，能得到结果 3 的最短子数组是 [1,3] 。\n- 下标 4 处，能得到结果 3 的最短子数组是 [3] 。\n所以我们返回 [3,3,2,2,1] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,2]\n<b>输出：</b>[2,1]\n<strong>解释：\n</strong>下标 0 处，能得到最大按位或运算值的最短子数组长度为 2 。\n下标 1 处，能得到最大按位或运算值的最短子数组长度为 1 。\n所以我们返回 [2,1] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2412.完成所有交易的初始最少钱数",
        "hardRate": "HARD",
        "passRate": "48.35%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-money-required-before-transactions/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-money-required-before-transactions/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code><font face=\"monospace\">transactions</font></code>，其中<code>transactions[i] = [cost<sub>i</sub>, cashback<sub>i</sub>]</code>&nbsp;。</p>\n\n<p>数组描述了若干笔交易。其中每笔交易必须以 <strong>某种顺序</strong> 恰好完成一次。在任意一个时刻，你有一定数目的钱&nbsp;<code>money</code>&nbsp;，为了完成交易&nbsp;<code>i</code>&nbsp;，<code>money &gt;= cost<sub>i</sub></code>&nbsp;这个条件必须为真。执行交易后，你的钱数&nbsp;<code>money</code> 变成&nbsp;<code>money - cost<sub>i</sub> + cashback<sub>i</sub></code><sub>&nbsp;</sub>。</p>\n\n<p>请你返回 <strong>任意一种</strong> 交易顺序下，你都能完成所有交易的最少钱数<em>&nbsp;</em><code>money</code>&nbsp;是多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>transactions = [[2,1],[5,0],[4,2]]\n<b>输出：</b>10\n<strong>解释：\n</strong>刚开始 money = 10 ，交易可以以任意顺序进行。\n可以证明如果 money &lt; 10 ，那么某些交易无法进行。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>transactions = [[3,0],[0,3]]\n<b>输出：</b>3\n<strong>解释：</strong>\n- 如果交易执行的顺序是 [[3,0],[0,3]] ，完成所有交易需要的最少钱数是 3 。\n- 如果交易执行的顺序是 [[0,3],[3,0]] ，完成所有交易需要的最少钱数是 0 。\n所以，刚开始钱数为 3 ，任意顺序下交易都可以全部完成。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= transactions.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>transactions[i].length == 2</code></li>\n\t<li><code>0 &lt;= cost<sub>i</sub>, cashback<sub>i</sub> &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2413.最小偶倍数",
        "hardRate": "EASY",
        "passRate": "87.39%",
        "problemsUrl": "https://leetcode.cn/problems/smallest-even-multiple/",
        "solutionsUrl": "https://leetcode.cn/problems/smallest-even-multiple/solution",
        "problemsDesc": "给你一个正整数 <code>n</code> ，返回 <code>2</code><em> </em>和<em> </em><code>n</code> 的最小公倍数（正整数）。\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 5\n<strong>输出：</strong>10\n<strong>解释：</strong>5 和 2 的最小公倍数是 10 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 6\n<strong>输出：</strong>6\n<strong>解释：</strong>6 和 2 的最小公倍数是 6 。注意数字会是它自身的倍数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 150</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2414.最长的字母序连续子字符串的长度",
        "hardRate": "MEDIUM",
        "passRate": "60.43%",
        "problemsUrl": "https://leetcode.cn/problems/length-of-the-longest-alphabetical-continuous-substring/",
        "solutionsUrl": "https://leetcode.cn/problems/length-of-the-longest-alphabetical-continuous-substring/solution",
        "problemsDesc": "<p><strong>字母序连续字符串</strong> 是由字母表中连续字母组成的字符串。换句话说，字符串 <code>\"abcdefghijklmnopqrstuvwxyz\"</code> 的任意子字符串都是 <strong>字母序连续字符串</strong> 。</p>\n\n<ul>\n\t<li>例如，<code>\"abc\"</code> 是一个字母序连续字符串，而 <code>\"acb\"</code> 和 <code>\"za\"</code> 不是。</li>\n</ul>\n\n<p>给你一个仅由小写英文字母组成的字符串 <code>s</code> ，返回其 <strong>最长</strong> 的 字母序连续子字符串 的长度。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abacaba\"\n<strong>输出：</strong>2\n<strong>解释：</strong>共有 4 个不同的字母序连续子字符串 \"a\"、\"b\"、\"c\" 和 \"ab\" 。\n\"ab\" 是最长的字母序连续子字符串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"abcde\"\n<strong>输出：</strong>5\n<strong>解释：</strong>\"abcde\" 是最长的字母序连续子字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2415.反转二叉树的奇数层",
        "hardRate": "MEDIUM",
        "passRate": "70.08%",
        "problemsUrl": "https://leetcode.cn/problems/reverse-odd-levels-of-binary-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/reverse-odd-levels-of-binary-tree/solution",
        "problemsDesc": "<p>给你一棵 <strong>完美</strong> 二叉树的根节点 <code>root</code> ，请你反转这棵树中每个 <strong>奇数</strong> 层的节点值。</p>\n\n<ul>\n\t<li>例如，假设第 3 层的节点值是 <code>[2,1,3,4,7,11,29,18]</code> ，那么反转后它应该变成 <code>[18,29,11,7,4,3,1,2]</code> 。</li>\n</ul>\n\n<p>反转后，返回树的根节点。</p>\n\n<p><strong>完美</strong> 二叉树需满足：二叉树的所有父节点都有两个子节点，且所有叶子节点都在同一层。</p>\n\n<p>节点的 <strong>层数</strong> 等于该节点到根节点之间的边数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/28/first_case1.png\" style=\"width: 626px; height: 191px;\" />\n<pre>\n<strong>输入：</strong>root = [2,3,5,8,13,21,34]\n<strong>输出：</strong>[2,5,3,8,13,21,34]\n<strong>解释：</strong>\n这棵树只有一个奇数层。\n在第 1 层的节点分别是 3、5 ，反转后为 5、3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/07/28/second_case3.png\" style=\"width: 591px; height: 111px;\" />\n<pre>\n<strong>输入：</strong>root = [7,13,11]\n<strong>输出：</strong>[7,11,13]\n<strong>解释：</strong> \n在第 1 层的节点分别是 13、11 ，反转后为 11、13 。 \n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>root = [0,1,2,0,0,0,0,1,1,1,1,2,2,2,2]\n<strong>输出：</strong>[0,2,1,0,0,0,0,2,2,2,2,1,1,1,1]\n<strong>解释：</strong>奇数层由非零值组成。\n在第 1 层的节点分别是 1、2 ，反转后为 2、1 。\n在第 3 层的节点分别是 1、1、1、1、2、2、2、2 ，反转后为 2、2、2、2、1、1、1、1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中的节点数目在范围 <code>[1, 2<sup>14</sup>]</code> 内</li>\n\t<li><code>0 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li><code>root</code> 是一棵 <strong>完美</strong> 二叉树</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2416.字符串的前缀分数和",
        "hardRate": "HARD",
        "passRate": "40.61%",
        "problemsUrl": "https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/",
        "solutionsUrl": "https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code> 的数组 <code>words</code> ，该数组由 <strong>非空</strong> 字符串组成。</p>\n\n<p>定义字符串 <code>word</code> 的 <strong>分数</strong> 等于以 <code>word</code> 作为 <strong>前缀</strong> 的 <code>words[i]</code> 的数目。</p>\n\n<ul>\n\t<li>例如，如果 <code>words = [\"a\", \"ab\", \"abc\", \"cab\"]</code> ，那么 <code>\"ab\"</code> 的分数是 <code>2</code> ，因为 <code>\"ab\"</code> 是 <code>\"ab\"</code> 和 <code>\"abc\"</code> 的一个前缀。</li>\n</ul>\n\n<p>返回一个长度为<em> </em><code>n</code> 的数组<em> </em><code>answer</code><em> </em>，其中<em> </em><code>answer[i]</code><em> </em>是<em>&nbsp;</em><code>words[i]</code> 的每个非空前缀的分数 <strong>总和</strong> <em>。</em></p>\n\n<p><strong>注意：</strong>字符串视作它自身的一个前缀。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"abc\",\"ab\",\"bc\",\"b\"]\n<strong>输出：</strong>[5,4,3,2]\n<strong>解释：</strong>对应每个字符串的答案如下：\n- \"abc\" 有 3 个前缀：\"a\"、\"ab\" 和 \"abc\" 。\n- 2 个字符串的前缀为 \"a\" ，2 个字符串的前缀为 \"ab\" ，1 个字符串的前缀为 \"abc\" 。\n总计 answer[0] = 2 + 2 + 1 = 5 。\n- \"ab\" 有 2 个前缀：\"a\" 和 \"ab\" 。\n- 2 个字符串的前缀为 \"a\" ，2 个字符串的前缀为 \"ab\" 。\n总计 answer[1] = 2 + 2 = 4 。\n- \"bc\" 有 2 个前缀：\"b\" 和 \"bc\" 。\n- 2 个字符串的前缀为 \"b\" ，1 个字符串的前缀为 \"bc\" 。 \n总计 answer[2] = 2 + 1 = 3 。\n- \"b\" 有 1 个前缀：\"b\"。\n- 2 个字符串的前缀为 \"b\" 。\n总计 answer[3] = 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>words = [\"abcd\"]\n<strong>输出：</strong>[4]\n<strong>解释：</strong>\n\"abcd\" 有 4 个前缀 \"a\"、\"ab\"、\"abc\" 和 \"abcd\"。\n每个前缀的分数都是 1 ，总计 answer[0] = 1 + 1 + 1 + 1 = 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 1000</code></li>\n\t<li><code>words[i]</code> 由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2417.最近的公平整数",
        "hardRate": "MEDIUM",
        "passRate": "45.69%",
        "problemsUrl": "https://leetcode.cn/problems/closest-fair-integer/",
        "solutionsUrl": "https://leetcode.cn/problems/closest-fair-integer/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2418.按身高排序",
        "hardRate": "EASY",
        "passRate": "79.34%",
        "problemsUrl": "https://leetcode.cn/problems/sort-the-people/",
        "solutionsUrl": "https://leetcode.cn/problems/sort-the-people/solution",
        "problemsDesc": "<p>给你一个字符串数组 <code>names</code> ，和一个由 <strong>互不相同</strong> 的正整数组成的数组 <code>heights</code> 。两个数组的长度均为 <code>n</code> 。</p>\n\n<p>对于每个下标 <code>i</code>，<code>names[i]</code> 和 <code>heights[i]</code> 表示第 <code>i</code> 个人的名字和身高。</p>\n\n<p>请按身高 <strong>降序</strong> 顺序返回对应的名字数组 <code>names</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>names = [\"Mary\",\"John\",\"Emma\"], heights = [180,165,170]\n<strong>输出：</strong>[\"Mary\",\"Emma\",\"John\"]\n<strong>解释：</strong>Mary 最高，接着是 Emma 和 John 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>names = [\"Alice\",\"Bob\",\"Bob\"], heights = [155,185,150]\n<strong>输出：</strong>[\"Bob\",\"Alice\",\"Bob\"]\n<strong>解释：</strong>第一个 Bob 最高，然后是 Alice 和第二个 Bob 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == names.length == heights.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>3</sup></code></li>\n\t<li><code>1 &lt;= names[i].length &lt;= 20</code></li>\n\t<li><code>1 &lt;= heights[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>names[i]</code> 由大小写英文字母组成</li>\n\t<li><code>heights</code> 中的所有值互不相同</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2419.按位与最大的最长子数组",
        "hardRate": "MEDIUM",
        "passRate": "42.58%",
        "problemsUrl": "https://leetcode.cn/problems/longest-subarray-with-maximum-bitwise-and/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-subarray-with-maximum-bitwise-and/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code> 的整数数组 <code>nums</code> 。</p>\n\n<p>考虑 <code>nums</code> 中进行 <strong>按位与（bitwise AND）</strong>运算得到的值 <strong>最大</strong> 的 <strong>非空</strong> 子数组。</p>\n\n<ul>\n\t<li>换句话说，令 <code>k</code> 是 <code>nums</code> <strong>任意</strong> 子数组执行按位与运算所能得到的最大值。那么，只需要考虑那些执行一次按位与运算后等于 <code>k</code> 的子数组。</li>\n</ul>\n\n<p>返回满足要求的 <strong>最长</strong> 子数组的长度。</p>\n\n<p>数组的按位与就是对数组中的所有数字进行按位与运算。</p>\n\n<p><strong>子数组</strong> 是数组中的一个连续元素序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,3,2,2]\n<strong>输出：</strong>2\n<strong>解释：</strong>\n子数组按位与运算的最大值是 3 。\n能得到此结果的最长子数组是 [3,3]，所以返回 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3,4]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n子数组按位与运算的最大值是 4 。 \n能得到此结果的最长子数组是 [4]，所以返回 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2420.找到所有好下标",
        "hardRate": "MEDIUM",
        "passRate": "31.42%",
        "problemsUrl": "https://leetcode.cn/problems/find-all-good-indices/",
        "solutionsUrl": "https://leetcode.cn/problems/find-all-good-indices/solution",
        "problemsDesc": "<p>给你一个大小为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;和一个正整数&nbsp;<code>k</code>&nbsp;。</p>\n\n<p>对于&nbsp;<code>k &lt;= i &lt; n - k</code>&nbsp;之间的一个下标&nbsp;<code>i</code>&nbsp;，如果它满足以下条件，我们就称它为一个&nbsp;<strong>好</strong>&nbsp;下标：</p>\n\n<ul>\n\t<li>下标 <code>i</code> <strong>之前</strong> 的 <code>k</code>&nbsp;个元素是 <strong>非递增的</strong>&nbsp;。</li>\n\t<li>下标 <code>i</code> <strong>之后</strong>&nbsp;的 <code>k</code>&nbsp;个元素是 <strong>非递减的</strong>&nbsp;。</li>\n</ul>\n\n<p>按 <strong>升序</strong>&nbsp;返回所有好下标。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,1,1,1,3,4,1], k = 2\n<b>输出：</b>[2,3]\n<b>解释：</b>数组中有两个好下标：\n- 下标 2 。子数组 [2,1] 是非递增的，子数组 [1,3] 是非递减的。\n- 下标 3 。子数组 [1,1] 是非递增的，子数组 [3,4] 是非递减的。\n注意，下标 4 不是好下标，因为 [4,1] 不是非递减的。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,1,1,2], k = 2\n<b>输出：</b>[]\n<b>解释：</b>数组中没有好下标。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>3 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= n / 2</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2421.好路径的数目",
        "hardRate": "HARD",
        "passRate": "42.69%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-good-paths/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-good-paths/solution",
        "problemsDesc": "<p>给你一棵 <code>n</code>&nbsp;个节点的树（连通无向无环的图），节点编号从&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;且恰好有&nbsp;<code>n - 1</code>&nbsp;条边。</p>\n\n<p>给你一个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>vals</code>&nbsp;，分别表示每个节点的值。同时给你一个二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示节点&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code><sub>&nbsp;</sub>之间有一条&nbsp;<strong>无向</strong>&nbsp;边。</p>\n\n<p>一条 <strong>好路径</strong>&nbsp;需要满足以下条件：</p>\n\n<ol>\n\t<li>开始节点和结束节点的值 <strong>相同</strong>&nbsp;。</li>\n\t<li>开始节点和结束节点中间的所有节点值都 <strong>小于等于</strong>&nbsp;开始节点的值（也就是说开始节点的值应该是路径上所有节点的最大值）。</li>\n</ol>\n\n<p>请你返回不同好路径的数目。</p>\n\n<p>注意，一条路径和它反向的路径算作 <strong>同一</strong>&nbsp;路径。比方说，&nbsp;<code>0 -&gt; 1</code>&nbsp;与&nbsp;<code>1 -&gt; 0</code>&nbsp;视为同一条路径。单个节点也视为一条合法路径。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/f9caaac15b383af9115c5586779dec5.png\" style=\"width: 400px; height: 333px;\"></p>\n\n<pre><b>输入：</b>vals = [1,3,2,1,3], edges = [[0,1],[0,2],[2,3],[2,4]]\n<b>输出：</b>6\n<b>解释：</b>总共有 5 条单个节点的好路径。\n还有 1 条好路径：1 -&gt; 0 -&gt; 2 -&gt; 4 。\n（反方向的路径 4 -&gt; 2 -&gt; 0 -&gt; 1 视为跟 1 -&gt; 0 -&gt; 2 -&gt; 4 一样的路径）\n注意 0 -&gt; 2 -&gt; 3 不是一条好路径，因为 vals[2] &gt; vals[0] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/149d3065ec165a71a1b9aec890776ff.png\" style=\"width: 273px; height: 350px;\"></p>\n\n<pre><b>输入：</b>vals = [1,1,2,2,3], edges = [[0,1],[1,2],[2,3],[2,4]]\n<b>输出：</b>7\n<strong>解释：</strong>总共有 5 条单个节点的好路径。\n还有 2 条好路径：0 -&gt; 1 和 2 -&gt; 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/04/31705e22af3d9c0a557459bc7d1b62d.png\" style=\"width: 100px; height: 88px;\"></p>\n\n<pre><b>输入：</b>vals = [1], edges = []\n<b>输出：</b>1\n<b>解释：</b>这棵树只有一个节点，所以只有一条好路径。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == vals.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= vals[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code>&nbsp;表示一棵合法的树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2422.使用合并操作将数组转换为回文序列",
        "hardRate": "MEDIUM",
        "passRate": "71.30%",
        "problemsUrl": "https://leetcode.cn/problems/merge-operations-to-turn-array-into-a-palindrome/",
        "solutionsUrl": "https://leetcode.cn/problems/merge-operations-to-turn-array-into-a-palindrome/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2423.删除字符使频率相同",
        "hardRate": "EASY",
        "passRate": "25.16%",
        "problemsUrl": "https://leetcode.cn/problems/remove-letter-to-equalize-frequency/",
        "solutionsUrl": "https://leetcode.cn/problems/remove-letter-to-equalize-frequency/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的字符串&nbsp;<code>word</code>&nbsp;，字符串只包含小写英文字母。你需要选择 <strong>一个</strong>&nbsp;下标并 <strong>删除</strong>&nbsp;下标处的字符，使得 <code>word</code>&nbsp;中剩余每个字母出现 <strong>频率</strong>&nbsp;相同。</p>\n\n<p>如果删除一个字母后，<code>word</code>&nbsp;中剩余所有字母的出现频率都相同，那么返回 <code>true</code>&nbsp;，否则返回 <code>false</code>&nbsp;。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>字母&nbsp;<code>x</code>&nbsp;的 <strong>频率</strong><strong>&nbsp;</strong>是这个字母在字符串中出现的次数。</li>\n\t<li>你 <strong>必须</strong>&nbsp;恰好删除一个字母，不能一个字母都不删除。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>word = \"abcc\"\n<b>输出：</b>true\n<b>解释：</b>选择下标 3 并删除该字母，word 变成 \"abc\" 且每个字母出现频率都为 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>word = \"aazz\"\n<b>输出：</b>false\n<b>解释：</b>我们必须删除一个字母，所以要么 \"a\" 的频率变为 1 且 \"z\" 的频率为 2 ，要么两个字母频率反过来。所以不可能让剩余所有字母出现频率相同。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= word.length &lt;= 100</code></li>\n\t<li><code>word</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2424.最长上传前缀",
        "hardRate": "MEDIUM",
        "passRate": "56.08%",
        "problemsUrl": "https://leetcode.cn/problems/longest-uploaded-prefix/",
        "solutionsUrl": "https://leetcode.cn/problems/longest-uploaded-prefix/solution",
        "problemsDesc": "<p>给你一个&nbsp;<code>n</code>&nbsp;个视频的上传序列，每个视频编号为&nbsp;<code>1</code>&nbsp;到&nbsp;<code>n</code>&nbsp;之间的 <strong>不同</strong>&nbsp;数字，你需要依次将这些视频上传到服务器。请你实现一个数据结构，在上传的过程中计算 <strong>最长上传前缀</strong>&nbsp;。</p>\n\n<p>如果&nbsp;<strong>闭区间</strong>&nbsp;<code>1</code>&nbsp;到&nbsp;<code>i</code>&nbsp;之间的视频全部都已经被上传到服务器，那么我们称 <code>i</code>&nbsp;是上传前缀。最长上传前缀指的是符合定义的 <code>i</code>&nbsp;中的 <strong>最大值</strong>&nbsp;。<br>\n<br>\n请你实现&nbsp;<code>LUPrefix</code>&nbsp;类：</p>\n\n<ul>\n\t<li><code>LUPrefix(int n)</code>&nbsp;初始化一个 <code>n</code>&nbsp;个视频的流对象。</li>\n\t<li><code>void upload(int video)</code>&nbsp;上传&nbsp;<code>video</code>&nbsp;到服务器。</li>\n\t<li><code>int longest()</code>&nbsp;返回上述定义的 <strong>最长上传前缀</strong>&nbsp;的长度。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>\n[\"LUPrefix\", \"upload\", \"longest\", \"upload\", \"longest\", \"upload\", \"longest\"]\n[[4], [3], [], [1], [], [2], []]\n<strong>输出：</strong>\n[null, null, 0, null, 1, null, 3]\n\n<strong>解释：</strong>\nLUPrefix server = new LUPrefix(4);   // 初始化 4个视频的上传流\nserver.upload(3);                    // 上传视频 3 。\nserver.longest();                    // 由于视频 1 还没有被上传，最长上传前缀是 0 。\nserver.upload(1);                    // 上传视频 1 。\nserver.longest();                    // 前缀 [1] 是最长上传前缀，所以我们返回 1 。\nserver.upload(2);                    // 上传视频 2 。\nserver.longest();                    // 前缀 [1,2,3] 是最长上传前缀，所以我们返回 3 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= video &lt;= 10<sup>5</sup></code></li>\n\t<li><code>video</code>&nbsp;中所有值 <strong>互不相同</strong>&nbsp;。</li>\n\t<li><code>upload</code> 和&nbsp;<code>longest</code>&nbsp;<strong>总调用</strong> 次数至多不超过&nbsp;<code>2 * 10<sup>5</sup></code>&nbsp;次。</li>\n\t<li>至少会调用&nbsp;<code>longest</code>&nbsp;一次。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2425.所有数对的异或和",
        "hardRate": "MEDIUM",
        "passRate": "64.76%",
        "problemsUrl": "https://leetcode.cn/problems/bitwise-xor-of-all-pairings/",
        "solutionsUrl": "https://leetcode.cn/problems/bitwise-xor-of-all-pairings/solution",
        "problemsDesc": "<p>给你两个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，两个数组都只包含非负整数。请你求出另外一个数组&nbsp;<code>nums3</code>&nbsp;，包含 <code>nums1</code>&nbsp;和 <code>nums2</code>&nbsp;中 <strong>所有数对</strong>&nbsp;的异或和（<code>nums1</code>&nbsp;中每个整数都跟 <code>nums2</code>&nbsp;中每个整数 <strong>恰好</strong>&nbsp;匹配一次）。</p>\n\n<p>请你返回 <code>nums3</code>&nbsp;中所有整数的 <strong>异或和</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums1 = [2,1,3], nums2 = [10,2,5,0]\n<b>输出：</b>13\n<strong>解释：</strong>\n一个可能的 nums3 数组是 [8,0,7,2,11,3,4,1,9,1,6,3] 。\n所有这些数字的异或和是 13 ，所以我们返回 13 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums1 = [1,2], nums2 = [3,4]\n<b>输出：</b>0\n<strong>解释：</strong>\n所有数对异或和的结果分别为 nums1[0] ^ nums2[0] ，nums1[0] ^ nums2[1] ，nums1[1] ^ nums2[0] 和 nums1[1] ^ nums2[1] 。\n所以，一个可能的 nums3 数组是 [2,5,1,6] 。\n2 ^ 5 ^ 1 ^ 6 = 0 ，所以我们返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums1.length, nums2.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums1[i], nums2[j] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2426.满足不等式的数对数目",
        "hardRate": "HARD",
        "passRate": "46.10%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-pairs-satisfying-inequality/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-pairs-satisfying-inequality/solution",
        "problemsDesc": "<p>给你两个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums1</code> 和&nbsp;<code>nums2</code>&nbsp;，两个数组的大小都为&nbsp;<code>n</code>&nbsp;，同时给你一个整数&nbsp;<code>diff</code>&nbsp;，统计满足以下条件的&nbsp;<strong>数对&nbsp;</strong><code>(i, j)</code>&nbsp;：</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt;= n - 1</code>&nbsp;<b>且</b></li>\n\t<li><code>nums1[i] - nums1[j] &lt;= nums2[i] - nums2[j] + diff</code>.</li>\n</ul>\n\n<p>请你返回满足条件的 <strong>数对数目</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums1 = [3,2,5], nums2 = [2,2,1], diff = 1\n<b>输出：</b>3\n<strong>解释：</strong>\n总共有 3 个满足条件的数对：\n1. i = 0, j = 1：3 - 2 &lt;= 2 - 2 + 1 。因为 i &lt; j 且 1 &lt;= 1 ，这个数对满足条件。\n2. i = 0, j = 2：3 - 5 &lt;= 2 - 1 + 1 。因为 i &lt; j 且 -2 &lt;= 2 ，这个数对满足条件。\n3. i = 1, j = 2：2 - 5 &lt;= 2 - 1 + 1 。因为 i &lt; j 且 -3 &lt;= 2 ，这个数对满足条件。\n所以，我们返回 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums1 = [3,-1], nums2 = [-2,2], diff = -1\n<b>输出：</b>0\n<strong>解释：</strong>\n没有满足条件的任何数对，所以我们返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums1.length == nums2.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= diff &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2427.公因子的数目",
        "hardRate": "EASY",
        "passRate": "81.64%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-common-factors/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-common-factors/solution",
        "problemsDesc": "<p>给你两个正整数 <code>a</code> 和 <code>b</code> ，返回 <code>a</code> 和 <code>b</code> 的 <strong>公</strong> 因子的数目。</p>\n\n<p>如果 <code>x</code> 可以同时整除 <code>a</code> 和 <code>b</code> ，则认为 <code>x</code> 是 <code>a</code> 和 <code>b</code> 的一个 <strong>公因子</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>a = 12, b = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>12 和 6 的公因子是 1、2、3、6 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>a = 25, b = 30\n<strong>输出：</strong>2\n<strong>解释：</strong>25 和 30 的公因子是 1、5 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= a, b &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2428.沙漏的最大总和",
        "hardRate": "MEDIUM",
        "passRate": "74.73%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-sum-of-an-hourglass/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-sum-of-an-hourglass/solution",
        "problemsDesc": "<p>给你一个大小为 <code>m x n</code> 的整数矩阵 <code>grid</code> 。</p>\n\n<p>按以下形式将矩阵的一部分定义为一个 <strong>沙漏</strong> ：</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/21/img.jpg\" style=\"width: 243px; height: 243px;\">\n<p>返回沙漏中元素的 <strong>最大</strong> 总和。</p>\n\n<p><strong>注意：</strong>沙漏无法旋转且必须整个包含在矩阵中。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/21/1.jpg\" style=\"width: 323px; height: 323px;\">\n<pre><strong>输入：</strong>grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]\n<strong>输出：</strong>30\n<strong>解释：</strong>上图中的单元格表示元素总和最大的沙漏：6 + 2 + 1 + 2 + 9 + 2 + 8 = 30 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/21/2.jpg\" style=\"width: 243px; height: 243px;\">\n<pre><strong>输入：</strong>grid = [[1,2,3],[4,5,6],[7,8,9]]\n<strong>输出：</strong>35\n<strong>解释：</strong>上图中的单元格表示元素总和最大的沙漏：1 + 2 + 3 + 5 + 7 + 8 + 9 = 35 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>3 &lt;= m, n &lt;= 150</code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2429.最小 XOR",
        "hardRate": "MEDIUM",
        "passRate": "44.46%",
        "problemsUrl": "https://leetcode.cn/problems/minimize-xor/",
        "solutionsUrl": "https://leetcode.cn/problems/minimize-xor/solution",
        "problemsDesc": "<p>给你两个正整数 <code>num1</code> 和 <code>num2</code> ，找出满足下述条件的整数 <code>x</code> ：</p>\n\n<ul>\n\t<li><code>x</code> 的置位数和 <code>num2</code> 相同，且</li>\n\t<li><code>x XOR num1</code> 的值 <strong>最小</strong></li>\n</ul>\n\n<p>注意 <code>XOR</code> 是按位异或运算。</p>\n\n<p>返回整数<em> </em><code>x</code> 。题目保证，对于生成的测试用例， <code>x</code> 是 <strong>唯一确定</strong> 的。</p>\n\n<p>整数的 <strong>置位数</strong> 是其二进制表示中 <code>1</code> 的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>num1 = 3, num2 = 5\n<strong>输出：</strong>3\n<strong>解释：</strong>\nnum1 和 num2 的二进制表示分别是 0011 和 0101 。\n整数 <strong>3</strong> 的置位数与 num2 相同，且 <code>3 XOR 3 = 0</code> 是最小的。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>num1 = 1, num2 = 12\n<strong>输出：</strong>3\n<strong>解释：</strong>\nnum1 和 num2 的二进制表示分别是 0001 和 1100 。\n整数 <strong>3</strong> 的置位数与 num2 相同，且 <code>3 XOR 1 = 2</code> 是最小的。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num1, num2 &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2430.对字母串可执行的最大删除数",
        "hardRate": "HARD",
        "passRate": "47.74%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-deletions-on-a-string/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-deletions-on-a-string/solution",
        "problemsDesc": "<p>给你一个仅由小写英文字母组成的字符串 <code>s</code> 。在一步操作中，你可以：</p>\n\n<ul>\n\t<li>删除 <strong>整个字符串</strong> <code>s</code> ，或者</li>\n\t<li>对于满足&nbsp;<code>1 &lt;= i &lt;= s.length / 2</code> 的任意 <code>i</code> ，如果 <code>s</code> 中的 <strong>前</strong> <code>i</code> 个字母和接下来的 <code>i</code> 个字母 <strong>相等</strong> ，删除 <strong>前</strong> <code>i</code> 个字母。</li>\n</ul>\n\n<p>例如，如果 <code>s = \"ababc\"</code> ，那么在一步操作中，你可以删除 <code>s</code> 的前两个字母得到 <code>\"abc\"</code> ，因为 <code>s</code> 的前两个字母和接下来的两个字母都等于 <code>\"ab\"</code> 。</p>\n\n<p>返回删除 <code>s</code> 所需的最大操作数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abcabcdabc\"\n<strong>输出：</strong>2\n<strong>解释：</strong>\n- 删除前 3 个字母（\"abc\"），因为它们和接下来 3 个字母相等。现在，s = \"abcdabc\"。\n- 删除全部字母。\n一共用了 2 步操作，所以返回 2 。可以证明 2 是所需的最大操作数。\n注意，在第二步操作中无法再次删除 \"abc\" ，因为 \"abc\" 的下一次出现并不是位于接下来的 3 个字母。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aaabaab\"\n<strong>输出：</strong>4\n<strong>解释：</strong>\n- 删除第一个字母（\"a\"），因为它和接下来的字母相等。现在，s = \"aabaab\"。\n- 删除前 3 个字母（\"aab\"），因为它们和接下来 3 个字母相等。现在，s = \"aab\"。 \n- 删除第一个字母（\"a\"），因为它和接下来的字母相等。现在，s = \"ab\"。\n- 删除全部字母。\n一共用了 4 步操作，所以返回 4 。可以证明 4 是所需的最大操作数。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"aaaaa\"\n<strong>输出：</strong>5\n<strong>解释：</strong>在每一步操作中，都可以仅删除 s 的第一个字母。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4000</code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2431.最大限度地提高购买水果的口味",
        "hardRate": "MEDIUM",
        "passRate": "58.45%",
        "problemsUrl": "https://leetcode.cn/problems/maximize-total-tastiness-of-purchased-fruits/",
        "solutionsUrl": "https://leetcode.cn/problems/maximize-total-tastiness-of-purchased-fruits/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2432.处理用时最长的那个任务的员工",
        "hardRate": "EASY",
        "passRate": "55.16%",
        "problemsUrl": "https://leetcode.cn/problems/the-employee-that-worked-on-the-longest-task/",
        "solutionsUrl": "https://leetcode.cn/problems/the-employee-that-worked-on-the-longest-task/solution",
        "problemsDesc": "<p>共有 <code>n</code> 位员工，每位员工都有一个从 <code>0</code> 到 <code>n - 1</code> 的唯一 id 。</p>\n\n<p>给你一个二维整数数组 <code>logs</code> ，其中 <code>logs[i] = [id<sub>i</sub>, leaveTime<sub>i</sub>]</code> ：</p>\n\n<ul>\n\t<li><code>id<sub>i</sub></code> 是处理第 <code>i</code> 个任务的员工的 id ，且</li>\n\t<li><code>leaveTime<sub>i</sub></code> 是员工完成第 <code>i</code> 个任务的时刻。所有 <code>leaveTime<sub>i</sub></code> 的值都是 <strong>唯一</strong> 的。</li>\n</ul>\n\n<p>注意，第 <code>i</code> 个任务在第 <code>(i - 1)</code> 个任务结束后立即开始，且第 <code>0</code> 个任务从时刻 <code>0</code> 开始。</p>\n\n<p>返回处理用时最长的那个任务的员工的 id 。如果存在两个或多个员工同时满足，则返回几人中 <strong>最小</strong> 的 id 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 10, logs = [[0,3],[2,5],[0,9],[1,15]]\n<strong>输出：</strong>1\n<strong>解释：</strong>\n任务 0 于时刻 0 开始，且在时刻 3 结束，共计 3 个单位时间。\n任务 1 于时刻 3 开始，且在时刻 5 结束，共计 2 个单位时间。\n任务 2 于时刻 5 开始，且在时刻 9 结束，共计 4 个单位时间。\n任务 3 于时刻 9 开始，且在时刻 15 结束，共计 6 个单位时间。\n时间最长的任务是任务 3 ，而 id 为 1 的员工是处理此任务的员工，所以返回 1 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 26, logs = [[1,1],[3,7],[2,12],[7,17]]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n任务 0 于时刻 0 开始，且在时刻 1 结束，共计 1 个单位时间。\n任务 1 于时刻 1 开始，且在时刻 7 结束，共计 6 个单位时间。\n任务 2 于时刻 7 开始，且在时刻 12 结束，共计 5 个单位时间。\n任务 3 于时刻 12 开始，且在时刻 17 结束，共计 5 个单位时间。\n时间最长的任务是任务 1 ，而 id 为 3 的员工是处理此任务的员工，所以返回 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>n = 2, logs = [[0,10],[1,20]]\n<strong>输出：</strong>0\n<strong>解释：</strong>\n任务 0 于时刻 0 开始，且在时刻 10 结束，共计 10 个单位时间。\n任务 1 于时刻 10 开始，且在时刻 20 结束，共计 10 个单位时间。\n时间最长的任务是任务 0 和 1 ，处理这两个任务的员工的 id 分别是 0 和 1 ，所以返回最小的 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 500</code></li>\n\t<li><code>1 &lt;= logs.length &lt;= 500</code></li>\n\t<li><code>logs[i].length == 2</code></li>\n\t<li><code>0 &lt;= id<sub>i</sub> &lt;= n - 1</code></li>\n\t<li><code>1 &lt;= leaveTime<sub>i</sub> &lt;= 500</code></li>\n\t<li><code>id<sub>i</sub> != id<sub>i + 1</sub></code></li>\n\t<li><code>leaveTime<sub>i</sub></code> 按严格递增顺序排列</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2433.找出前缀异或的原始数组",
        "hardRate": "MEDIUM",
        "passRate": "84.81%",
        "problemsUrl": "https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/",
        "solutionsUrl": "https://leetcode.cn/problems/find-the-original-array-of-prefix-xor/solution",
        "problemsDesc": "<p>给你一个长度为 <code>n</code> 的 <strong>整数</strong> 数组 <code>pref</code> 。找出并返回满足下述条件且长度为 <code>n</code> 的数组<em> </em><code>arr</code> ：</p>\n\n<ul>\n\t<li><code>pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i]</code>.</li>\n</ul>\n\n<p>注意 <code>^</code> 表示 <strong>按位异或</strong>（bitwise-xor）运算。</p>\n\n<p>可以证明答案是 <strong>唯一</strong> 的。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>pref = [5,2,0,3,1]\n<strong>输出：</strong>[5,7,2,3,2]\n<strong>解释：</strong>从数组 [5,7,2,3,2] 可以得到如下结果：\n- pref[0] = 5\n- pref[1] = 5 ^ 7 = 2\n- pref[2] = 5 ^ 7 ^ 2 = 0\n- pref[3] = 5 ^ 7 ^ 2 ^ 3 = 3\n- pref[4] = 5 ^ 7 ^ 2 ^ 3 ^ 2 = 1\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>pref = [13]\n<strong>输出：</strong>[13]\n<strong>解释：</strong>pref[0] = arr[0] = 13\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= pref.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= pref[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2434.使用机器人打印字典序最小的字符串",
        "hardRate": "MEDIUM",
        "passRate": "42.09%",
        "problemsUrl": "https://leetcode.cn/problems/using-a-robot-to-print-the-lexicographically-smallest-string/",
        "solutionsUrl": "https://leetcode.cn/problems/using-a-robot-to-print-the-lexicographically-smallest-string/solution",
        "problemsDesc": "<p>给你一个字符串&nbsp;<code>s</code>&nbsp;和一个机器人，机器人当前有一个空字符串&nbsp;<code>t</code>&nbsp;。执行以下操作之一，直到&nbsp;<code>s</code> 和&nbsp;<code>t</code>&nbsp;<strong>都变成空字符串：</strong></p>\n\n<ul>\n\t<li>删除字符串&nbsp;<code>s</code>&nbsp;的 <strong>第一个</strong>&nbsp;字符，并将该字符给机器人。机器人把这个字符添加到 <code>t</code>&nbsp;的尾部。</li>\n\t<li>删除字符串&nbsp;<code>t</code>&nbsp;的&nbsp;<strong>最后一个</strong>&nbsp;字符，并将该字符给机器人。机器人将该字符写到纸上。</li>\n</ul>\n\n<p>请你返回纸上能写出的字典序最小的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>s = \"zza\"\n<b>输出：</b>\"azz\"\n<b>解释：</b>用 p 表示写出来的字符串。\n一开始，p=\"\" ，s=\"zza\" ，t=\"\" 。\n执行第一个操作三次，得到 p=\"\" ，s=\"\" ，t=\"zza\" 。\n执行第二个操作三次，得到 p=\"azz\" ，s=\"\" ，t=\"\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>s = \"bac\"\n<b>输出：</b>\"abc\"\n<b>解释：</b>用 p 表示写出来的字符串。\n执行第一个操作两次，得到 p=\"\" ，s=\"c\" ，t=\"ba\" 。\n执行第二个操作两次，得到 p=\"ab\" ，s=\"c\" ，t=\"\" 。\n执行第一个操作，得到 p=\"ab\" ，s=\"\" ，t=\"c\" 。\n执行第二个操作，得到 p=\"abc\" ，s=\"\" ，t=\"\" 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>s = \"bdda\"\n<b>输出：</b>\"addb\"\n<b>解释：</b>用 p 表示写出来的字符串。\n一开始，p=\"\" ，s=\"bdda\" ，t=\"\" 。\n执行第一个操作四次，得到 p=\"\" ，s=\"\" ，t=\"bdda\" 。\n执行第二个操作四次，得到 p=\"addb\" ，s=\"\" ，t=\"\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>s</code>&nbsp;只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2435.矩阵中和能被 K 整除的路径",
        "hardRate": "HARD",
        "passRate": "51.45%",
        "problemsUrl": "https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/",
        "solutionsUrl": "https://leetcode.cn/problems/paths-in-matrix-whose-sum-is-divisible-by-k/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的&nbsp;<code>m x n</code>&nbsp;整数矩阵&nbsp;<code>grid</code>&nbsp;和一个整数&nbsp;<code>k</code>&nbsp;。你从起点&nbsp;<code>(0, 0)</code>&nbsp;出发，每一步只能往 <strong>下</strong>&nbsp;或者往 <strong>右</strong>&nbsp;，你想要到达终点&nbsp;<code>(m - 1, n - 1)</code>&nbsp;。</p>\n\n<p>请你返回路径和能被 <code>k</code>&nbsp;整除的路径数目，由于答案可能很大，返回答案对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;的结果。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2022/08/13/image-20220813183124-1.png\" style=\"width: 437px; height: 200px;\"></p>\n\n<pre><b>输入：</b>grid = [[5,2,4],[3,0,5],[0,7,2]], k = 3\n<b>输出：</b>2\n<b>解释：</b>有两条路径满足路径上元素的和能被 k 整除。\n第一条路径为上图中用红色标注的路径，和为 5 + 2 + 4 + 5 + 2 = 18 ，能被 3 整除。\n第二条路径为上图中用蓝色标注的路径，和为 5 + 3 + 0 + 5 + 2 = 15 ，能被 3 整除。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/17/image-20220817112930-3.png\" style=\"height: 85px; width: 132px;\">\n<pre><b>输入：</b>grid = [[0,0]], k = 5\n<b>输出：</b>1\n<b>解释：</b>红色标注的路径和为 0 + 0 = 0 ，能被 5 整除。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/08/12/image-20220812224605-3.png\" style=\"width: 257px; height: 200px;\">\n<pre><b>输入：</b>grid = [[7,3,4,9],[2,3,6,2],[2,3,7,0]], k = 1\n<b>输出：</b>10\n<b>解释：</b>每个数字都能被 1 整除，所以每一条路径的和都能被 k 整除。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= grid[i][j] &lt;= 100</code></li>\n\t<li><code>1 &lt;= k &lt;= 50</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2436.使子数组最大公约数大于一的最小分割数",
        "hardRate": "MEDIUM",
        "passRate": "77.09%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-split-into-subarrays-with-gcd-greater-than-one/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-split-into-subarrays-with-gcd-greater-than-one/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2437.有效时间的数目",
        "hardRate": "EASY",
        "passRate": "50.50%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-valid-clock-times/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-valid-clock-times/solution",
        "problemsDesc": "<p>给你一个长度为&nbsp;<code>5</code>&nbsp;的字符串&nbsp;<code>time</code>&nbsp;，表示一个电子时钟当前的时间，格式为&nbsp;<code>\"hh:mm\"</code>&nbsp;。<strong>最早</strong>&nbsp;可能的时间是&nbsp;<code>\"00:00\"</code>&nbsp;，<strong>最晚</strong>&nbsp;可能的时间是&nbsp;<code>\"23:59\"</code>&nbsp;。</p>\n\n<p>在字符串&nbsp;<code>time</code>&nbsp;中，被字符&nbsp;<code>?</code>&nbsp;替换掉的数位是 <strong>未知的</strong>&nbsp;，被替换的数字可能是&nbsp;<code>0</code>&nbsp;到&nbsp;<code>9</code>&nbsp;中的任何一个。</p>\n\n<p>请你返回一个整数<em>&nbsp;</em><code>answer</code>&nbsp;，将每一个 <code>?</code>&nbsp;都用<em>&nbsp;</em><code>0</code>&nbsp;到<em>&nbsp;</em><code>9</code>&nbsp;中一个数字替换后，可以得到的有效时间的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>time = \"?5:00\"\n<b>输出：</b>2\n<b>解释：</b>我们可以将 ? 替换成 0 或 1 ，得到 \"05:00\" 或者 \"15:00\" 。注意我们不能替换成 2 ，因为时间 \"25:00\" 是无效时间。所以我们有两个选择。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>time = \"0?:0?\"\n<b>输出：</b>100\n<b>解释：</b>两个 ? 都可以被 0 到 9 之间的任意数字替换，所以我们总共有 100 种选择。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>time = \"??:??\"\n<b>输出：</b>1440\n<b>解释：</b>小时总共有 24 种选择，分钟总共有 60 种选择。所以总共有 24 * 60 = 1440 种选择。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>time</code>&nbsp;是一个长度为 <code>5</code>&nbsp;的有效字符串，格式为&nbsp;<code>\"hh:mm\"</code>&nbsp;。</li>\n\t<li><code>\"00\" &lt;= hh &lt;= \"23\"</code></li>\n\t<li><code>\"00\" &lt;= mm &lt;= \"59\"</code></li>\n\t<li>字符串中有的数位是&nbsp;<code>'?'</code>&nbsp;，需要用&nbsp;<code>0</code>&nbsp;到&nbsp;<code>9</code>&nbsp;之间的数字替换。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2438.二的幂数组中查询范围内的乘积",
        "hardRate": "MEDIUM",
        "passRate": "41.21%",
        "problemsUrl": "https://leetcode.cn/problems/range-product-queries-of-powers/",
        "solutionsUrl": "https://leetcode.cn/problems/range-product-queries-of-powers/solution",
        "problemsDesc": "<p>给你一个正整数&nbsp;<code>n</code>&nbsp;，你需要找到一个下标从&nbsp;<strong>0</strong>&nbsp;开始的数组&nbsp;<code>powers</code>&nbsp;，它包含 <strong>最少</strong>&nbsp;数目的 <code>2</code>&nbsp;的幂，且它们的和为&nbsp;<code>n</code>&nbsp;。<code>powers</code>&nbsp;数组是&nbsp;<strong>非递减</strong>&nbsp;顺序的。根据前面描述，构造&nbsp;<code>powers</code>&nbsp;数组的方法是唯一的。</p>\n\n<p>同时给你一个下标从 <strong>0</strong>&nbsp;开始的二维整数数组&nbsp;<code>queries</code>&nbsp;，其中&nbsp;<code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code>&nbsp;，其中&nbsp;<code>queries[i]</code>&nbsp;表示请你求出满足&nbsp;<code>left<sub>i</sub> &lt;= j &lt;= right<sub>i</sub></code>&nbsp;的所有&nbsp;<code>powers[j]</code>&nbsp;的乘积。</p>\n\n<p>请你返回一个数组<em>&nbsp;</em><code>answers</code>&nbsp;，长度与<em>&nbsp;</em><code>queries</code>&nbsp;的长度相同，其中<em>&nbsp;</em><code>answers[i]</code>是第<em>&nbsp;</em><code>i</code>&nbsp;个查询的答案。由于查询的结果可能非常大，请你将每个&nbsp;<code>answers[i]</code>&nbsp;都对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>n = 15, queries = [[0,1],[2,2],[0,3]]\n<b>输出：</b>[2,4,64]\n<strong>解释：</strong>\n对于 n = 15 ，得到 powers = [1,2,4,8] 。没法得到元素数目更少的数组。\n第 1 个查询的答案：powers[0] * powers[1] = 1 * 2 = 2 。\n第 2 个查询的答案：powers[2] = 4 。\n第 3 个查询的答案：powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64 。\n每个答案对 10<sup>9</sup> + 7 得到的结果都相同，所以返回 [2,4,64] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>n = 2, queries = [[0,0]]\n<b>输出：</b>[2]\n<strong>解释：</strong>\n对于 n = 2, powers = [2] 。\n唯一一个查询的答案是 powers[0] = 2 。答案对 10<sup>9</sup> + 7 取余后结果相同，所以返回 [2] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= queries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt;= end<sub>i</sub> &lt; powers.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2439.最小化数组中的最大值",
        "hardRate": "MEDIUM",
        "passRate": "39.27%",
        "problemsUrl": "https://leetcode.cn/problems/minimize-maximum-of-array/",
        "solutionsUrl": "https://leetcode.cn/problems/minimize-maximum-of-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，它含有&nbsp;<code>n</code>&nbsp;个非负整数。</p>\n\n<p>每一步操作中，你需要：</p>\n\n<ul>\n\t<li>选择一个满足&nbsp;<code>1 &lt;= i &lt; n</code>&nbsp;的整数 <code>i</code>&nbsp;，且&nbsp;<code>nums[i] &gt; 0</code>&nbsp;。</li>\n\t<li>将&nbsp;<code>nums[i]</code>&nbsp;减 1 。</li>\n\t<li>将&nbsp;<code>nums[i - 1]</code>&nbsp;加 1 。</li>\n</ul>\n\n<p>你可以对数组执行 <strong>任意</strong>&nbsp;次上述操作，请你返回可以得到的 <code>nums</code>&nbsp;数组中<b>&nbsp;最大值</b>&nbsp;<strong>最小</strong> 为多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [3,7,1,6]\n<b>输出：</b>5\n<strong>解释：</strong>\n一串最优操作是：\n1. 选择 i = 1 ，nums 变为 [4,6,1,6] 。\n2. 选择 i = 3 ，nums 变为 [4,6,2,5] 。\n3. 选择 i = 1 ，nums 变为 [5,5,2,5] 。\nnums 中最大值为 5 。无法得到比 5 更小的最大值。\n所以我们返回 5 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [10,1]\n<b>输出：</b>10\n<strong>解释：</strong>\n最优解是不改动 nums ，10 是最大值，所以返回 10 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2440.创建价值相同的连通块",
        "hardRate": "HARD",
        "passRate": "61.49%",
        "problemsUrl": "https://leetcode.cn/problems/create-components-with-same-value/",
        "solutionsUrl": "https://leetcode.cn/problems/create-components-with-same-value/solution",
        "problemsDesc": "<p>有一棵&nbsp;<code>n</code>&nbsp;个节点的无向树，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;。</p>\n\n<p>给你一个长度为 <code>n</code>&nbsp;下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>nums</code>&nbsp;，其中&nbsp;<code>nums[i]</code>&nbsp;表示第&nbsp;<code>i</code>&nbsp;个节点的值。同时给你一个长度为 <code>n - 1</code>&nbsp;的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;表示节点&nbsp;<code>a<sub>i</sub></code>&nbsp;与&nbsp;<code>b<sub>i</sub></code>&nbsp;之间有一条边。</p>\n\n<p>你可以 <strong>删除</strong>&nbsp;一些边，将这棵树分成几个连通块。一个连通块的 <strong>价值</strong>&nbsp;定义为这个连通块中 <strong>所有</strong> 节点 <code>i</code>&nbsp;对应的 <code>nums[i]</code>&nbsp;之和。</p>\n\n<p>你需要删除一些边，删除后得到的各个连通块的价值都相等。请返回你可以删除的边数&nbsp;<strong>最多</strong>&nbsp;为多少。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/08/26/diagramdrawio.png\" style=\"width: 441px; height: 351px;\"></p>\n\n<pre><b>输入：</b>nums = [6,2,2,2,6], edges = [[0,1],[1,2],[1,3],[3,4]] \n<b>输出：</b>2 \n<b>解释：</b>上图展示了我们可以删除边 [0,1] 和 [3,4] 。得到的连通块为 [0] ，[1,2,3] 和 [4] 。每个连通块的价值都为 6 。可以证明没有别的更好的删除方案存在了，所以答案为 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [2], edges = []\n<b>输出：</b>0\n<b>解释：</b>没有任何边可以删除。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>nums.length == n</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= edges[i][0], edges[i][1] &lt;= n - 1</code></li>\n\t<li><code>edges</code>&nbsp;表示一棵合法的树。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2441.与对应负数同时存在的最大正整数",
        "hardRate": "EASY",
        "passRate": "72.55%",
        "problemsUrl": "https://leetcode.cn/problems/largest-positive-integer-that-exists-with-its-negative/",
        "solutionsUrl": "https://leetcode.cn/problems/largest-positive-integer-that-exists-with-its-negative/solution",
        "problemsDesc": "<p>给你一个 <strong>不包含</strong> 任何零的整数数组 <code>nums</code> ，找出自身与对应的负数都在数组中存在的最大正整数 <code>k</code> 。</p>\n\n<p>返回正整数<em> </em><code>k</code> ，如果不存在这样的整数，返回 <code>-1</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-1,2,-3,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>3 是数组中唯一一个满足题目要求的 k 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-1,10,6,7,-7,1]\n<strong>输出：</strong>7\n<strong>解释：</strong>数组中存在 1 和 7 对应的负数，7 的值更大。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-10,8,6,7,-2,-3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>不存在满足题目要求的 k ，返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>nums[i] != 0</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2442.反转之后不同整数的数目",
        "hardRate": "MEDIUM",
        "passRate": "75.15%",
        "problemsUrl": "https://leetcode.cn/problems/count-number-of-distinct-integers-after-reverse-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/count-number-of-distinct-integers-after-reverse-operations/solution",
        "problemsDesc": "<p>给你一个由 <strong>正</strong> 整数组成的数组 <code>nums</code> 。</p>\n\n<p>你必须取出数组中的每个整数，<strong>反转其中每个数位</strong>，并将反转后得到的数字添加到数组的末尾。这一操作只针对 <code>nums</code> 中原有的整数执行。</p>\n\n<p>返回结果数组中 <strong>不同</strong> 整数的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,13,10,12,31]\n<strong>输出：</strong>6\n<strong>解释：</strong>反转每个数字后，结果数组是 [1,13,10,12,31,<em><strong>1,31,1,21,13</strong></em>] 。\n反转后得到的数字添加到数组的末尾并按斜体加粗表示。注意对于整数 10 ，反转之后会变成 01 ，即 1 。\n数组中不同整数的数目为 6（数字 1、10、12、13、21 和 31）。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,2,2]\n<strong>输出：</strong>1\n<strong>解释：</strong>反转每个数字后，结果数组是 [2,2,2,<em><strong>2,2,2</strong></em>] 。\n数组中不同整数的数目为 1（数字 2）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2443.反转之后的数字和",
        "hardRate": "MEDIUM",
        "passRate": "46.48%",
        "problemsUrl": "https://leetcode.cn/problems/sum-of-number-and-its-reverse/",
        "solutionsUrl": "https://leetcode.cn/problems/sum-of-number-and-its-reverse/solution",
        "problemsDesc": "<p>给你一个 <strong>非负</strong> 整数 <code>num</code> 。如果存在某个 <strong>非负</strong> 整数 <code>k</code> 满足 <code>k + reverse(k) = num</code>&nbsp; ，则返回 <code>true</code> ；否则，返回<em> </em><code>false</code> 。</p>\n\n<p><code>reverse(k)</code> 表示 <code>k</code> 反转每个数位后得到的数字。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 443\n<strong>输出：</strong>true\n<strong>解释：</strong>172 + 271 = 443 ，所以返回 true 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 63\n<strong>输出：</strong>false\n<strong>解释：</strong>63 不能表示为非负整数及其反转后数字之和，返回 false 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>num = 181\n<strong>输出：</strong>true\n<strong>解释：</strong>140 + 041 = 181 ，所以返回 true 。注意，反转后的数字可能包含前导零。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= num &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2444.统计定界子数组的数目",
        "hardRate": "HARD",
        "passRate": "44.49%",
        "problemsUrl": "https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/",
        "solutionsUrl": "https://leetcode.cn/problems/count-subarrays-with-fixed-bounds/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> 和两个整数 <code>minK</code> 以及 <code>maxK</code> 。</p>\n\n<p><code>nums</code> 的定界子数组是满足下述条件的一个子数组：</p>\n\n<ul>\n\t<li>子数组中的 <strong>最小值</strong> 等于 <code>minK</code> 。</li>\n\t<li>子数组中的 <strong>最大值</strong> 等于 <code>maxK</code> 。</li>\n</ul>\n\n<p>返回定界子数组的数目。</p>\n\n<p>子数组是数组中的一个连续部分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,3,5,2,7,5], minK = 1, maxK = 5\n<strong>输出：</strong>2\n<strong>解释：</strong>定界子数组是 [1,3,5] 和 [1,3,5,2] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,1,1,1], minK = 1, maxK = 1\n<strong>输出：</strong>10\n<strong>解释：</strong>nums 的每个子数组都是一个定界子数组。共有 10 个子数组。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], minK, maxK &lt;= 10<sup>6</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2445.值为 1 的节点数",
        "hardRate": "MEDIUM",
        "passRate": "78.40%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-nodes-with-value-one/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-nodes-with-value-one/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2446.判断两个事件是否存在冲突",
        "hardRate": "EASY",
        "passRate": "63.55%",
        "problemsUrl": "https://leetcode.cn/problems/determine-if-two-events-have-conflict/",
        "solutionsUrl": "https://leetcode.cn/problems/determine-if-two-events-have-conflict/solution",
        "problemsDesc": "<p>给你两个字符串数组 <code>event1</code> 和&nbsp;<code>event2</code>&nbsp;，表示发生在同一天的两个闭区间时间段事件，其中：</p>\n\n<ul>\n\t<li><code>event1 = [startTime<sub>1</sub>, endTime<sub>1</sub>]</code> 且</li>\n\t<li><code>event2 = [startTime<sub>2</sub>, endTime<sub>2</sub>]</code></li>\n</ul>\n\n<p>事件的时间为有效的 24 小时制且按&nbsp;<code>HH:MM</code>&nbsp;格式给出。</p>\n\n<p>当两个事件存在某个非空的交集时（即，某些时刻是两个事件都包含的），则认为出现 <strong>冲突</strong>&nbsp;。</p>\n\n<p>如果两个事件之间存在冲突，返回&nbsp;<code>true</code><em>&nbsp;</em>；否则，返回<em>&nbsp;</em><code>false</code> 。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<pre>\n<b>输入：</b>event1 = [\"01:15\",\"02:00\"], event2 = [\"02:00\",\"03:00\"]\n<b>输出：</b>true\n<b>解释：</b>两个事件在 2:00 出现交集。\n</pre>\n\n<p><b>示例 2：</b></p>\n\n<pre>\n<b>输入：</b>event1 = [\"01:00\",\"02:00\"], event2 = [\"01:20\",\"03:00\"]\n<b>输出：</b>true\n<b>解释：</b>两个事件的交集从 01:20 开始，到 02:00 结束。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>event1 = [\"10:00\",\"11:00\"], event2 = [\"14:00\",\"15:00\"]\n<b>输出：</b>false\n<b>解释：</b>两个事件不存在交集。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>event1.length == event2.length == 2.</code></li>\n\t<li><code>event1[i].length == event2[i].length == 5</code></li>\n\t<li><code>startTime<sub>1</sub> &lt;= endTime<sub>1</sub></code></li>\n\t<li><code>startTime<sub>2</sub> &lt;= endTime<sub>2</sub></code></li>\n\t<li>所有事件的时间都按照&nbsp;<code>HH:MM</code>&nbsp;格式给出</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2447.最大公因数等于 K 的子数组数目",
        "hardRate": "MEDIUM",
        "passRate": "41.27%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-gcd-equal-to-k/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-gcd-equal-to-k/solution",
        "problemsDesc": "<p>给你一个整数数组&nbsp;<code>nums</code>&nbsp;和一个整数&nbsp;<code>k</code> ，请你统计并返回 <code>nums</code>&nbsp;的子数组中元素的最大公因数等于 <code>k</code>&nbsp;的子数组数目。</p>\n\n<p><strong>子数组</strong> 是数组中一个连续的非空序列。</p>\n\n<p><strong>数组的最大公因数</strong>&nbsp;是能整除数组中所有元素的最大整数。</p>\n\n<p>&nbsp;</p>\n\n<p><b>示例 1：</b></p>\n\n<pre><b>输入：</b>nums = [9,3,1,2,6,3], k = 3\n<b>输出：</b>4\n<b>解释：</b>nums 的子数组中，以 3 作为最大公因数的子数组如下：\n- [9,<strong><em>3</em></strong>,1,2,6,3]\n- [9,3,1,2,6,<em><strong>3</strong></em>]\n- [<strong><em>9,3</em></strong>,1,2,6,3]\n- [9,3,1,2,<em><strong>6,3</strong></em>]\n</pre>\n\n<p><b>示例 2：</b></p>\n\n<pre><b>输入：</b>nums = [4], k = 7\n<b>输出：</b>0\n<b>解释：</b>不存在以 7 作为最大公因数的子数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><b>提示：</b></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2448.使数组相等的最小开销",
        "hardRate": "HARD",
        "passRate": "36.10%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-to-make-array-equal/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-to-make-array-equal/solution",
        "problemsDesc": "<p>给你两个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums</code> 和&nbsp;<code>cost</code>&nbsp;，分别包含&nbsp;<code>n</code>&nbsp;个&nbsp;<strong>正</strong>&nbsp;整数。</p>\n\n<p>你可以执行下面操作 <strong>任意</strong>&nbsp;次：</p>\n\n<ul>\n\t<li>将&nbsp;<code>nums</code>&nbsp;中 <strong>任意</strong>&nbsp;元素增加或者减小 <code>1</code>&nbsp;。</li>\n</ul>\n\n<p>对第 <code>i</code>&nbsp;个元素执行一次操作的开销是&nbsp;<code>cost[i]</code>&nbsp;。</p>\n\n<p>请你返回使 <code>nums</code>&nbsp;中所有元素 <strong>相等</strong>&nbsp;的 <strong>最少</strong>&nbsp;总开销。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,3,5,2], cost = [2,3,1,14]\n<b>输出：</b>8\n<b>解释：</b>我们可以执行以下操作使所有元素变为 2 ：\n- 增加第 0 个元素 1 次，开销为 2 。\n- 减小第 1 个元素 1 次，开销为 3 。\n- 减小第 2 个元素 3 次，开销为 1 + 1 + 1 = 3 。\n总开销为 2 + 3 + 3 = 8 。\n这是最小开销。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,2,2,2,2], cost = [4,2,8,1,3]\n<b>输出：</b>0\n<b>解释：</b>数组中所有元素已经全部相等，不需要执行额外的操作。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == cost.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], cost[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>测试用例确保输出不超过 2<sup>53</sup>-1。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2449.使数组相似的最少操作次数",
        "hardRate": "HARD",
        "passRate": "65.45%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-make-arrays-similar/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-make-arrays-similar/solution",
        "problemsDesc": "<p>给你两个正整数数组&nbsp;<code>nums</code> 和&nbsp;<code>target</code>&nbsp;，两个数组长度相等。</p>\n\n<p>在一次操作中，你可以选择两个 <strong>不同</strong>&nbsp;的下标&nbsp;<code>i</code> 和&nbsp;<code>j</code>&nbsp;，其中&nbsp;<code>0 &lt;= i, j &lt; nums.length</code>&nbsp;，并且：</p>\n\n<ul>\n\t<li>令&nbsp;<code>nums[i] = nums[i] + 2</code>&nbsp;且</li>\n\t<li>令&nbsp;<code>nums[j] = nums[j] - 2</code>&nbsp;。</li>\n</ul>\n\n<p>如果两个数组中每个元素出现的频率相等，我们称两个数组是 <strong>相似</strong>&nbsp;的。</p>\n\n<p>请你返回将 <code>nums</code>&nbsp;变得与 <code>target</code>&nbsp;相似的最少操作次数。测试数据保证 <code>nums</code>&nbsp;一定能变得与 <code>target</code>&nbsp;相似。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [8,12,6], target = [2,14,10]\n<b>输出：</b>2\n<b>解释：</b>可以用两步操作将 nums 变得与 target 相似：\n- 选择 i = 0 和 j = 2 ，nums = [10,12,4] 。\n- 选择 i = 1 和 j = 2 ，nums = [10,14,2] 。\n2 次操作是最少需要的操作次数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,2,5], target = [4,1,3]\n<b>输出：</b>1\n<b>解释：</b>一步操作可以使 nums 变得与 target 相似：\n- 选择 i = 1 和 j = 2 ，nums = [1,4,3] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [1,1,1,1,1], target = [1,1,1,1,1]\n<b>输出：</b>0\n<b>解释：</b>数组 nums 已经与 target 相似。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == target.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], target[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>nums</code>&nbsp;一定可以变得与&nbsp;<code>target</code> 相似。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2450.应用操作后不同二进制字符串的数量",
        "hardRate": "MEDIUM",
        "passRate": "74.77%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-distinct-binary-strings-after-applying-operations/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-distinct-binary-strings-after-applying-operations/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2451.差值数组不同的字符串",
        "hardRate": "EASY",
        "passRate": "66.30%",
        "problemsUrl": "https://leetcode.cn/problems/odd-string-difference/",
        "solutionsUrl": "https://leetcode.cn/problems/odd-string-difference/solution",
        "problemsDesc": "<p>给你一个字符串数组 <code>words</code>&nbsp;，每一个字符串长度都相同，令所有字符串的长度都为 <code>n</code>&nbsp;。</p>\n\n<p>每个字符串&nbsp;<code>words[i]</code>&nbsp;可以被转化为一个长度为&nbsp;<code>n - 1</code>&nbsp;的&nbsp;<strong>差值整数数组</strong>&nbsp;<code>difference[i]</code>&nbsp;，其中对于&nbsp;<code>0 &lt;= j &lt;= n - 2</code>&nbsp;有&nbsp;<code>difference[i][j] = words[i][j+1] - words[i][j]</code>&nbsp;。注意两个字母的差值定义为它们在字母表中&nbsp;<strong>位置</strong>&nbsp;之差，也就是说&nbsp;<code>'a'</code>&nbsp;的位置是&nbsp;<code>0</code>&nbsp;，<code>'b'</code>&nbsp;的位置是&nbsp;<code>1</code>&nbsp;，<code>'z'</code>&nbsp;的位置是&nbsp;<code>25</code>&nbsp;。</p>\n\n<ul>\n\t<li>比方说，字符串&nbsp;<code>\"acb\"</code>&nbsp;的差值整数数组是&nbsp;<code>[2 - 0, 1 - 2] = [2, -1]</code>&nbsp;。</li>\n</ul>\n\n<p><code>words</code>&nbsp;中所有字符串 <strong>除了一个字符串以外</strong>&nbsp;，其他字符串的差值整数数组都相同。你需要找到那个不同的字符串。</p>\n\n<p>请你返回<em>&nbsp;</em><code>words</code>中&nbsp;<strong>差值整数数组</strong>&nbsp;不同的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>words = [\"adc\",\"wzy\",\"abc\"]\n<b>输出：</b>\"abc\"\n<b>解释：</b>\n- \"adc\" 的差值整数数组是 [3 - 0, 2 - 3] = [3, -1] 。\n- \"wzy\" 的差值整数数组是 [25 - 22, 24 - 25]= [3, -1] 。\n- \"abc\" 的差值整数数组是 [1 - 0, 2 - 1] = [1, 1] 。\n不同的数组是 [1, 1]，所以返回对应的字符串，\"abc\"。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<b>输入：</b>words = [\"aaa\",\"bob\",\"ccc\",\"ddd\"]\n<b>输出：</b>\"bob\"\n<b>解释：</b>除了 \"bob\" 的差值整数数组是 [13, -13] 以外，其他字符串的差值整数数组都是 [0, 0] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= words.length &lt;= 100</code></li>\n\t<li><code>n == words[i].length</code></li>\n\t<li><code>2 &lt;= n &lt;= 20</code></li>\n\t<li><code>words[i]</code>&nbsp;只含有小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2452.距离字典两次编辑以内的单词",
        "hardRate": "MEDIUM",
        "passRate": "64.99%",
        "problemsUrl": "https://leetcode.cn/problems/words-within-two-edits-of-dictionary/",
        "solutionsUrl": "https://leetcode.cn/problems/words-within-two-edits-of-dictionary/solution",
        "problemsDesc": "<p>给你两个字符串数组&nbsp;<code>queries</code> 和&nbsp;<code>dictionary</code>&nbsp;。数组中所有单词都只包含小写英文字母，且长度都相同。</p>\n\n<p>一次 <strong>编辑</strong>&nbsp;中，你可以从 <code>queries</code>&nbsp;中选择一个单词，将任意一个字母修改成任何其他字母。从&nbsp;<code>queries</code>&nbsp;中找到所有满足以下条件的字符串：<strong>不超过</strong>&nbsp;两次编辑内，字符串与&nbsp;<code>dictionary</code>&nbsp;中某个字符串相同。</p>\n\n<p>请你返回<em>&nbsp;</em><code>queries</code>&nbsp;中的单词列表，这些单词距离&nbsp;<code>dictionary</code>&nbsp;中的单词&nbsp;<strong>编辑次数</strong>&nbsp;不超过&nbsp;<strong>两次</strong>&nbsp;。单词返回的顺序需要与&nbsp;<code>queries</code>&nbsp;中原本顺序相同。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>queries = [\"word\",\"note\",\"ants\",\"wood\"], dictionary = [\"wood\",\"joke\",\"moat\"]\n<b>输出：</b>[\"word\",\"note\",\"wood\"]\n<strong>解释：</strong>\n- 将 \"word\" 中的 'r' 换成 'o' ，得到 dictionary 中的单词 \"wood\" 。\n- 将 \"note\" 中的 'n' 换成 'j' 且将 't' 换成 'k' ，得到 \"joke\" 。\n- \"ants\" 需要超过 2 次编辑才能得到 dictionary 中的单词。\n- \"wood\" 不需要修改（0 次编辑），就得到 dictionary 中相同的单词。\n所以我们返回 [\"word\",\"note\",\"wood\"] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>queries = [\"yes\"], dictionary = [\"not\"]\n<b>输出：</b>[]\n<strong>解释：</strong>\n\"yes\" 需要超过 2 次编辑才能得到 \"not\" 。\n所以我们返回空数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= queries.length, dictionary.length &lt;= 100</code></li>\n\t<li><code>n == queries[i].length == dictionary[j].length</code></li>\n\t<li><code>1 &lt;= n &lt;= 100</code></li>\n\t<li>所有&nbsp;<code>queries[i]</code> 和&nbsp;<code>dictionary[j]</code>&nbsp;都只包含小写英文字母。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2453.摧毁一系列目标",
        "hardRate": "MEDIUM",
        "passRate": "35.46%",
        "problemsUrl": "https://leetcode.cn/problems/destroy-sequential-targets/",
        "solutionsUrl": "https://leetcode.cn/problems/destroy-sequential-targets/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的数组&nbsp;<code>nums</code>&nbsp;，它包含若干正整数，表示数轴上你需要摧毁的目标所在的位置。同时给你一个整数&nbsp;<code>space</code>&nbsp;。</p>\n\n<p>你有一台机器可以摧毁目标。给机器 <strong>输入</strong>&nbsp;<code>nums[i]</code>&nbsp;，这台机器会摧毁所有位置在&nbsp;<code>nums[i] + c * space</code>&nbsp;的目标，其中&nbsp;<code>c</code>&nbsp;是任意非负整数。你想摧毁&nbsp;<code>nums</code>&nbsp;中 <strong>尽可能多</strong>&nbsp;的目标。</p>\n\n<p>请你返回在摧毁数目最多的前提下，<code>nums[i]</code>&nbsp;的 <strong>最小值</strong>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [3,7,8,1,1,5], space = 2\n<b>输出：</b>1\n<b>解释：</b>如果我们输入 nums[3] ，我们可以摧毁位于 1,3,5,7,9,... 这些位置的目标。\n这种情况下， 我们总共可以摧毁 5 个目标（除了 nums[2]）。\n没有办法摧毁多于 5 个目标，所以我们返回 nums[3] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,3,5,2,4,6], space = 2\n<b>输出：</b>1\n<b>解释：</b>输入 nums[0] 或者 nums[3] 都会摧毁 3 个目标。\n没有办法摧毁多于 3 个目标。\n由于 nums[0] 是最小的可以摧毁 3 个目标的整数，所以我们返回 1 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><b>输入：</b>nums = [6,2,5], space = 100\n<b>输出：</b>2\n<b>解释：</b>无论我们输入哪个数字，都只能摧毁 1 个目标。输入的最小整数是 nums[1] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>1 &lt;= space &lt;=&nbsp;10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2454.下一个更大元素 IV",
        "hardRate": "HARD",
        "passRate": "48.94%",
        "problemsUrl": "https://leetcode.cn/problems/next-greater-element-iv/",
        "solutionsUrl": "https://leetcode.cn/problems/next-greater-element-iv/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的非负整数数组&nbsp;<code>nums</code>&nbsp;。对于&nbsp;<code>nums</code>&nbsp;中每一个整数，你必须找到对应元素的&nbsp;<strong>第二大</strong>&nbsp;整数。</p>\n\n<p>如果&nbsp;<code>nums[j]</code>&nbsp;满足以下条件，那么我们称它为&nbsp;<code>nums[i]</code>&nbsp;的&nbsp;<strong>第二大</strong>&nbsp;整数：</p>\n\n<ul>\n\t<li><code>j &gt; i</code></li>\n\t<li><code>nums[j] &gt; nums[i]</code></li>\n\t<li>恰好存在 <strong>一个</strong>&nbsp;<code>k</code>&nbsp;满足 <code>i &lt; k &lt; j</code>&nbsp;且&nbsp;<code>nums[k] &gt; nums[i]</code>&nbsp;。</li>\n</ul>\n\n<p>如果不存在&nbsp;<code>nums[j]</code>&nbsp;，那么第二大整数为&nbsp;<code>-1</code>&nbsp;。</p>\n\n<ul>\n\t<li>比方说，数组&nbsp;<code>[1, 2, 4, 3]</code>&nbsp;中，<code>1</code>&nbsp;的第二大整数是&nbsp;<code>4</code>&nbsp;，<code>2</code>&nbsp;的第二大整数是&nbsp;<code>3</code>&nbsp;，<code>3</code> 和&nbsp;<code>4</code>&nbsp;的第二大整数是&nbsp;<code>-1</code>&nbsp;。</li>\n</ul>\n\n<p>请你返回一个整数数组<em>&nbsp;</em><code>answer</code>&nbsp;，其中<em>&nbsp;</em><code>answer[i]</code>是<em>&nbsp;</em><code>nums[i]</code>&nbsp;的第二大整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<b>输入：</b>nums = [2,4,0,9,6]\n<b>输出：</b>[9,6,6,-1,-1]\n<strong>解释：</strong>\n下标为 0 处：2 的右边，4 是大于 2 的第一个整数，9 是第二个大于 2 的整数。\n下标为 1 处：4 的右边，9 是大于 4 的第一个整数，6 是第二个大于 4 的整数。\n下标为 2 处：0 的右边，9 是大于 0 的第一个整数，6 是第二个大于 0 的整数。\n下标为 3 处：右边不存在大于 9 的整数，所以第二大整数为 -1 。\n下标为 4 处：右边不存在大于 6 的整数，所以第二大整数为 -1 。\n所以我们返回 [9,6,6,-1,-1] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,3]\n<b>输出：</b>[-1,-1]\n<strong>解释：</strong>\n由于每个数右边都没有更大的数，所以我们返回 [-1,-1] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2455.可被三整除的偶数的平均值",
        "hardRate": "EASY",
        "passRate": "63.52%",
        "problemsUrl": "https://leetcode.cn/problems/average-value-of-even-numbers-that-are-divisible-by-three/",
        "solutionsUrl": "https://leetcode.cn/problems/average-value-of-even-numbers-that-are-divisible-by-three/solution",
        "problemsDesc": "<p>给你一个由正整数组成的整数数组 <code>nums</code> ，返回其中可被 <code>3</code> 整除的所有偶数的平均值。</p>\n\n<p>注意：<code>n</code> 个元素的平均值等于 <code>n</code> 个元素 <strong>求和</strong> 再除以 <code>n</code> ，结果 <strong>向下取整</strong> 到最接近的整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,3,6,10,12,15]\n<strong>输出：</strong>9\n<strong>解释：</strong>6 和 12 是可以被 3 整除的偶数。(6 + 12) / 2 = 9 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,4,7,10]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在满足题目要求的整数，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2456.最流行的视频创作者",
        "hardRate": "MEDIUM",
        "passRate": "38.54%",
        "problemsUrl": "https://leetcode.cn/problems/most-popular-video-creator/",
        "solutionsUrl": "https://leetcode.cn/problems/most-popular-video-creator/solution",
        "problemsDesc": "<p>给你两个字符串数组 <code>creators</code> 和 <code>ids</code> ，和一个整数数组 <code>views</code> ，所有数组的长度都是 <code>n</code> 。平台上第 <code>i</code> 个视频者是&nbsp;<code>creator[i]</code> ，视频分配的 id 是 <code>ids[i]</code> ，且播放量为 <code>views[i]</code> 。</p>\n\n<p>视频创作者的 <strong>流行度</strong> 是该创作者的 <strong>所有</strong> 视频的播放量的 <strong>总和</strong> 。请找出流行度 <strong>最高</strong> 创作者以及该创作者播放量 <strong>最大</strong> 的视频的 id 。</p>\n\n<ul>\n\t<li>如果存在多个创作者流行度都最高，则需要找出所有符合条件的创作者。</li>\n\t<li>如果某个创作者存在多个播放量最高的视频，则只需要找出字典序最小的 <code>id</code> 。</li>\n</ul>\n\n<p>返回一个二维字符串数组<em> </em><code>answer</code><em> </em>，其中<em> </em><code>answer[i] = [creator<sub>i</sub>, id<sub>i</sub>]</code><em> </em>表示<em> </em><code>creator<sub>i</sub></code> 的流行度 <strong>最高</strong> 且其最流行的视频 id 是<em> </em><code>id<sub>i</sub></code><em> </em>，可以按任何顺序返回该结果<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>creators = [\"alice\",\"bob\",\"alice\",\"chris\"], ids = [\"one\",\"two\",\"three\",\"four\"], views = [5,10,5,4]\n<strong>输出：</strong>[[\"alice\",\"one\"],[\"bob\",\"two\"]]\n<strong>解释：</strong>\nalice 的流行度是 5 + 5 = 10 。\nbob 的流行度是 10 。\nchris 的流行度是 4 。\nalice 和 bob 是流行度最高的创作者。\nbob 播放量最高的视频 id 为 \"two\" 。\nalice 播放量最高的视频 id 是 \"one\" 和 \"three\" 。由于 \"one\" 的字典序比 \"three\" 更小，所以结果中返回的 id 是 \"one\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>creators = [\"alice\",\"alice\",\"alice\"], ids = [\"a\",\"b\",\"c\"], views = [1,2,2]\n<strong>输出：</strong>[[\"alice\",\"b\"]]\n<strong>解释：</strong>\nid 为 \"b\" 和 \"c\" 的视频都满足播放量最高的条件。\n由于 \"b\" 的字典序比 \"c\" 更小，所以结果中返回的 id 是 \"b\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>n == creators.length == ids.length == views.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= creators[i].length, ids[i].length &lt;= 5</code></li>\n\t<li><code>creators[i]</code> 和 <code>ids[i]</code> 仅由小写英文字母组成</li>\n\t<li><code>0 &lt;= views[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2457.美丽整数的最小增量",
        "hardRate": "MEDIUM",
        "passRate": "39.43%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-addition-to-make-integer-beautiful/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-addition-to-make-integer-beautiful/solution",
        "problemsDesc": "<p>给你两个正整数 <code>n</code> 和 <code>target</code> 。</p>\n\n<p>如果某个整数每一位上的数字相加小于或等于 <code>target</code> ，则认为这个整数是一个 <strong>美丽整数</strong> 。</p>\n\n<p>找出并返回满足 <code>n + x</code> 是 <strong>美丽整数</strong> 的最小非负整数 <code>x</code> 。生成的输入保证总可以使 <code>n</code> 变成一个美丽整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>n = 16, target = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>最初，n 是 16 ，且其每一位数字的和是 1 + 6 = 7 。在加 4 之后，n 变为 20 且每一位数字的和变成 2 + 0 = 2 。可以证明无法加上一个小于 4 的非负整数使 n 变成一个美丽整数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>n = 467, target = 6\n<strong>输出：</strong>33\n<strong>解释：</strong>最初，n 是 467 ，且其每一位数字的和是 4 + 6 + 7 = 17 。在加 33 之后，n 变为 500 且每一位数字的和变成 5 + 0 + 0 = 5 。可以证明无法加上一个小于 33 的非负整数使 n 变成一个美丽整数。</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>n = 1, target = 1\n<strong>输出：</strong>0\n<strong>解释：</strong>最初，n 是 1 ，且其每一位数字的和是 1 ，已经小于等于 target 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= 10<sup>12</sup></code></li>\n\t<li><code>1 &lt;= target &lt;= 150</code></li>\n\t<li>生成的输入保证总可以使 <code>n</code> 变成一个美丽整数。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2458.移除子树后的二叉树高度",
        "hardRate": "HARD",
        "passRate": "41.09%",
        "problemsUrl": "https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/",
        "solutionsUrl": "https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/solution",
        "problemsDesc": "<p>给你一棵 <strong>二叉树</strong> 的根节点 <code>root</code> ，树中有 <code>n</code> 个节点。每个节点都可以被分配一个从 <code>1</code> 到 <code>n</code> 且互不相同的值。另给你一个长度为 <code>m</code> 的数组 <code>queries</code> 。</p>\n\n<p>你必须在树上执行 <code>m</code> 个 <strong>独立</strong> 的查询，其中第 <code>i</code> 个查询你需要执行以下操作：</p>\n\n<ul>\n\t<li>从树中 <strong>移除</strong> 以 <code>queries[i]</code> 的值作为根节点的子树。题目所用测试用例保证 <code>queries[i]</code> <strong>不</strong> 等于根节点的值。</li>\n</ul>\n\n<p>返回一个长度为 <code>m</code> 的数组<em> </em><code>answer</code><em> </em>，其中<em> </em><code>answer[i]</code><em> </em>是执行第 <code>i</code> 个查询后树的高度。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>查询之间是独立的，所以在每个查询执行后，树会回到其 <strong>初始</strong> 状态。</li>\n\t<li>树的高度是从根到树中某个节点的 <strong>最长简单路径中的边数</strong> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-1.png\" style=\"width: 495px; height: 281px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [1,3,4,2,null,6,5,null,null,null,null,null,7], queries = [4]\n<strong>输出：</strong>[2]\n<strong>解释：</strong>上图展示了从树中移除以 4 为根节点的子树。\n树的高度是 2（路径为 1 -&gt; 3 -&gt; 2）。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/09/07/binaryytreeedrawio-2.png\" style=\"width: 301px; height: 284px;\" /></p>\n\n<pre>\n<strong>输入：</strong>root = [5,8,9,2,1,3,7,4,6], queries = [3,2,4,8]\n<strong>输出：</strong>[3,2,3,2]\n<strong>解释：</strong>执行下述查询：\n- 移除以 3 为根节点的子树。树的高度变为 3（路径为 5 -&gt; 8 -&gt; 2 -&gt; 4）。\n- 移除以 2 为根节点的子树。树的高度变为 2（路径为 5 -&gt; 8 -&gt; 1）。\n- 移除以 4 为根节点的子树。树的高度变为 3（路径为 5 -&gt; 8 -&gt; 2 -&gt; 6）。\n- 移除以 8 为根节点的子树。树的高度变为 2（路径为 5 -&gt; 9 -&gt; 3）。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数目是 <code>n</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= Node.val &lt;= n</code></li>\n\t<li>树中的所有值 <strong>互不相同</strong></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= m &lt;= min(n, 10<sup>4</sup>)</code></li>\n\t<li><code>1 &lt;= queries[i] &lt;= n</code></li>\n\t<li><code>queries[i] != root.val</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2459.通过移动项目到空白区域来排序数组",
        "hardRate": "HARD",
        "passRate": "59.50%",
        "problemsUrl": "https://leetcode.cn/problems/sort-array-by-moving-items-to-empty-space/",
        "solutionsUrl": "https://leetcode.cn/problems/sort-array-by-moving-items-to-empty-space/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2460.对数组执行操作",
        "hardRate": "EASY",
        "passRate": "68.18%",
        "problemsUrl": "https://leetcode.cn/problems/apply-operations-to-an-array/",
        "solutionsUrl": "https://leetcode.cn/problems/apply-operations-to-an-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的数组 <code>nums</code> ，数组大小为 <code>n</code> ，且由 <strong>非负</strong> 整数组成。</p>\n\n<p>你需要对数组执行 <code>n - 1</code> 步操作，其中第 <code>i</code> 步操作（从 <strong>0</strong> 开始计数）要求对 <code>nums</code> 中第 <code>i</code> 个元素执行下述指令：</p>\n\n<ul>\n\t<li>如果 <code>nums[i] == nums[i + 1]</code> ，则 <code>nums[i]</code> 的值变成原来的 <code>2</code> 倍，<code>nums[i + 1]</code> 的值变成 <code>0</code> 。否则，跳过这步操作。</li>\n</ul>\n\n<p>在执行完 <strong>全部</strong> 操作后，将所有 <code>0</code> <strong>移动</strong> 到数组的 <strong>末尾</strong> 。</p>\n\n<ul>\n\t<li>例如，数组 <code>[1,0,2,0,0,1]</code> 将所有 <code>0</code> 移动到末尾后变为 <code>[1,2,1,0,0,0]</code> 。</li>\n</ul>\n\n<p>返回结果数组。</p>\n\n<p><strong>注意</strong> 操作应当 <strong>依次有序</strong> 执行，而不是一次性全部执行。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,2,1,1,0]\n<strong>输出：</strong>[1,4,2,0,0,0]\n<strong>解释：</strong>执行以下操作：\n- i = 0: nums[0] 和 nums[1] 不相等，跳过这步操作。\n- i = 1: nums[1] 和 nums[2] 相等，nums[1] 的值变成原来的 2 倍，nums[2] 的值变成 0 。数组变成 [1,<em><strong>4</strong></em>,<em><strong>0</strong></em>,1,1,0] 。\n- i = 2: nums[2] 和 nums[3] 不相等，所以跳过这步操作。\n- i = 3: nums[3] 和 nums[4] 相等，nums[3] 的值变成原来的 2 倍，nums[4] 的值变成 0 。数组变成 [1,4,0,<em><strong>2</strong></em>,<em><strong>0</strong></em>,0] 。\n- i = 4: nums[4] 和 nums[5] 相等，nums[4] 的值变成原来的 2 倍，nums[5] 的值变成 0 。数组变成 [1,4,0,2,<em><strong>0</strong></em>,<em><strong>0</strong></em>] 。\n执行完所有操作后，将 0 全部移动到数组末尾，得到结果数组 [1,4,2,0,0,0] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [0,1]\n<strong>输出：</strong>[1,0]\n<strong>解释：</strong>无法执行任何操作，只需要将 0 移动到末尾。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2461.长度为 K 子数组中的最大和",
        "hardRate": "MEDIUM",
        "passRate": "30.65%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-sum-of-distinct-subarrays-with-length-k/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。请你从 <code>nums</code> 中满足下述条件的全部子数组中找出最大子数组和：</p>\n\n<ul>\n\t<li>子数组的长度是 <code>k</code>，且</li>\n\t<li>子数组中的所有元素 <strong>各不相同 。</strong></li>\n</ul>\n\n<p>返回满足题面要求的最大子数组和。如果不存在子数组满足这些条件，返回 <code>0</code> 。</p>\n\n<p><strong>子数组</strong> 是数组中一段连续非空的元素序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>nums = [1,5,4,2,9,9,9], k = 3\n<strong>输出：</strong>15\n<strong>解释：</strong>nums 中长度为 3 的子数组是：\n- [1,5,4] 满足全部条件，和为 10 。\n- [5,4,2] 满足全部条件，和为 11 。\n- [4,2,9] 满足全部条件，和为 15 。\n- [2,9,9] 不满足全部条件，因为元素 9 出现重复。\n- [9,9,9] 不满足全部条件，因为元素 9 出现重复。\n因为 15 是满足全部条件的所有子数组中的最大子数组和，所以返回 15 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>nums = [4,4,4], k = 3\n<strong>输出：</strong>0\n<strong>解释：</strong>nums 中长度为 3 的子数组是：\n- [4,4,4] 不满足全部条件，因为元素 4 出现重复。\n因为不存在满足全部条件的子数组，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2462.雇佣 K 位工人的总代价",
        "hardRate": "MEDIUM",
        "passRate": "37.74%",
        "problemsUrl": "https://leetcode.cn/problems/total-cost-to-hire-k-workers/",
        "solutionsUrl": "https://leetcode.cn/problems/total-cost-to-hire-k-workers/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始的整数数组&nbsp;<code>costs</code>&nbsp;，其中&nbsp;<code>costs[i]</code>&nbsp;是雇佣第 <code>i</code>&nbsp;位工人的代价。</p>\n\n<p>同时给你两个整数&nbsp;<code>k</code> 和&nbsp;<code>candidates</code>&nbsp;。我们想根据以下规则恰好雇佣&nbsp;<code>k</code>&nbsp;位工人：</p>\n\n<ul>\n\t<li>总共进行&nbsp;<code>k</code>&nbsp;轮雇佣，且每一轮恰好雇佣一位工人。</li>\n\t<li>在每一轮雇佣中，从最前面 <code>candidates</code>&nbsp;和最后面 <code>candidates</code>&nbsp;人中选出代价最小的一位工人，如果有多位代价相同且最小的工人，选择下标更小的一位工人。\n\t<ul>\n\t\t<li>比方说，<code>costs = [3,2,7,7,1,2]</code> 且&nbsp;<code>candidates = 2</code>&nbsp;，第一轮雇佣中，我们选择第&nbsp;<code>4</code>&nbsp;位工人，因为他的代价最小&nbsp;<code>[<em>3,2</em>,7,7,<em><strong>1</strong>,2</em>]</code>&nbsp;。</li>\n\t\t<li>第二轮雇佣，我们选择第&nbsp;<code>1</code>&nbsp;位工人，因为他们的代价与第&nbsp;<code>4</code>&nbsp;位工人一样都是最小代价，而且下标更小，<code>[<em>3,<strong>2</strong></em>,7,<em>7,2</em>]</code>&nbsp;。注意每一轮雇佣后，剩余工人的下标可能会发生变化。</li>\n\t</ul>\n\t</li>\n\t<li>如果剩余员工数目不足 <code>candidates</code>&nbsp;人，那么下一轮雇佣他们中代价最小的一人，如果有多位代价相同且最小的工人，选择下标更小的一位工人。</li>\n\t<li>一位工人只能被选择一次。</li>\n</ul>\n\n<p>返回雇佣恰好<em>&nbsp;</em><code>k</code>&nbsp;位工人的总代价。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4\n<b>输出：</b>11\n<b>解释：</b>我们总共雇佣 3 位工人。总代价一开始为 0 。\n- 第一轮雇佣，我们从 [<strong><em>17,12,10,2</em></strong>,7,<strong><em>2,11,20,8</em></strong>] 中选择。最小代价是 2 ，有两位工人，我们选择下标更小的一位工人，即第 3 位工人。总代价是 0 + 2 = 2 。\n- 第二轮雇佣，我们从 [<strong><em>17,12,10,7</em></strong>,<strong><em>2,11,20,8</em></strong>] 中选择。最小代价是 2 ，下标为 4 ，总代价是 2 + 2 = 4 。\n- 第三轮雇佣，我们从 [<strong><em>17,12,10,7,11,20,8</em></strong>] 中选择，最小代价是 7 ，下标为 3 ，总代价是 4 + 7 = 11 。注意下标为 3 的工人同时在最前面和最后面 4 位工人中。\n总雇佣代价是 11 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>costs = [1,2,4,1], k = 3, candidates = 3\n<b>输出：</b>4\n<b>解释：</b>我们总共雇佣 3 位工人。总代价一开始为 0 。\n- 第一轮雇佣，我们从 [<strong><em>1,2,4,1</em></strong>] 中选择。最小代价为 1 ，有两位工人，我们选择下标更小的一位工人，即第 0 位工人，总代价是 0 + 1 = 1 。注意，下标为 1 和 2 的工人同时在最前面和最后面 3 位工人中。\n- 第二轮雇佣，我们从 [<strong><em>2,4,1</em></strong>] 中选择。最小代价为 1 ，下标为 2 ，总代价是 1 + 1 = 2 。\n- 第三轮雇佣，少于 3 位工人，我们从剩余工人 [<strong><em>2,4</em></strong>] 中选择。最小代价是 2 ，下标为 0 。总代价为 2 + 2 = 4 。\n总雇佣代价是 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= costs.length &lt;= 10<sup>5 </sup></code></li>\n\t<li><code>1 &lt;= costs[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= k, candidates &lt;= costs.length</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2463.最小移动总距离",
        "hardRate": "HARD",
        "passRate": "46.24%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-total-distance-traveled/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-total-distance-traveled/solution",
        "problemsDesc": "<p>X 轴上有一些机器人和工厂。给你一个整数数组&nbsp;<code>robot</code>&nbsp;，其中&nbsp;<code>robot[i]</code>&nbsp;是第&nbsp;<code>i</code>&nbsp;个机器人的位置。再给你一个二维整数数组&nbsp;<code>factory</code>&nbsp;，其中&nbsp;<code>factory[j] = [position<sub>j</sub>, limit<sub>j</sub>]</code>&nbsp;，表示第 <code>j</code>&nbsp;个工厂的位置在&nbsp;<code>position<sub>j</sub></code>&nbsp;，且第 <code>j</code>&nbsp;个工厂最多可以修理&nbsp;<code>limit<sub>j</sub></code>&nbsp;个机器人。</p>\n\n<p>每个机器人所在的位置 <strong>互不相同</strong>&nbsp;。每个工厂所在的位置也 <strong>互不相同</strong>&nbsp;。注意一个机器人可能一开始跟一个工厂在 <strong>相同的位置</strong>&nbsp;。</p>\n\n<p>所有机器人一开始都是坏的，他们会沿着设定的方向一直移动。设定的方向要么是 X 轴的正方向，要么是 X 轴的负方向。当一个机器人经过一个没达到上限的工厂时，这个工厂会维修这个机器人，且机器人停止移动。</p>\n\n<p><b>任何时刻</b>，你都可以设置&nbsp;<strong>部分</strong>&nbsp;机器人的移动方向。你的目标是最小化所有机器人总的移动距离。</p>\n\n<p>请你返回所有机器人移动的最小总距离。测试数据保证所有机器人都可以被维修。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li>所有机器人移动速度相同。</li>\n\t<li>如果两个机器人移动方向相同，它们永远不会碰撞。</li>\n\t<li>如果两个机器人迎面相遇，它们也不会碰撞，它们彼此之间会擦肩而过。</li>\n\t<li>如果一个机器人经过了一个已经达到上限的工厂，机器人会当作工厂不存在，继续移动。</li>\n\t<li>机器人从位置&nbsp;<code>x</code> 到位置&nbsp;<code>y</code>&nbsp;的移动距离为&nbsp;<code>|y - x|</code>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode-cn.com/1667542978-utuiPv-image.png\" style=\"width: 500px; height: 320px;\" /></p>\n\n<pre>\n<b>输入：</b>robot = [0,4,6], factory = [[2,2],[6,2]]\n<b>输出：</b>4\n<b>解释：</b>如上图所示：\n- 第一个机器人从位置 0 沿着正方向移动，在第一个工厂处维修。\n- 第二个机器人从位置 4 沿着负方向移动，在第一个工厂处维修。\n- 第三个机器人在位置 6 被第二个工厂维修，它不需要移动。\n第一个工厂的维修上限是 2 ，它维修了 2 个机器人。\n第二个工厂的维修上限是 2 ，它维修了 1 个机器人。\n总移动距离是 |2 - 0| + |2 - 4| + |6 - 6| = 4 。没有办法得到比 4 更少的总移动距离。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://pic.leetcode-cn.com/1667542984-OAIRFN-image.png\" style=\"width: 500px; height: 329px;\" /></p>\n\n<pre>\n<b>输入：</b>robot = [1,-1], factory = [[-2,1],[2,1]]\n<b>输出：</b>2\n<b>解释：</b>如上图所示：\n- 第一个机器人从位置 1 沿着正方向移动，在第二个工厂处维修。\n- 第二个机器人在位置 -1 沿着负方向移动，在第一个工厂处维修。\n第一个工厂的维修上限是 1 ，它维修了 1 个机器人。\n第二个工厂的维修上限是 1 ，它维修了 1 个机器人。\n总移动距离是 |2 - 1| + |(-2) - (-1)| = 2 。没有办法得到比 2 更少的总移动距离。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= robot.length, factory.length &lt;= 100</code></li>\n\t<li><code>factory[j].length == 2</code></li>\n\t<li><code>-10<sup>9</sup> &lt;= robot[i], position<sub>j</sub> &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= limit<sub>j</sub> &lt;= robot.length</code></li>\n\t<li>测试数据保证所有机器人都可以被维修。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2464.有效分割中的最少子数组数目",
        "hardRate": "MEDIUM",
        "passRate": "64.21%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-subarrays-in-a-valid-split/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-subarrays-in-a-valid-split/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2465.不同的平均值数目",
        "hardRate": "EASY",
        "passRate": "72.34%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-distinct-averages/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-distinct-averages/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong>&nbsp;开始长度为 <strong>偶数</strong>&nbsp;的整数数组&nbsp;<code>nums</code>&nbsp;。</p>\n\n<p>只要&nbsp;<code>nums</code> <strong>不是</strong>&nbsp;空数组，你就重复执行以下步骤：</p>\n\n<ul>\n\t<li>找到&nbsp;<code>nums</code>&nbsp;中的最小值，并删除它。</li>\n\t<li>找到&nbsp;<code>nums</code>&nbsp;中的最大值，并删除它。</li>\n\t<li>计算删除两数的平均值。</li>\n</ul>\n\n<p>两数 <code>a</code>&nbsp;和 <code>b</code>&nbsp;的 <strong>平均值</strong>&nbsp;为&nbsp;<code>(a + b) / 2</code>&nbsp;。</p>\n\n<ul>\n\t<li>比方说，<code>2</code>&nbsp;和&nbsp;<code>3</code>&nbsp;的平均值是&nbsp;<code>(2 + 3) / 2 = 2.5</code>&nbsp;。</li>\n</ul>\n\n<p>返回上述过程能得到的 <strong>不同</strong>&nbsp;平均值的数目。</p>\n\n<p><strong>注意</strong>&nbsp;，如果最小值或者最大值有重复元素，可以删除任意一个。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>nums = [4,1,4,0,3,5]\n<b>输出：</b>2\n<strong>解释：</strong>\n1. 删除 0 和 5 ，平均值是 (0 + 5) / 2 = 2.5 ，现在 nums = [4,1,4,3] 。\n2. 删除 1 和 4 ，平均值是 (1 + 4) / 2 = 2.5 ，现在 nums = [4,3] 。\n3. 删除 3 和 4 ，平均值是 (3 + 4) / 2 = 3.5 。\n2.5 ，2.5 和 3.5 之中总共有 2 个不同的数，我们返回 2 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>nums = [1,100]\n<b>输出：</b>1\n<strong>解释：</strong>\n删除 1 和 100 后只有一个平均值，所以我们返回 1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>nums.length</code>&nbsp;是偶数。</li>\n\t<li><code>0 &lt;= nums[i] &lt;= 100</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2466.统计构造好字符串的方案数",
        "hardRate": "MEDIUM",
        "passRate": "46.23%",
        "problemsUrl": "https://leetcode.cn/problems/count-ways-to-build-good-strings/",
        "solutionsUrl": "https://leetcode.cn/problems/count-ways-to-build-good-strings/solution",
        "problemsDesc": "<p>给你整数&nbsp;<code>zero</code>&nbsp;，<code>one</code>&nbsp;，<code>low</code>&nbsp;和&nbsp;<code>high</code>&nbsp;，我们从空字符串开始构造一个字符串，每一步执行下面操作中的一种：</p>\n\n<ul>\n\t<li>将&nbsp;<code>'0'</code>&nbsp;在字符串末尾添加&nbsp;<code>zero</code>&nbsp; 次。</li>\n\t<li>将&nbsp;<code>'1'</code>&nbsp;在字符串末尾添加&nbsp;<code>one</code>&nbsp;次。</li>\n</ul>\n\n<p>以上操作可以执行任意次。</p>\n\n<p>如果通过以上过程得到一个 <strong>长度</strong>&nbsp;在&nbsp;<code>low</code> 和&nbsp;<code>high</code>&nbsp;之间（包含上下边界）的字符串，那么这个字符串我们称为&nbsp;<strong>好</strong>&nbsp;字符串。</p>\n\n<p>请你返回满足以上要求的 <strong>不同</strong>&nbsp;好字符串数目。由于答案可能很大，请将结果对&nbsp;<code>10<sup>9</sup> + 7</code>&nbsp;<strong>取余</strong>&nbsp;后返回。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>low = 3, high = 3, zero = 1, one = 1\n<b>输出：</b>8\n<b>解释：</b>\n一个可能的好字符串是 \"011\" 。\n可以这样构造得到：\"\" -&gt; \"0\" -&gt; \"01\" -&gt; \"011\" 。\n从 \"000\" 到 \"111\" 之间所有的二进制字符串都是好字符串。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>low = 2, high = 3, zero = 1, one = 2\n<b>输出：</b>5\n<b>解释：</b>好字符串为 \"00\" ，\"11\" ，\"000\" ，\"110\" 和 \"011\" 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= low&nbsp;&lt;= high&nbsp;&lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= zero, one &lt;= low</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2467.树上最大得分和路径",
        "hardRate": "MEDIUM",
        "passRate": "50.38%",
        "problemsUrl": "https://leetcode.cn/problems/most-profitable-path-in-a-tree/",
        "solutionsUrl": "https://leetcode.cn/problems/most-profitable-path-in-a-tree/solution",
        "problemsDesc": "<p>一个 <code>n</code>&nbsp;个节点的无向树，节点编号为&nbsp;<code>0</code>&nbsp;到&nbsp;<code>n - 1</code>&nbsp;，树的根结点是&nbsp;<code>0</code>&nbsp;号节点。给你一个长度为 <code>n - 1</code>&nbsp;的二维整数数组&nbsp;<code>edges</code>&nbsp;，其中&nbsp;<code>edges[i] = [a<sub>i</sub>, b<sub>i</sub>]</code>&nbsp;，表示节点&nbsp;<code>a<sub>i</sub></code> 和&nbsp;<code>b<sub>i</sub></code>&nbsp;在树中有一条边。</p>\n\n<p>在每一个节点&nbsp;<code>i</code>&nbsp;处有一扇门。同时给你一个都是偶数的数组&nbsp;<code>amount</code>&nbsp;，其中&nbsp;<code>amount[i]</code>&nbsp;表示：</p>\n\n<ul>\n\t<li>如果 <code>amount[i]</code>&nbsp;的值是负数，那么它表示打开节点&nbsp;<code>i</code>&nbsp;处门扣除的分数。</li>\n\t<li>如果 <code>amount[i]</code>&nbsp;的值是正数，那么它表示打开节点 <code>i</code>&nbsp;处门加上的分数。</li>\n</ul>\n\n<p>游戏按照如下规则进行：</p>\n\n<ul>\n\t<li>一开始，Alice 在节点&nbsp;<code>0</code>&nbsp;处，Bob 在节点&nbsp;<code>bob</code>&nbsp;处。</li>\n\t<li>每一秒钟，Alice 和 Bob <strong>分别</strong>&nbsp;移动到相邻的节点。Alice 朝着某个&nbsp;<strong>叶子结点</strong>&nbsp;移动，Bob 朝着节点&nbsp;<code>0</code>&nbsp;移动。</li>\n\t<li>对于他们之间路径上的 <strong>每一个</strong>&nbsp;节点，Alice 和 Bob 要么打开门并扣分，要么打开门并加分。注意：\n\t<ul>\n\t\t<li>如果门 <strong>已经打开</strong>&nbsp;（被另一个人打开），不会有额外加分也不会扣分。</li>\n\t\t<li>如果&nbsp;Alice 和 Bob <strong>同时</strong>&nbsp;到达一个节点，他们会共享这个节点的加分或者扣分。换言之，如果打开这扇门扣&nbsp;<code>c</code>&nbsp;分，那么&nbsp;Alice 和 Bob 分别扣&nbsp;<code>c / 2</code>&nbsp;分。如果这扇门的加分为&nbsp;<code>c</code>&nbsp;，那么他们分别加&nbsp;<code>c / 2</code>&nbsp;分。</li>\n\t</ul>\n\t</li>\n\t<li>如果 Alice 到达了一个叶子结点，她会停止移动。类似的，如果&nbsp;Bob 到达了节点&nbsp;<code>0</code>&nbsp;，他也会停止移动。注意这些事件互相 <strong>独立</strong>&nbsp;，不会影响另一方移动。</li>\n</ul>\n\n<p>请你返回&nbsp;Alice 朝最优叶子结点移动的 <strong>最大</strong>&nbsp;净得分。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/29/eg1.png\" style=\"width: 275px; height: 275px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6]\n<b>输出：</b>6\n<b>解释：</b>\n上图展示了输入给出的一棵树。游戏进行如下：\n- Alice 一开始在节点 0 处，Bob 在节点 3 处。他们分别打开所在节点的门。\n  Alice 得分为 -2 。\n- Alice 和 Bob 都移动到节点 1 。\n&nbsp; 因为他们同时到达这个节点，他们一起打开门并平分得分。\n&nbsp; Alice 的得分变为 -2 + (4 / 2) = 0 。\n- Alice 移动到节点 3 。因为 Bob 已经打开了这扇门，Alice 得分不变。\n&nbsp; Bob 移动到节点 0 ，并停止移动。\n- Alice 移动到节点 4 并打开这个节点的门，她得分变为 0 + 6 = 6 。\n现在，Alice 和 Bob 都不能进行任何移动了，所以游戏结束。\nAlice 无法得到更高分数。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<p><img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/10/29/eg2.png\" style=\"width: 250px; height: 78px;\"></p>\n\n<pre><b>输入：</b>edges = [[0,1]], bob = 1, amount = [-7280,2350]\n<b>输出：</b>-7280\n<b>解释：</b>\nAlice 按照路径 0-&gt;1 移动，同时 Bob 按照路径 1-&gt;0 移动。\n所以 Alice 只打开节点 0 处的门，她的得分为 -7280 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>edges.length == n - 1</code></li>\n\t<li><code>edges[i].length == 2</code></li>\n\t<li><code>0 &lt;= a<sub>i</sub>, b<sub>i</sub> &lt; n</code></li>\n\t<li><code>a<sub>i</sub> != b<sub>i</sub></code></li>\n\t<li><code>edges</code>&nbsp;表示一棵有效的树。</li>\n\t<li><code>1 &lt;= bob &lt; n</code></li>\n\t<li><code>amount.length == n</code></li>\n\t<li><code>amount[i]</code>&nbsp;是范围&nbsp;<code>[-10<sup>4</sup>, 10<sup>4</sup>]</code>&nbsp;之间的一个&nbsp;<strong>偶数</strong>&nbsp;。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2468.根据限制分割消息",
        "hardRate": "HARD",
        "passRate": "44.33%",
        "problemsUrl": "https://leetcode.cn/problems/split-message-based-on-limit/",
        "solutionsUrl": "https://leetcode.cn/problems/split-message-based-on-limit/solution",
        "problemsDesc": "<p>给你一个字符串&nbsp;<code>message</code>&nbsp;和一个正整数&nbsp;<code>limit</code>&nbsp;。</p>\n\n<p>你需要根据 <code>limit</code>&nbsp;将&nbsp;<code>message</code> <strong>分割</strong>&nbsp;成一个或多个 <strong>部分</strong>&nbsp;。每个部分的结尾都是&nbsp;<code>\"&lt;a/b&gt;\"</code>&nbsp;，其中&nbsp;<code>\"b\"</code>&nbsp;用分割出来的总数 <b>替换</b>，&nbsp;<code>\"a\"</code>&nbsp;用当前部分所在的编号 <strong>替换</strong>&nbsp;，编号从&nbsp;<code>1</code>&nbsp;到&nbsp;<code>b</code>&nbsp;依次编号。除此以外，除了最后一部分长度 <strong>小于等于</strong>&nbsp;<code>limit</code>&nbsp;以外，其他每一部分（包括结尾部分）的长度都应该&nbsp;<strong>等于</strong>&nbsp;<code>limit</code>&nbsp;。</p>\n\n<p>你需要确保分割后的结果数组，删掉每部分的结尾并<strong>&nbsp;按顺序&nbsp;</strong>连起来后，能够得到&nbsp;<code>message</code>&nbsp;。同时，结果数组越短越好。</p>\n\n<p>请你返回<em>&nbsp;</em><code>message</code>&nbsp; 分割后得到的结果数组。如果无法按要求分割&nbsp;<code>message</code>&nbsp;，返回一个空数组。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><b>输入：</b>message = \"this is really a very awesome message\", limit = 9\n<b>输出：</b>[\"thi&lt;1/14&gt;\",\"s i&lt;2/14&gt;\",\"s r&lt;3/14&gt;\",\"eal&lt;4/14&gt;\",\"ly &lt;5/14&gt;\",\"a v&lt;6/14&gt;\",\"ery&lt;7/14&gt;\",\" aw&lt;8/14&gt;\",\"eso&lt;9/14&gt;\",\"me&lt;10/14&gt;\",\" m&lt;11/14&gt;\",\"es&lt;12/14&gt;\",\"sa&lt;13/14&gt;\",\"ge&lt;14/14&gt;\"]\n<strong>解释：</strong>\n前面 9 个部分分别从 message 中得到 3 个字符。\n接下来的 5 个部分分别从 message 中得到 2 个字符。\n这个例子中，包含最后一个部分在内，每个部分的长度都为 9 。\n可以证明没有办法分割成少于 14 个部分。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><b>输入：</b>message = \"short message\", limit = 15\n<b>输出：</b>[\"short mess&lt;1/2&gt;\",\"age&lt;2/2&gt;\"]\n<strong>解释：</strong>\n在给定限制下，字符串可以分成两个部分：\n- 第一个部分包含 10 个字符，长度为 15 。\n- 第二个部分包含 3 个字符，长度为 8 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= message.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>message</code>&nbsp;只包含小写英文字母和&nbsp;<code>' '</code>&nbsp;。</li>\n\t<li><code>1 &lt;= limit &lt;= 10<sup>4</sup></code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2469.温度转换",
        "hardRate": "EASY",
        "passRate": "86.57%",
        "problemsUrl": "https://leetcode.cn/problems/convert-the-temperature/",
        "solutionsUrl": "https://leetcode.cn/problems/convert-the-temperature/solution",
        "problemsDesc": "<p>给你一个四舍五入到两位小数的非负浮点数 <code>celsius</code> 来表示温度，以 <strong>摄氏度</strong>（<strong>Celsius</strong>）为单位。</p>\n\n<p>你需要将摄氏度转换为 <strong>开氏度</strong>（<strong>Kelvin</strong>）和 <strong>华氏度</strong>（<strong>Fahrenheit</strong>），并以数组 <code>ans = [kelvin, fahrenheit]</code> 的形式返回结果。</p>\n\n<p>返回数组<em> <code>ans</code></em> 。与实际答案误差不超过 <code>10<sup>-5</sup></code> 的会视为正确答案<strong>。</strong></p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><code>开氏度 = 摄氏度 + 273.15</code></li>\n\t<li><code>华氏度 = 摄氏度 * 1.80 + 32.00</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n\n<pre><strong>输入：</strong>celsius = 36.50\n<strong>输出：</strong>[309.65000,97.70000]\n<strong>解释：</strong>36.50 摄氏度：转换为开氏度是 309.65 ，转换为华氏度是 97.70 。</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre><strong>输入：</strong>celsius = 122.11\n<strong>输出：</strong>[395.26000,251.79800]\n<strong>解释：</strong>122.11 摄氏度：转换为开氏度是 395.26 ，转换为华氏度是 251.798 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= celsius &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2470.最小公倍数为 K 的子数组数目",
        "hardRate": "MEDIUM",
        "passRate": "40.73%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-lcm-equal-to-k/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-subarrays-with-lcm-equal-to-k/solution",
        "problemsDesc": "<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你统计并返回 <code>nums</code> 的 <strong>子数组</strong> 中满足 <em>元素最小公倍数为 <code>k</code> </em>的子数组数目。</p>\n\n<p><strong>子数组</strong> 是数组中一个连续非空的元素序列。</p>\n\n<p><strong>数组的最小公倍数</strong> 是可被所有数组元素整除的最小正整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3,6,2,7,1], k = 6\n<strong>输出：</strong>4\n<strong>解释：</strong>以 6 为最小公倍数的子数组是：\n- [<em><strong>3</strong></em>,<em><strong>6</strong></em>,2,7,1]\n- [<em><strong>3</strong></em>,<em><strong>6</strong></em>,<em><strong>2</strong></em>,7,1]\n- [3,<em><strong>6</strong></em>,2,7,1]\n- [3,<em><strong>6</strong></em>,<em><strong>2</strong></em>,7,1]\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre><strong>输入：</strong>nums = [3], k = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在以 2 为最小公倍数的子数组。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], k &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2471.逐层排序二叉树所需的最少操作数目",
        "hardRate": "MEDIUM",
        "passRate": "55.70%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/solution",
        "problemsDesc": "<p>给你一个 <strong>值互不相同</strong> 的二叉树的根节点 <code>root</code> 。</p>\n\n<p>在一步操作中，你可以选择 <strong>同一层</strong> 上任意两个节点，交换这两个节点的值。</p>\n\n<p>返回每一层按 <strong>严格递增顺序</strong> 排序所需的最少操作数目。</p>\n\n<p>节点的 <strong>层数</strong> 是该节点和根节点之间的路径的边数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174006-2.png\" style=\"width: 500px; height: 324px;\">\n<pre><strong>输入：</strong>root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10]\n<strong>输出：</strong>3\n<strong>解释：</strong>\n- 交换 4 和 3 。第 2 层变为 [3,4] 。\n- 交换 7 和 5 。第 3 层变为 [5,6,8,7] 。\n- 交换 8 和 7 。第 3 层变为 [5,6,7,8] 。\n共计用了 3 步操作，所以返回 3 。\n可以证明 3 是需要的最少操作数目。\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174026-3.png\" style=\"width: 400px; height: 303px;\">\n<pre><strong>输入：</strong>root = [1,3,2,7,6,5,4]\n<strong>输出：</strong>3\n<strong>解释：\n</strong>- 交换 3 和 2 。第 2 层变为 [2,3] 。 \n- 交换 7 和 4 。第 3 层变为 [4,6,5,7] 。 \n- 交换 6 和 5 。第 3 层变为 [4,5,6,7] 。\n共计用了 3 步操作，所以返回 3 。 \n可以证明 3 是需要的最少操作数目。\n</pre>\n\n<p><strong>示例 3 ：</strong></p>\n<img src=\"https://assets.leetcode.com/uploads/2022/09/18/image-20220918174052-4.png\" style=\"width: 400px; height: 274px;\">\n<pre><strong>输入：</strong>root = [1,2,3,4,5,6]\n<strong>输出：</strong>0\n<strong>解释：</strong>每一层已经按递增顺序排序，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li>树中节点的数目在范围 <code>[1, 10<sup>5</sup>]</code> 。</li>\n\t<li><code>1 &lt;= Node.val &lt;= 10<sup>5</sup></code></li>\n\t<li>树中的所有值 <strong>互不相同</strong> 。</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2472.不重叠回文子字符串的最大数目",
        "hardRate": "HARD",
        "passRate": "43.97%",
        "problemsUrl": "https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/",
        "solutionsUrl": "https://leetcode.cn/problems/maximum-number-of-non-overlapping-palindrome-substrings/solution",
        "problemsDesc": "<p>给你一个字符串 <code>s</code> 和一个 <strong>正</strong> 整数 <code>k</code> 。</p>\n\n<p>从字符串 <code>s</code> 中选出一组满足下述条件且 <strong>不重叠</strong> 的子字符串：</p>\n\n<ul>\n\t<li>每个子字符串的长度 <strong>至少</strong> 为 <code>k</code> 。</li>\n\t<li>每个子字符串是一个 <strong>回文串</strong> 。</li>\n</ul>\n\n<p>返回最优方案中能选择的子字符串的 <strong>最大</strong> 数目。</p>\n\n<p><strong>子字符串</strong> 是字符串中一个连续的字符序列。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1 ：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"abaccdbbd\", k = 3\n<strong>输出：</strong>2\n<strong>解释：</strong>可以选择 s = \"<em><strong>aba</strong></em>cc<em><strong>dbbd</strong></em>\" 中斜体加粗的子字符串。\"aba\" 和 \"dbbd\" 都是回文，且长度至少为 k = 3 。\n可以证明，无法选出两个以上的有效子字符串。\n</pre>\n\n<p><strong>示例 2 ：</strong></p>\n\n<pre>\n<strong>输入：</strong>s = \"adbcda\", k = 2\n<strong>输出：</strong>0\n<strong>解释：</strong>字符串中不存在长度至少为 2 的回文子字符串。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> 仅由小写英文字母组成</li>\n</ul>\n",
        "isPlus": false
    },
    {
        "problemsName": " 2473.购买苹果的最低成本",
        "hardRate": "MEDIUM",
        "passRate": "58.08%",
        "problemsUrl": "https://leetcode.cn/problems/minimum-cost-to-buy-apples/",
        "solutionsUrl": "https://leetcode.cn/problems/minimum-cost-to-buy-apples/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2474.购买量严格增加的客户",
        "hardRate": "HARD",
        "passRate": "49.95%",
        "problemsUrl": "https://leetcode.cn/problems/customers-with-strictly-increasing-purchases/",
        "solutionsUrl": "https://leetcode.cn/problems/customers-with-strictly-increasing-purchases/solution",
        "problemsDesc": null,
        "isPlus": true
    },
    {
        "problemsName": " 2475.数组中不等三元组的数目",
        "hardRate": "EASY",
        "passRate": "77.80%",
        "problemsUrl": "https://leetcode.cn/problems/number-of-unequal-triplets-in-array/",
        "solutionsUrl": "https://leetcode.cn/problems/number-of-unequal-triplets-in-array/solution",
        "problemsDesc": "<p>给你一个下标从 <strong>0</strong> 开始的正整数数组 <code>nums</code> 。请你找出并统计满足下述条件的三元组 <code>(i, j, k)</code> 的数目：</p>\n\n<ul>\n\t<li><code>0 &lt;= i &lt; j &lt; k &lt; nums.length</code></li>\n\t<li><code>nums[i]</code>、<code>nums[j]</code> 和 <code>nums[k]</code> <strong>两两不同</strong> 。\n\t<ul>\n\t\t<li>换句话说：<code>nums[i] != nums[j]</code>、<code>nums[i] != nums[k]</code> 且 <code>nums[j] != nums[k]</code> 。</li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>返回满足上述条件三元组的数目<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,4,2,4,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>下面列出的三元组均满足题目条件：\n- (0, 2, 4) 因为 4 != 2 != 3\n- (1, 2, 4) 因为 4 != 2 != 3\n- (2, 3, 4) 因为 2 != 4 != 3\n共计 3 个三元组，返回 3 。\n注意 (2, 0, 4) 不是有效的三元组，因为 2 &gt; 0 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1,1,1,1]\n<strong>输出：</strong>0\n<strong>解释：</strong>不存在满足条件的三元组，所以返回 0 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= nums.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n",
        "isPlus": false
    }
]